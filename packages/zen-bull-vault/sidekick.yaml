- type: folder
  name: src
  path: /src
  files:
    - type: file
      name: EmergencyWithdraw.sol
      path: /src/EmergencyWithdraw.sol
      summary: >-
        This Solidity file contains a contract called EmergencyWithdraw that
        allows users to withdraw funds in case of an emergency.
      languages: Solidity
      imports:
        - openzeppelin/token/ERC20/IERC20.sol
        - ./interface/IZenBullStrategy.sol
        - squeeth-monorepo/interfaces/IWETH9.sol
        - ./interface/IEulerEToken.sol
        - ./interface/IEulerDToken.sol
        - openzeppelin/token/ERC20/ERC20.sol
        - ./UniFlash.sol
        - ./UniOracle.sol
        - squeeth-monorepo/strategy/base/StrategyMath.sol
        - openzeppelin/utils/Address.sol
      functions:
        - number: 1
          name: constructor
          summary: >-
            Constructor function that initializes the EmergencyWithdraw contract
            with the necessary addresses and approvals.
          return: ''
        - number: 2
          name: emergencyWithdrawEthFromCrab
          summary: >-
            Allows users to withdraw ETH deposited into the crab contract by
            providing ZenBull tokens.
          return: ''
        - number: 3
          name: emergencyRepayEulerDebt
          summary: >-
            Allows users to repay a portion of Euler debt and withdraw WETH
            collateral based on ZenBullEulerRecovery amount.
          return: ''
        - number: 4
          name: withdrawEth
          summary: >-
            Allows users to withdraw ETH from the contract after all
            ZenBullEulerRecovery tokens have been burnt.
          return: ''
        - number: 5
          name: _uniFlashSwap
          summary: Internal function to handle Uni v3 FlashSwapCallBack.
          return: ''
    - type: file
      name: FlashZen.sol
      path: /src/FlashZen.sol
      summary: FlashZen contract for handling flashswap interactions in Solidity
      languages: Solidity
      imports:
        - squeeth-monorepo/interfaces/IController.sol
        - openzeppelin/token/ERC20/IERC20.sol
        - squeeth-monorepo/interfaces/IWETH9.sol
        - ./interface/ICrabStrategyV2.sol
        - ./interface/IZenBullStrategy.sol
        - ./UniFlash.sol
        - squeeth-monorepo/strategy/base/StrategyMath.sol
        - openzeppelin/utils/Address.sol
        - ./UniOracle.sol
        - squeeth-monorepo/libs/VaultLib.sol
      functions: []
    - type: file
      name: LeverageZen.sol
      path: /src/LeverageZen.sol
      summary: >-
        This Solidity file contains the LeverageZen contract, which interacts
        with the leverage component of the Euler protocol.
      languages: Solidity
      imports:
        - squeeth-monorepo/interfaces/IController.sol
        - squeeth-monorepo/interfaces/IWETH9.sol
        - openzeppelin/token/ERC20/IERC20.sol
        - ./interface/IEulerMarkets.sol
        - ./interface/IEulerEToken.sol
        - ./interface/IEulerDToken.sol
        - openzeppelin/access/Ownable.sol
        - squeeth-monorepo/strategy/base/StrategyMath.sol
        - ./UniOracle.sol
      functions:
        - number: 1
          name: setAuction
          summary: >-
            Sets the auction implementation contract that is able to call
            functions to adjust debt and collateral in an auction.
        - number: 2
          name: auctionRepayAndWithdrawFromLeverage
          summary: >-
            Called by the auction address to repay USDC debt and withdraw WETH
            from Euler.
        - number: 3
          name: depositAndBorrowFromLeverage
          summary: >-
            Called by the auction address to deposit WETH in Euler or borrow
            USDC debt.
        - number: 4
          name: auctionDepositAndRepayFromLeverage
          summary: Called by the auction address to deposit WETH and repay USDC debt.
    - type: file
      name: UniFlash.sol
      path: /src/UniFlash.sol
      summary: Solidity contract that interacts with Uniswap pool for flash swaps
      languages: Solidity
      imports:
        - v3-core/interfaces/callback/IUniswapV3SwapCallback.sol
        - v3-core/interfaces/IUniswapV3Pool.sol
        - v3-periphery/libraries/Path.sol
        - v3-periphery/libraries/PoolAddress.sol
        - v3-periphery/libraries/CallbackValidation.sol
        - v3-core/libraries/TickMath.sol
        - v3-core/libraries/SafeCast.sol
        - openzeppelin/math/SafeMath.sol
      functions:
        - number: 1
          name: abstract contract UniFlash is IUniswapV3SwapCallback
          summary: Abstract contract that interacts with Uniswap pool for flash swaps
        - number: 2
          name: constructor
          summary: >-
            Constructor function that initializes the contract with the Uniswap
            factory address
        - number: 3
          name: uniswapV3SwapCallback
          summary: Callback function for Uniswap swaps
        - number: 4
          name: _uniFlashSwap
          summary: Internal function to execute flash swaps
        - number: 5
          name: _exactInFlashSwap
          summary: Internal function to execute exact-in flash swaps
        - number: 6
          name: _exactOutFlashSwap
          summary: Internal function to execute exact-out flash swaps
        - number: 7
          name: _exactInputInternal
          summary: Internal function for exact-in swap on Uniswap
        - number: 8
          name: _exactOutputInternal
          summary: Internal function for exact-out swap on Uniswap
        - number: 9
          name: _getPool
          summary: >-
            Internal function to get the Uniswap pool for a given token pair and
            fee
    - type: file
      name: UniOracle.sol
      path: /src/UniOracle.sol
      summary: UniOracle contract that interacts with Uniswap pool
      languages: Solidity
      imports:
        - v3-core/interfaces/IUniswapV3Pool.sol
        - squeeth-monorepo/interfaces/IERC20Detailed.sol
        - v3-periphery/libraries/Path.sol
        - v3-periphery/libraries/PoolAddress.sol
        - v3-core/libraries/SafeCast.sol
        - squeeth-monorepo/libs/OracleLibrary.sol
        - openzeppelin/math/SafeMath.sol
      functions:
        - number: 1
          name: >-
            function _getTwap(address _pool, address _base, address _quote,
            uint32 _period, bool _checkPeriod) internal view returns (uint256)
          summary: Get time-weighted average price of base currency in quote currency
        - number: 2
          name: >-
            function _fetchTwap(address _pool, address _base, address _quote,
            uint32 _period) private view returns (uint256)
          summary: Fetch time-weighted average price of base currency in quote currency
        - number: 3
          name: function _getMaxPeriod(address _pool) private view returns (uint32)
          summary: >-
            Get the maximum period that can be used to request time-weighted
            average price
    - type: file
      name: ZenAuction.sol
      path: /src/ZenAuction.sol
      summary: file
      error:
        message: >-
          This model's maximum context length is 4097 tokens. However, your
          messages resulted in 10283 tokens. Please reduce the length of the
          messages.
        type: invalid_request_error
        param: messages
        code: context_length_exceeded
    - type: file
      name: ZenBullStrategy.sol
      path: /src/ZenBullStrategy.sol
      summary: >-
        ZenBullStrategy.sol is a Solidity smart contract that implements a
        strategy for managing assets in the Zen Bull protocol.
      languages: Solidity
      imports:
        - squeeth-monorepo/interfaces/IController.sol
        - ./interface/ICrabStrategyV2.sol
        - openzeppelin/token/ERC20/IERC20.sol
        - squeeth-monorepo/interfaces/IWETH9.sol
        - openzeppelin/token/ERC20/ERC20.sol
        - ./LeverageZen.sol
        - openzeppelin/utils/Address.sol
        - squeeth-monorepo/strategy/base/StrategyMath.sol
        - squeeth-monorepo/libs/VaultLib.sol
      functions:
        - number: 1
          name: constructor ZenBullStrategy
          summary: Constructor for the ZenBullStrategy contract.
        - number: 2
          name: receive
          summary: Receive function to allow ETH transfer to this contract.
        - number: 3
          name: farm
          summary: Function to withdraw assets transferred directly to this contract.
        - number: 4
          name: setCap
          summary: Function to set the strategy cap.
        - number: 5
          name: setShutdownContract
          summary: Function to set the shutdown contract.
        - number: 6
          name: deposit
          summary: Function to deposit assets into the strategy.
        - number: 7
          name: withdraw
          summary: Function to withdraw assets from the strategy.
        - number: 8
          name: redeemCrabAndWithdrawWEth
          summary: Function for the auction contract to redeem crab and withdraw ETH.
        - number: 9
          name: depositEthIntoCrab
          summary: Function for the auction contract to deposit ETH into crab.
        - number: 10
          name: shutdownRepayAndWithdraw
          summary: >-
            Function to close out Euler leverage position if contracts have been
            shut down.
        - number: 11
          name: withdrawShutdown
          summary: >-
            Function to allow a user to withdraw their share of ETH if
            WPowerPerp controller contracts have been shut down.
        - number: 12
          name: getCrabBalance
          summary: >-
            Function to return the internal accounting of the bull strategy's
            crab
    - type: file
      name: ZenEmergencyShutdown.sol
      path: /src/ZenEmergencyShutdown.sol
      summary: >-
        ZenEmergencyShutdown contract handles emergency shutdown of the Bull
        strategy
      languages: Solidity
      imports:
        - squeeth-monorepo/interfaces/IController.sol
        - openzeppelin/token/ERC20/IERC20.sol
        - squeeth-monorepo/interfaces/IWETH9.sol
        - ./interface/IZenBullStrategy.sol
        - ./UniFlash.sol
        - openzeppelin/access/Ownable.sol
        - squeeth-monorepo/strategy/base/StrategyMath.sol
      functions:
        - number: 1
          name: ZenEmergencyShutdown.constructor
          summary: Constructor for ZenEmergencyShutdown contract
        - number: 2
          name: ZenEmergencyShutdown.redeemShortShutdown
          summary: Redeems Crab shares owned by Bull in case of shutdown
        - number: 3
          name: ZenEmergencyShutdown._uniFlashSwap
          summary: Handles different types of flashswaps
    - type: folder
      name: interface
      path: /src/interface
      files:
        - type: file
          name: ICrabStrategyV2.sol
          path: /src/interface/ICrabStrategyV2.sol
          summary: This file defines an interface for the Crab Strategy V2 contract.
          languages: Solidity
          imports:
            - openzeppelin/token/ERC20/IERC20.sol
          functions:
            - number: 1
              name: ICrabStrategyV2.deposit()
              summary: Deposits funds into the strategy.
            - number: 2
              name: ICrabStrategyV2.weth()
              summary: Returns the address of the WETH token.
            - number: 3
              name: ICrabStrategyV2.wPowerPerp()
              summary: Returns the address of the wPowerPerp token.
            - number: 4
              name: ICrabStrategyV2.vaultId()
              summary: Returns the ID of the vault.
            - number: 5
              name: ICrabStrategyV2.withdraw(uint256 _crabAmount)
              summary: Withdraws a specified amount of crab tokens.
            - number: 6
              name: ICrabStrategyV2.withdrawShutdown(uint256 _crabAmount)
              summary: Withdraws a specified amount of crab tokens during shutdown.
        - type: file
          name: IEulerDToken.sol
          path: /src/interface/IEulerDToken.sol
          summary: This file defines the interface for the EulerDToken contract.
          languages: Solidity
          imports: []
          functions:
            - number: 1
              name: interface IEulerDToken
              summary: >-
                Interface for EulerDToken contract. Returns balance, allows
                borrowing and repaying.
            - number: 2
              name: >-
                function balanceOf(address account) external view returns
                (uint256)
              summary: Returns the balance of the specified account.
            - number: 3
              name: function borrow(uint256 subAccountId, uint256 amount) external
              summary: Allows borrowing a specified amount for a sub-account.
            - number: 4
              name: function repay(uint256 subAccountId, uint256 amount) external
              summary: Allows repaying a specified amount for a sub-account.
        - type: file
          name: IEulerEToken.sol
          path: /src/interface/IEulerEToken.sol
          summary: This file defines an interface for the EulerEToken contract.
          languages: Solidity
          imports: []
          functions:
            - number: 1
              name: interface IEulerEToken
              summary: >-
                Interface for EulerEToken contract with balanceOf,
                balanceOfUnderlying, deposit, and withdraw functions.
        - type: file
          name: IEulerMarkets.sol
          path: /src/interface/IEulerMarkets.sol
          summary: This file defines the interface for Euler Markets.
          languages: Solidity
          imports: []
          functions:
            - number: 1
              name: interface IEulerMarkets
              summary: >-
                Defines functions for getting eToken and dToken addresses, and
                entering a market.
        - type: file
          name: ILeverageZen.sol
          path: /src/interface/ILeverageZen.sol
          summary: This file defines an interface for the LeverageZen contract.
          languages: Solidity
          imports: []
          functions:
            - number: 1
              name: interface ILeverageZen
              summary: Calculates the leverage of ETH to USDC.
              return: (uint256, uint256)
            - number: 2
              name: interface ILeverageZen
              summary: Calculates the amount of USDC to repay.
              return: uint256
            - number: 3
              name: interface ILeverageZen
              summary: Calculates the amount of WETH to withdraw.
              return: uint256
        - type: file
          name: IZenBullStrategy.sol
          path: /src/interface/IZenBullStrategy.sol
          summary: This file is an interface for the ZenBull strategy contract.
          languages: Solidity
          imports: []
          functions:
            - number: 1
              name: function deposit(uint256 _crabAmount) external payable;
              summary: Deposits a specified amount of crab tokens.
            - number: 2
              name: function withdraw(uint256 _bullAmount) external;
              summary: Withdraws a specified amount of bull tokens.
            - number: 3
              name: function crab() external view returns (address);
              summary: Returns the address of the crab token.
            - number: 4
              name: function powerTokenController() external view returns (address);
              summary: Returns the address of the power token controller.
            - number: 5
              name: >-
                function getCrabVaultDetails() external view returns (uint256,
                uint256);
              summary: Returns the details of the crab vault.
            - number: 6
              name: >-
                function calcLeverageEthUsdc(uint256 _crabAmount, uint256
                _bullShare, uint256 _ethInCrab, uint256 _squeethInCrab, uint256
                _crabTotalSupply) external view returns (uint256, uint256);
              summary: Calculates the leverage ratio between ETH and USDC.
            - number: 7
              name: >-
                function calcUsdcToRepay(uint256 _bullShare) external view
                returns (uint256);
              summary: Calculates the amount of USDC to repay.
            - number: 8
              name: function getCrabBalance() external view returns (uint256);
              summary: Returns the balance of crab tokens.
            - number: 9
              name: >-
                function auctionRepayAndWithdrawFromLeverage(uint256
                _usdcToRepay, uint256 _wethToWithdraw) external;
              summary: Performs an auction to repay and withdraw from leverage.
            - number: 10
              name: >-
                function auctionDepositAndRepayFromLeverage(uint256
                _wethToDeposit, uint256 _usdcToRepay) external;
              summary: Performs an auction to deposit and repay from leverage.
            - number: 11
              name: >-
                function shutdownRepayAndWithdraw(uint256 wethToUniswap, uint256
                shareToUnwind) external;
              summary: Performs a shutdown to repay and withdraw.
            - number: 12
              name: function hasRedeemedInShutdown() external view returns (bool);
              summary: Checks if redemption has occurred in shutdown.
            - number: 13
              name: >-
                function depositAndBorrowFromLeverage(uint256 _wethToDeposit,
                uint256 _usdcToBorrow) external;
              summary: Deposits and borrows from leverage.
            - number: 14
              name: function TARGET_CR() external view returns (uint256);
              summary: Returns the target collateralization ratio.
            - number: 15
              name: function depositEthIntoCrab(uint256 _ethToDeposit) external;
              summary: Deposits ETH into the crab vault.
            - number: 16
              name: >-
                function redeemCrabAndWithdrawWEth(uint256 _crabToRedeem,
                uint256 _wPowerPerpToRedeem) external returns (uint256);
              summary: Redeems crab tokens and withdraws wPowerPerp tokens.
      summary: >-
        The folder /src/interface contains several files and folders, including
        ICrabStrategyV2.sol, IEulerDToken.sol, IEulerEToken.sol,
        IEulerMarkets.sol, ILeverageZen.sol, and IZenBullStrategy.sol, each
        defining interfaces for different contracts such as the Crab Strategy
        V2, EulerDToken, EulerEToken, Euler Markets, LeverageZen, and ZenBull
        strategy contracts.
  summary: >-
    The /src folder contains various Solidity files and folders, including
    EmergencyWithdraw.sol, FlashZen.sol, LeverageZen.sol, UniFlash.sol,
    UniOracle.sol, ZenAuction.sol, ZenBullStrategy.sol,
    ZenEmergencyShutdown.sol, and an interface folder with multiple interface
    files defining contracts such as Crab Strategy V2, EulerDToken, EulerEToken,
    Euler Markets, LeverageZen, and ZenBull strategy contracts.
