{
  "language": "Solidity",
  "sources": {
    "contracts/core/Controller.sol": {
      "content": "//SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.7.6;\npragma abicoder v2;\n\n// interface\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {INonfungiblePositionManager} from \"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\";\nimport {IWETH9} from \"../interfaces/IWETH9.sol\";\nimport {IWPowerPerp} from \"../interfaces/IWPowerPerp.sol\";\nimport {IShortPowerPerp} from \"../interfaces/IShortPowerPerp.sol\";\nimport {IOracle} from \"../interfaces/IOracle.sol\";\nimport {IERC721Receiver} from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\n//contract\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n//lib\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ABDKMath64x64} from \"../libs/ABDKMath64x64.sol\";\nimport {VaultLib} from \"../libs/VaultLib.sol\";\nimport {Uint256Casting} from \"../libs/Uint256Casting.sol\";\nimport {Power2Base} from \"../libs/Power2Base.sol\";\n\n/**\n *\n * Error\n * C0: Paused\n * C1: Not paused\n * C2: Shutdown\n * C3: Not shutdown\n * C4: Invalid oracle address\n * C5: Invalid shortPowerPerp address\n * C6: Invalid wPowerPerp address\n * C7: Invalid weth address\n * C8: Invalid quote currency address\n * C9: Invalid eth:quoteCurrency pool address\n * C10: Invalid wPowerPerp:eth pool address\n * C11: Invalid Uniswap position manager\n * C12: Can not liquidate safe vault\n * C13: Invalid address\n * C14: Set fee recipient first\n * C15: Fee too high\n * C16: Paused too many times\n * C17: Pause time limit exceeded\n * C18: Not enough paused time has passed\n * C19: Cannot receive eth\n * C20: Not allowed\n * C21: Need full liquidation\n * C22: Dust vault left\n * C23: Invalid nft\n * C24: Invalid state\n * C25: 0 liquidity Uniswap position token\n * C26: Wrong fee tier for NFT deposit\n */\ncontract Controller is Ownable, ReentrancyGuard, IERC721Receiver {\n    using SafeMath for uint256;\n    using Uint256Casting for uint256;\n    using ABDKMath64x64 for int128;\n    using VaultLib for VaultLib.Vault;\n    using Address for address payable;\n\n    uint256 internal constant MIN_COLLATERAL = 6.9 ether;\n    /// @dev system can only be paused for 182 days from deployment\n    uint256 internal constant PAUSE_TIME_LIMIT = 182 days;\n\n    uint256 public constant FUNDING_PERIOD = 420 hours;\n    uint24 public immutable feeTier;\n    uint32 public constant TWAP_PERIOD = 420 seconds;\n\n    //80% of index\n    uint256 internal constant LOWER_MARK_RATIO = 8e17;\n    //140% of index\n    uint256 internal constant UPPER_MARK_RATIO = 140e16;\n    // 10%\n    uint256 internal constant LIQUIDATION_BOUNTY = 1e17;\n    // 2%\n    uint256 internal constant REDUCE_DEBT_BOUNTY = 2e16;\n\n    /// @dev basic unit used for calculation\n    uint256 private constant ONE = 1e18;\n\n    address public immutable weth;\n    address public immutable quoteCurrency;\n    address public immutable ethQuoteCurrencyPool;\n    /// @dev address of the powerPerp/weth pool\n    address public immutable wPowerPerpPool;\n    address internal immutable uniswapPositionManager;\n    address public immutable shortPowerPerp;\n    address public immutable wPowerPerp;\n    address public immutable oracle;\n    address public feeRecipient;\n\n    uint256 internal immutable deployTimestamp;\n    /// @dev fee rate in basis point. feeRate of 1 = 0.01%\n    uint256 public feeRate;\n    /// @dev the settlement price for each wPowerPerp for settlement\n    uint256 public indexForSettlement;\n\n    uint256 public pausesLeft = 4;\n    uint256 public lastPauseTime;\n\n    // these 2 parameters are always updated together. Use uint128 to batch read and write.\n    uint128 public normalizationFactor;\n    uint128 public lastFundingUpdateTimestamp;\n\n    bool internal immutable isWethToken0;\n    bool public isShutDown;\n    bool public isSystemPaused;\n\n    /// @dev vault data storage\n    mapping(uint256 => VaultLib.Vault) public vaults;\n\n    /// Events\n    event OpenVault(address sender, uint256 vaultId);\n    event DepositCollateral(address sender, uint256 vaultId, uint256 amount);\n    event DepositUniPositionToken(address sender, uint256 vaultId, uint256 tokenId);\n    event WithdrawCollateral(address sender, uint256 vaultId, uint256 amount);\n    event WithdrawUniPositionToken(address sender, uint256 vaultId, uint256 tokenId);\n    event MintShort(address sender, uint256 amount, uint256 vaultId);\n    event BurnShort(address sender, uint256 amount, uint256 vaultId);\n    event ReduceDebt(\n        address sender,\n        uint256 vaultId,\n        uint256 ethRedeemed,\n        uint256 wPowerPerpRedeemed,\n        uint256 wPowerPerpBurned,\n        uint256 wPowerPerpExcess,\n        uint256 bounty\n    );\n    event UpdateOperator(address sender, uint256 vaultId, address operator);\n    event FeeRateUpdated(uint256 oldFee, uint256 newFee);\n    event FeeRecipientUpdated(address oldFeeRecipient, address newFeeRecipient);\n    event Liquidate(address liquidator, uint256 vaultId, uint256 debtAmount, uint256 collateralPaid);\n    event NormalizationFactorUpdated(\n        uint256 oldNormFactor,\n        uint256 newNormFactor,\n        uint256 lastModificationTimestamp,\n        uint256 timestamp\n    );\n    event Paused(uint256 pausesLeft);\n    event UnPaused(address unpauser);\n    event Shutdown(uint256 indexForSettlement);\n    event RedeemLong(address sender, uint256 wPowerPerpAmount, uint256 payoutAmount);\n    event RedeemShort(address sender, uint256 vauldId, uint256 collateralAmount);\n\n    modifier notPaused() {\n        require(!isSystemPaused, \"C0\");\n        _;\n    }\n\n    modifier isPaused() {\n        require(isSystemPaused, \"C1\");\n        _;\n    }\n\n    modifier notShutdown() {\n        require(!isShutDown, \"C2\");\n        _;\n    }\n\n    modifier isShutdown() {\n        require(isShutDown, \"C3\");\n        _;\n    }\n\n    /**\n     * @notice constructor\n     * @param _oracle oracle address\n     * @param _shortPowerPerp ERC721 token address representing the short position\n     * @param _wPowerPerp ERC20 token address representing the long position\n     * @param _weth weth address\n     * @param _quoteCurrency quoteCurrency address\n     * @param _ethQuoteCurrencyPool uniswap v3 pool for weth / quoteCurrency\n     * @param _wPowerPerpPool uniswap v3 pool for wPowerPerp / weth\n     * @param _uniPositionManager uniswap v3 position manager address\n     */\n    constructor(\n        address _oracle,\n        address _shortPowerPerp,\n        address _wPowerPerp,\n        address _weth,\n        address _quoteCurrency,\n        address _ethQuoteCurrencyPool,\n        address _wPowerPerpPool,\n        address _uniPositionManager,\n        uint24 _feeTier\n    ) {\n        require(_oracle != address(0), \"C4\");\n        require(_shortPowerPerp != address(0), \"C5\");\n        require(_wPowerPerp != address(0), \"C6\");\n        require(_weth != address(0), \"C7\");\n        require(_quoteCurrency != address(0), \"C8\");\n        require(_ethQuoteCurrencyPool != address(0), \"C9\");\n        require(_wPowerPerpPool != address(0), \"C10\");\n        require(_uniPositionManager != address(0), \"C11\");\n\n        oracle = _oracle;\n        shortPowerPerp = _shortPowerPerp;\n        wPowerPerp = _wPowerPerp;\n        weth = _weth;\n        quoteCurrency = _quoteCurrency;\n        ethQuoteCurrencyPool = _ethQuoteCurrencyPool;\n        wPowerPerpPool = _wPowerPerpPool;\n        uniswapPositionManager = _uniPositionManager;\n        feeTier = _feeTier;\n        isWethToken0 = _weth < _wPowerPerp;\n\n        normalizationFactor = 1e18;\n        deployTimestamp = block.timestamp;\n        lastFundingUpdateTimestamp = block.timestamp.toUint128();\n    }\n\n    /**\n     * ======================\n     * | External Functions |\n     * ======================\n     */\n\n    /**\n     * @notice returns the expected normalization factor, if the funding is paid right now\n     * @dev can be used for on-chain and off-chain calculations\n     */\n    function getExpectedNormalizationFactor() external view returns (uint256) {\n        return _getNewNormalizationFactor();\n    }\n\n    /**\n     * @notice get the index price of the powerPerp, scaled down\n     * @dev the index price is scaled down by INDEX_SCALE in the associated PowerXBase library\n     * @dev this is the index price used when calculating funding and for collateralization\n     * @param _period period which you want to calculate twap with\n     * @return index price denominated in $USD, scaled by 1e18\n     */\n    function getIndex(uint32 _period) external view returns (uint256) {\n        return Power2Base._getIndex(_period, oracle, ethQuoteCurrencyPool, weth, quoteCurrency);\n    }\n\n    /**\n     * @notice the unscaled index of the power perp in USD, scaled by 18 decimals\n     * @dev this is the mark that would be be used for future funding after a new normalization factor is applied\n     * @param _period period which you want to calculate twap with\n     * @return index price denominated in $USD, scaled by 1e18\n     */\n    function getUnscaledIndex(uint32 _period) external view returns (uint256) {\n        return Power2Base._getUnscaledIndex(_period, oracle, ethQuoteCurrencyPool, weth, quoteCurrency);\n    }\n\n    /**\n     * @notice get the expected mark price of powerPerp after funding has been applied\n     * @param _period period of time for the twap in seconds\n     * @return mark price denominated in $USD, scaled by 1e18\n     */\n    function getDenormalizedMark(uint32 _period) external view returns (uint256) {\n        return\n            Power2Base._getDenormalizedMark(\n                _period,\n                oracle,\n                wPowerPerpPool,\n                ethQuoteCurrencyPool,\n                weth,\n                quoteCurrency,\n                wPowerPerp,\n                _getNewNormalizationFactor()\n            );\n    }\n\n    /**\n     * @notice get the mark price of powerPerp before funding has been applied\n     * @dev this is the mark that would be used to calculate a new normalization factor if funding was calculated now\n     * @param _period period which you want to calculate twap with\n     * @return mark price denominated in $USD, scaled by 1e18\n     */\n    function getDenormalizedMarkForFunding(uint32 _period) external view returns (uint256) {\n        return\n            Power2Base._getDenormalizedMark(\n                _period,\n                oracle,\n                wPowerPerpPool,\n                ethQuoteCurrencyPool,\n                weth,\n                quoteCurrency,\n                wPowerPerp,\n                normalizationFactor\n            );\n    }\n\n    /**\n     * @dev return if the vault is properly collateralized\n     * @param _vaultId id of the vault\n     * @return true if the vault is properly collateralized\n     */\n    function isVaultSafe(uint256 _vaultId) external view returns (bool) {\n        VaultLib.Vault memory vault = vaults[_vaultId];\n        uint256 expectedNormalizationFactor = _getNewNormalizationFactor();\n        return _isVaultSafe(vault, expectedNormalizationFactor);\n    }\n\n    /**\n     * @notice deposit collateral and mint wPowerPerp (non-rebasing) for specified powerPerp (rebasing) amount\n     * @param _vaultId vault to mint wPowerPerp in\n     * @param _powerPerpAmount amount of powerPerp to mint\n     * @param _uniTokenId uniswap v3 position token id (additional collateral)\n     * @return vaultId\n     * @return amount of wPowerPerp minted\n     */\n    function mintPowerPerpAmount(\n        uint256 _vaultId,\n        uint256 _powerPerpAmount,\n        uint256 _uniTokenId\n    ) external payable notPaused nonReentrant returns (uint256, uint256) {\n        return _openDepositMint(msg.sender, _vaultId, _powerPerpAmount, msg.value, _uniTokenId, false);\n    }\n\n    /**\n     * @notice deposit collateral and mint wPowerPerp\n     * @param _vaultId vault to mint wPowerPerp in\n     * @param _wPowerPerpAmount amount of wPowerPerp to mint\n     * @param _uniTokenId uniswap v3 position token id (additional collateral)\n     * @return vaultId\n     */\n    function mintWPowerPerpAmount(\n        uint256 _vaultId,\n        uint256 _wPowerPerpAmount,\n        uint256 _uniTokenId\n    ) external payable notPaused nonReentrant returns (uint256) {\n        (uint256 vaultId, ) = _openDepositMint(msg.sender, _vaultId, _wPowerPerpAmount, msg.value, _uniTokenId, true);\n        return vaultId;\n    }\n\n    /**\n     * @dev deposit collateral into a vault\n     * @param _vaultId id of the vault\n     */\n    function deposit(uint256 _vaultId) external payable notPaused nonReentrant {\n        _checkCanModifyVault(_vaultId, msg.sender);\n\n        _applyFunding();\n        VaultLib.Vault memory cachedVault = vaults[_vaultId];\n        _addEthCollateral(cachedVault, _vaultId, msg.value);\n\n        _writeVault(_vaultId, cachedVault);\n    }\n\n    /**\n     * @notice deposit uniswap position token into a vault to increase collateral ratio\n     * @param _vaultId id of the vault\n     * @param _uniTokenId uniswap position token id\n     */\n    function depositUniPositionToken(uint256 _vaultId, uint256 _uniTokenId) external notPaused nonReentrant {\n        _checkCanModifyVault(_vaultId, msg.sender);\n\n        _applyFunding();\n        VaultLib.Vault memory cachedVault = vaults[_vaultId];\n\n        _depositUniPositionToken(cachedVault, msg.sender, _vaultId, _uniTokenId);\n        _writeVault(_vaultId, cachedVault);\n    }\n\n    /**\n     * @notice withdraw collateral from a vault\n     * @param _vaultId id of the vault\n     * @param _amount amount of eth to withdraw\n     */\n    function withdraw(uint256 _vaultId, uint256 _amount) external notPaused nonReentrant {\n        _checkCanModifyVault(_vaultId, msg.sender);\n\n        uint256 cachedNormFactor = _applyFunding();\n        VaultLib.Vault memory cachedVault = vaults[_vaultId];\n\n        _withdrawCollateral(cachedVault, _vaultId, _amount);\n        _checkVault(cachedVault, cachedNormFactor);\n        _writeVault(_vaultId, cachedVault);\n        payable(msg.sender).sendValue(_amount);\n    }\n\n    /**\n     * @notice withdraw uniswap v3 position token from a vault\n     * @param _vaultId id of the vault\n     */\n    function withdrawUniPositionToken(uint256 _vaultId) external notPaused nonReentrant {\n        _checkCanModifyVault(_vaultId, msg.sender);\n\n        uint256 cachedNormFactor = _applyFunding();\n        VaultLib.Vault memory cachedVault = vaults[_vaultId];\n        _withdrawUniPositionToken(cachedVault, msg.sender, _vaultId);\n        _checkVault(cachedVault, cachedNormFactor);\n        _writeVault(_vaultId, cachedVault);\n    }\n\n    /**\n     * @notice burn wPowerPerp and remove collateral from a vault\n     * @param _vaultId id of the vault\n     * @param _wPowerPerpAmount amount of wPowerPerp to burn\n     * @param _withdrawAmount amount of eth to withdraw\n     */\n    function burnWPowerPerpAmount(\n        uint256 _vaultId,\n        uint256 _wPowerPerpAmount,\n        uint256 _withdrawAmount\n    ) external notPaused nonReentrant {\n        _checkCanModifyVault(_vaultId, msg.sender);\n\n        _burnAndWithdraw(msg.sender, _vaultId, _wPowerPerpAmount, _withdrawAmount, true);\n    }\n\n    /**\n     * @notice burn powerPerp and remove collateral from a vault\n     * @param _vaultId id of the vault\n     * @param _powerPerpAmount amount of powerPerp to burn\n     * @param _withdrawAmount amount of eth to withdraw\n     * @return amount of wPowerPerp burned\n     */\n    function burnPowerPerpAmount(\n        uint256 _vaultId,\n        uint256 _powerPerpAmount,\n        uint256 _withdrawAmount\n    ) external notPaused nonReentrant returns (uint256) {\n        _checkCanModifyVault(_vaultId, msg.sender);\n\n        return _burnAndWithdraw(msg.sender, _vaultId, _powerPerpAmount, _withdrawAmount, false);\n    }\n\n    /**\n     * @notice after the system is shutdown, insolvent vaults need to be have their uniswap v3 token assets withdrawn by force\n     * @notice if a vault has a uniswap v3 position in it, anyone can call to withdraw uniswap v3 token assets, reducing debt and increasing collateral in the vault\n     * @dev the caller won't get any bounty. this is expected to be used for insolvent vaults in shutdown\n     * @param _vaultId vault containing uniswap v3 position to liquidate\n     */\n    function reduceDebtShutdown(uint256 _vaultId) external isShutdown nonReentrant {\n        VaultLib.Vault memory cachedVault = vaults[_vaultId];\n        _reduceDebt(cachedVault, IShortPowerPerp(shortPowerPerp).ownerOf(_vaultId), _vaultId, false);\n        _writeVault(_vaultId, cachedVault);\n    }\n\n    /**\n     * @notice withdraw assets from uniswap v3 position, reducing debt and increasing collateral in the vault\n     * @dev the caller won't get any bounty. this is expected to be used by vault owner\n     * @param _vaultId target vault\n     */\n    function reduceDebt(uint256 _vaultId) external notPaused nonReentrant {\n        _checkCanModifyVault(_vaultId, msg.sender);\n        VaultLib.Vault memory cachedVault = vaults[_vaultId];\n\n        _reduceDebt(cachedVault, IShortPowerPerp(shortPowerPerp).ownerOf(_vaultId), _vaultId, false);\n\n        _writeVault(_vaultId, cachedVault);\n    }\n\n    /**\n     * @notice if a vault is under the 150% collateral ratio, anyone can liquidate the vault by burning wPowerPerp\n     * @dev liquidator can get back (wPowerPerp burned) * (index price) * (normalizationFactor)  * 110% in collateral\n     * @dev normally can only liquidate 50% of a vault's debt\n     * @dev if a vault is under dust limit after a liquidation can fully liquidate\n     * @dev will attempt to reduceDebt first, and can earn a bounty if sucessful\n     * @param _vaultId vault to liquidate\n     * @param _maxDebtAmount max amount of wPowerPerpetual to repay\n     * @return amount of wPowerPerp repaid\n     */\n    function liquidate(uint256 _vaultId, uint256 _maxDebtAmount) external notPaused nonReentrant returns (uint256) {\n        uint256 cachedNormFactor = _applyFunding();\n\n        VaultLib.Vault memory cachedVault = vaults[_vaultId];\n\n        require(!_isVaultSafe(cachedVault, cachedNormFactor), \"C12\");\n\n        // try to save target vault before liquidation by reducing debt\n        uint256 bounty = _reduceDebt(cachedVault, IShortPowerPerp(shortPowerPerp).ownerOf(_vaultId), _vaultId, true);\n\n        // if vault is safe after saving, pay bounty and return early\n        if (_isVaultSafe(cachedVault, cachedNormFactor)) {\n            _writeVault(_vaultId, cachedVault);\n            payable(msg.sender).sendValue(bounty);\n            return 0;\n        }\n\n        // add back the bounty amount, liquidators onlly get reward from liquidation\n        cachedVault.addEthCollateral(bounty);\n\n        // if the vault is still not safe after saving, liquidate it\n        (uint256 debtAmount, uint256 collateralPaid) = _liquidate(\n            cachedVault,\n            _maxDebtAmount,\n            cachedNormFactor,\n            msg.sender\n        );\n\n        emit Liquidate(msg.sender, _vaultId, debtAmount, collateralPaid);\n\n        _writeVault(_vaultId, cachedVault);\n\n        // pay the liquidator\n        payable(msg.sender).sendValue(collateralPaid);\n\n        return debtAmount;\n    }\n\n    /**\n     * @notice authorize an address to modify the vault\n     * @dev can be revoke by setting address to 0\n     * @param _vaultId id of the vault\n     * @param _operator new operator address\n     */\n    function updateOperator(uint256 _vaultId, address _operator) external {\n        require(\n            (shortPowerPerp == msg.sender) || (IShortPowerPerp(shortPowerPerp).ownerOf(_vaultId) == msg.sender),\n            \"C20\"\n        );\n        vaults[_vaultId].operator = _operator;\n        emit UpdateOperator(msg.sender, _vaultId, _operator);\n    }\n\n    /**\n     * @notice set the recipient who will receive the fee\n     * @dev this should be a contract handling insurance\n     * @param _newFeeRecipient new fee recipient\n     */\n    function setFeeRecipient(address _newFeeRecipient) external onlyOwner {\n        require(_newFeeRecipient != address(0), \"C13\");\n        emit FeeRecipientUpdated(feeRecipient, _newFeeRecipient);\n        feeRecipient = _newFeeRecipient;\n    }\n\n    /**\n     * @notice set the fee rate when user mints\n     * @dev this function cannot be called if the feeRecipient is still un-set\n     * @param _newFeeRate new fee rate in basis points. can't be higher than 1%\n     */\n    function setFeeRate(uint256 _newFeeRate) external onlyOwner {\n        require(feeRecipient != address(0), \"C14\");\n        require(_newFeeRate <= 100, \"C15\");\n        emit FeeRateUpdated(feeRate, _newFeeRate);\n        feeRate = _newFeeRate;\n    }\n\n    /**\n     * @notice shutting down the system allows all long wPowerPerp to be settled at index * normalizationFactor\n     * @notice short positions can be redeemed for vault collateral minus value of debt\n     * @notice pause (if not paused) and then immediately shutdown the system, can be called when paused already\n     * @dev this bypasses the check on number of pauses or time based checks, but is irreversible and enables emergency settlement\n     */\n    function shutDown() external onlyOwner notShutdown {\n        isSystemPaused = true;\n        isShutDown = true;\n        indexForSettlement = Power2Base._getScaledTwap(\n            oracle,\n            ethQuoteCurrencyPool,\n            weth,\n            quoteCurrency,\n            TWAP_PERIOD,\n            false\n        );\n        emit Shutdown(indexForSettlement);\n    }\n\n    /**\n     * @notice pause the system for up to 24 hours after which any one can unpause\n     * @dev can only be called for 365 days since the contract was launched or 4 times\n     */\n    function pause() external onlyOwner notShutdown notPaused {\n        require(pausesLeft > 0, \"C16\");\n        uint256 timeSinceDeploy = block.timestamp.sub(deployTimestamp);\n        require(timeSinceDeploy < PAUSE_TIME_LIMIT, \"C17\");\n        isSystemPaused = true;\n        pausesLeft -= 1;\n        lastPauseTime = block.timestamp;\n\n        emit Paused(pausesLeft);\n    }\n\n    /**\n     * @notice unpause the contract\n     * @dev anyone can unpause the contract after 24 hours\n     */\n    function unPauseAnyone() external isPaused notShutdown {\n        require(block.timestamp > (lastPauseTime + 1 days), \"C18\");\n        isSystemPaused = false;\n        emit UnPaused(msg.sender);\n    }\n\n    /**\n     * @notice unpause the contract\n     * @dev owner can unpause at any time\n     */\n    function unPauseOwner() external onlyOwner isPaused notShutdown {\n        isSystemPaused = false;\n        emit UnPaused(msg.sender);\n    }\n\n    /**\n     * @notice redeem wPowerPerp for (settlement index value) * normalizationFactor when the system is shutdown\n     * @param _wPerpAmount amount of wPowerPerp to burn\n     */\n    function redeemLong(uint256 _wPerpAmount) external isShutdown nonReentrant {\n        IWPowerPerp(wPowerPerp).burn(msg.sender, _wPerpAmount);\n\n        uint256 longValue = Power2Base._getLongSettlementValue(_wPerpAmount, indexForSettlement, normalizationFactor);\n        payable(msg.sender).sendValue(longValue);\n\n        emit RedeemLong(msg.sender, _wPerpAmount, longValue);\n    }\n\n    /**\n     * @notice redeem short position when the system is shutdown\n     * @dev short position is redeemed by valuing the debt at the (settlement index value) * normalizationFactor\n     * @param _vaultId vault id\n     */\n    function redeemShort(uint256 _vaultId) external isShutdown nonReentrant {\n        _checkCanModifyVault(_vaultId, msg.sender);\n\n        VaultLib.Vault memory cachedVault = vaults[_vaultId];\n        uint256 cachedNormFactor = normalizationFactor;\n\n        _reduceDebt(cachedVault, msg.sender, _vaultId, false);\n\n        uint256 debt = Power2Base._getLongSettlementValue(\n            cachedVault.shortAmount,\n            indexForSettlement,\n            cachedNormFactor\n        );\n        // if the debt is more than collateral, this line will revert\n        uint256 excess = uint256(cachedVault.collateralAmount).sub(debt);\n\n        // reset the vault but don't burn the nft, just because people may want to keep it\n        cachedVault.shortAmount = 0;\n        cachedVault.collateralAmount = 0;\n        _writeVault(_vaultId, cachedVault);\n\n        payable(msg.sender).sendValue(excess);\n\n        emit RedeemShort(msg.sender, _vaultId, excess);\n    }\n\n    /**\n     * @notice update the normalization factor as a way to pay funding\n     */\n    function applyFunding() external notPaused {\n        _applyFunding();\n    }\n\n    /**\n     * @notice add eth into a contract. used in case contract has insufficient eth to pay for settlement transactions\n     */\n    function donate() external payable isShutdown {}\n\n    /**\n     * @notice fallback function to accept eth\n     */\n    receive() external payable {\n        require(msg.sender == weth, \"C19\");\n    }\n\n    /**\n     * @dev accept erc721 from safeTransferFrom and safeMint after callback\n     * @return returns received selector\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    /*\n     * ======================\n     * | Internal Functions |\n     * ======================\n     */\n\n    /**\n     * @notice check if an address can modify a vault\n     * @param _vaultId the id of the vault to check if can be modified by _account\n     * @param _account the address to check if can modify the vault\n     */\n    function _checkCanModifyVault(uint256 _vaultId, address _account) internal view {\n        require(\n            IShortPowerPerp(shortPowerPerp).ownerOf(_vaultId) == _account || vaults[_vaultId].operator == _account,\n            \"C20\"\n        );\n    }\n\n    /**\n     * @notice wrapper function which opens a vault, adds collateral and mints wPowerPerp\n     * @param _account account to receive wPowerPerp\n     * @param _vaultId id of the vault\n     * @param _mintAmount amount to mint\n     * @param _depositAmount amount of eth as collateral\n     * @param _uniTokenId id of uniswap v3 position token\n     * @param _isWAmount if the input amount is a wPowerPerp amount (as opposed to rebasing powerPerp)\n     * @return the vaultId that was acted on or for a new vault the newly created vaultId\n     * @return the minted wPowerPerp amount\n     */\n    function _openDepositMint(\n        address _account,\n        uint256 _vaultId,\n        uint256 _mintAmount,\n        uint256 _depositAmount,\n        uint256 _uniTokenId,\n        bool _isWAmount\n    ) internal returns (uint256, uint256) {\n        uint256 cachedNormFactor = _applyFunding();\n        uint256 depositAmountWithFee = _depositAmount;\n        uint256 wPowerPerpAmount = _isWAmount ? _mintAmount : _mintAmount.mul(ONE).div(cachedNormFactor);\n        uint256 feeAmount;\n        VaultLib.Vault memory cachedVault;\n\n        // load vault or create new a new one\n        if (_vaultId == 0) {\n            (_vaultId, cachedVault) = _openVault(_account);\n        } else {\n            // make sure we're not accessing an unexistent vault.\n            _checkCanModifyVault(_vaultId, msg.sender);\n            cachedVault = vaults[_vaultId];\n        }\n\n        if (wPowerPerpAmount > 0) {\n            (feeAmount, depositAmountWithFee) = _getFee(cachedVault, wPowerPerpAmount, _depositAmount);\n            _mintWPowerPerp(cachedVault, _account, _vaultId, wPowerPerpAmount);\n        }\n        if (_depositAmount > 0) _addEthCollateral(cachedVault, _vaultId, depositAmountWithFee);\n        if (_uniTokenId != 0) _depositUniPositionToken(cachedVault, _account, _vaultId, _uniTokenId);\n\n        _checkVault(cachedVault, cachedNormFactor);\n        _writeVault(_vaultId, cachedVault);\n\n        // pay insurance fee\n        if (feeAmount > 0) payable(feeRecipient).sendValue(feeAmount);\n\n        return (_vaultId, wPowerPerpAmount);\n    }\n\n    /**\n     * @notice wrapper function to burn wPowerPerp and redeem collateral\n     * @param _account who should receive collateral\n     * @param _vaultId id of the vault\n     * @param _burnAmount amount of wPowerPerp to burn\n     * @param _withdrawAmount amount of eth collateral to withdraw\n     * @param _isWAmount true if the amount is wPowerPerp (as opposed to rebasing powerPerp)\n     * @return total burned wPowerPower amount\n     */\n    function _burnAndWithdraw(\n        address _account,\n        uint256 _vaultId,\n        uint256 _burnAmount,\n        uint256 _withdrawAmount,\n        bool _isWAmount\n    ) internal returns (uint256) {\n        uint256 cachedNormFactor = _applyFunding();\n        uint256 wBurnAmount = _isWAmount ? _burnAmount : _burnAmount.mul(ONE).div(cachedNormFactor);\n\n        VaultLib.Vault memory cachedVault = vaults[_vaultId];\n        if (wBurnAmount > 0) _burnWPowerPerp(cachedVault, _account, _vaultId, wBurnAmount);\n        if (_withdrawAmount > 0) _withdrawCollateral(cachedVault, _vaultId, _withdrawAmount);\n        _checkVault(cachedVault, cachedNormFactor);\n        _writeVault(_vaultId, cachedVault);\n\n        if (_withdrawAmount > 0) payable(msg.sender).sendValue(_withdrawAmount);\n\n        return wBurnAmount;\n    }\n\n    /**\n     * @notice open a new vault\n     * @dev create a new vault and bind it with a new short vault id\n     * @param _recipient owner of new vault\n     * @return id of the new vault\n     * @return new in-memory vault\n     */\n    function _openVault(address _recipient) internal returns (uint256, VaultLib.Vault memory) {\n        uint256 vaultId = IShortPowerPerp(shortPowerPerp).mintNFT(_recipient);\n\n        VaultLib.Vault memory vault = VaultLib.Vault({\n            NftCollateralId: 0,\n            collateralAmount: 0,\n            shortAmount: 0,\n            operator: address(0)\n        });\n        emit OpenVault(msg.sender, vaultId);\n        return (vaultId, vault);\n    }\n\n    /**\n     * @notice deposit uniswap v3 position token into a vault\n     * @dev this function will update the vault memory in-place\n     * @param _vault the Vault memory to update\n     * @param _account account to transfer the uniswap v3 position from\n     * @param _vaultId id of the vault\n     * @param _uniTokenId uniswap position token id\n     */\n    function _depositUniPositionToken(\n        VaultLib.Vault memory _vault,\n        address _account,\n        uint256 _vaultId,\n        uint256 _uniTokenId\n    ) internal {\n        //get tokens for uniswap NFT\n        (, , address token0, address token1, uint24 fee, , , uint128 liquidity, , , , ) = INonfungiblePositionManager(\n            uniswapPositionManager\n        ).positions(_uniTokenId);\n\n        // require that liquidity is above 0\n        require(liquidity > 0, \"C25\");\n        // accept NFTs from only the wPowerPerp pool\n        require(fee == feeTier, \"C26\");\n        // check token0 and token1\n        require((token0 == wPowerPerp && token1 == weth) || (token1 == wPowerPerp && token0 == weth), \"C23\");\n\n        _vault.addUniNftCollateral(_uniTokenId);\n        INonfungiblePositionManager(uniswapPositionManager).safeTransferFrom(_account, address(this), _uniTokenId);\n        emit DepositUniPositionToken(msg.sender, _vaultId, _uniTokenId);\n    }\n\n    /**\n     * @notice add eth collateral into a vault\n     * @dev this function will update the vault memory in-place\n     * @param _vault the Vault memory to update.\n     * @param _vaultId id of the vault\n     * @param _amount amount of eth adding to the vault\n     */\n    function _addEthCollateral(\n        VaultLib.Vault memory _vault,\n        uint256 _vaultId,\n        uint256 _amount\n    ) internal {\n        _vault.addEthCollateral(_amount);\n        emit DepositCollateral(msg.sender, _vaultId, _amount);\n    }\n\n    /**\n     * @notice remove uniswap v3 position token from the vault\n     * @dev this function will update the vault memory in-place\n     * @param _vault the Vault memory to update\n     * @param _account where to send the uni position token to\n     * @param _vaultId id of the vault\n     */\n    function _withdrawUniPositionToken(\n        VaultLib.Vault memory _vault,\n        address _account,\n        uint256 _vaultId\n    ) internal {\n        uint256 tokenId = _vault.NftCollateralId;\n        _vault.removeUniNftCollateral();\n        INonfungiblePositionManager(uniswapPositionManager).safeTransferFrom(address(this), _account, tokenId);\n        emit WithdrawUniPositionToken(msg.sender, _vaultId, tokenId);\n    }\n\n    /**\n     * @notice remove eth collateral from the vault\n     * @dev this function will update the vault memory in-place\n     * @param _vault the Vault memory to update\n     * @param _vaultId id of the vault\n     * @param _amount amount of eth to withdraw\n     */\n    function _withdrawCollateral(\n        VaultLib.Vault memory _vault,\n        uint256 _vaultId,\n        uint256 _amount\n    ) internal {\n        _vault.removeEthCollateral(_amount);\n\n        emit WithdrawCollateral(msg.sender, _vaultId, _amount);\n    }\n\n    /**\n     * @notice mint wPowerPerp (ERC20) to an account\n     * @dev this function will update the vault memory in-place\n     * @param _vault the Vault memory to update\n     * @param _account account to receive wPowerPerp\n     * @param _vaultId id of the vault\n     * @param _wPowerPerpAmount wPowerPerp amount to mint\n     */\n    function _mintWPowerPerp(\n        VaultLib.Vault memory _vault,\n        address _account,\n        uint256 _vaultId,\n        uint256 _wPowerPerpAmount\n    ) internal {\n        _vault.addShort(_wPowerPerpAmount);\n        IWPowerPerp(wPowerPerp).mint(_account, _wPowerPerpAmount);\n\n        emit MintShort(msg.sender, _wPowerPerpAmount, _vaultId);\n    }\n\n    /**\n     * @notice burn wPowerPerp (ERC20) from an account\n     * @dev this function will update the vault memory in-place\n     * @param _vault the Vault memory to update\n     * @param _account account burning the wPowerPerp\n     * @param _vaultId id of the vault\n     * @param _wPowerPerpAmount wPowerPerp amount to burn\n     */\n    function _burnWPowerPerp(\n        VaultLib.Vault memory _vault,\n        address _account,\n        uint256 _vaultId,\n        uint256 _wPowerPerpAmount\n    ) internal {\n        _vault.removeShort(_wPowerPerpAmount);\n        IWPowerPerp(wPowerPerp).burn(_account, _wPowerPerpAmount);\n\n        emit BurnShort(msg.sender, _wPowerPerpAmount, _vaultId);\n    }\n\n    /**\n     * @notice liquidate a vault, pay the liquidator\n     * @dev liquidator can only liquidate at most 1/2 of the vault in 1 transaction\n     * @dev this function will update the vault memory in-place\n     * @param _vault the Vault memory to update\n     * @param _maxWPowerPerpAmount maximum debt amount liquidator is willing to repay\n     * @param _normalizationFactor current normalization factor\n     * @param _liquidator liquidator address to receive eth\n     * @return debtAmount amount of wPowerPerp repaid (burn from the vault)\n     * @return collateralToPay amount of collateral paid to liquidator\n     */\n    function _liquidate(\n        VaultLib.Vault memory _vault,\n        uint256 _maxWPowerPerpAmount,\n        uint256 _normalizationFactor,\n        address _liquidator\n    ) internal returns (uint256, uint256) {\n        (uint256 liquidateAmount, uint256 collateralToPay) = _getLiquidationResult(\n            _maxWPowerPerpAmount,\n            uint256(_vault.shortAmount),\n            uint256(_vault.collateralAmount)\n        );\n\n        // if the liquidator didn't specify enough wPowerPerp to burn, revert.\n        require(_maxWPowerPerpAmount >= liquidateAmount, \"C21\");\n\n        IWPowerPerp(wPowerPerp).burn(_liquidator, liquidateAmount);\n        _vault.removeShort(liquidateAmount);\n        _vault.removeEthCollateral(collateralToPay);\n\n        (, bool isDust) = _getVaultStatus(_vault, _normalizationFactor);\n        require(!isDust, \"C22\");\n\n        return (liquidateAmount, collateralToPay);\n    }\n\n    /**\n     * @notice redeem uniswap v3 position in a vault for its constituent eth and wPowerPerp\n     * @notice this will increase vault collateral by the amount of eth, and decrease debt by the amount of wPowerPerp\n     * @dev will be executed before liquidation if there's an NFT in the vault\n     * @dev pays a 2% bounty to the liquidator if called by liquidate()\n     * @dev will update the vault memory in-place\n     * @param _vault the Vault memory to update\n     * @param _owner account to send any excess\n     * @param _vaultId id of the vault to reduce debt on\n     * @param _payBounty true if paying caller 2% bounty\n     * @return bounty amount of bounty paid for liquidator\n     */\n    function _reduceDebt(\n        VaultLib.Vault memory _vault,\n        address _owner,\n        uint256 _vaultId,\n        bool _payBounty\n    ) internal returns (uint256) {\n        uint256 nftId = _vault.NftCollateralId;\n        if (nftId == 0) return 0;\n\n        (uint256 withdrawnEthAmount, uint256 withdrawnWPowerPerpAmount) = _redeemUniToken(nftId);\n\n        // change weth back to eth\n        if (withdrawnEthAmount > 0) IWETH9(weth).withdraw(withdrawnEthAmount);\n\n        (uint256 burnAmount, uint256 excess, uint256 bounty) = _getReduceDebtResultInVault(\n            _vault,\n            withdrawnEthAmount,\n            withdrawnWPowerPerpAmount,\n            _payBounty\n        );\n\n        if (excess > 0) IWPowerPerp(wPowerPerp).transfer(_owner, excess);\n        if (burnAmount > 0) IWPowerPerp(wPowerPerp).burn(address(this), burnAmount);\n\n        emit ReduceDebt(\n            msg.sender,\n            _vaultId,\n            withdrawnEthAmount,\n            withdrawnWPowerPerpAmount,\n            burnAmount,\n            excess,\n            bounty\n        );\n\n        return bounty;\n    }\n\n    /**\n     * @notice pay fee recipient\n     * @dev pay in eth from either the vault or the deposit amount\n     * @param _vault the Vault memory to update\n     * @param _wPowerPerpAmount the amount of wPowerPerpAmount minting\n     * @param _depositAmount the amount of eth depositing or withdrawing\n     * @return the amount of actual deposited eth into the vault, this is less than the original amount if a fee was taken\n     */\n    function _getFee(\n        VaultLib.Vault memory _vault,\n        uint256 _wPowerPerpAmount,\n        uint256 _depositAmount\n    ) internal view returns (uint256, uint256) {\n        uint256 cachedFeeRate = feeRate;\n        if (cachedFeeRate == 0) return (uint256(0), _depositAmount);\n        uint256 depositAmountAfterFee;\n        uint256 ethEquivalentMinted = Power2Base._getDebtValueInEth(\n            _wPowerPerpAmount,\n            oracle,\n            wPowerPerpPool,\n            wPowerPerp,\n            weth\n        );\n        uint256 feeAmount = ethEquivalentMinted.mul(cachedFeeRate).div(10000);\n\n        // if fee can be paid from deposited collateral, pay from _depositAmount\n        if (_depositAmount > feeAmount) {\n            depositAmountAfterFee = _depositAmount.sub(feeAmount);\n            // if not, adjust the vault to pay from the vault collateral\n        } else {\n            _vault.removeEthCollateral(feeAmount);\n            depositAmountAfterFee = _depositAmount;\n        }\n        //return the fee and deposit amount, which has only been reduced by a fee if it is paid out of the deposit amount\n        return (feeAmount, depositAmountAfterFee);\n    }\n\n    /**\n     * @notice write vault to storage\n     * @dev writes to vaults mapping\n     */\n    function _writeVault(uint256 _vaultId, VaultLib.Vault memory _vault) private {\n        vaults[_vaultId] = _vault;\n    }\n\n    /**\n     * @dev redeem a uni position token and get back wPowerPerp and eth\n     * @param _uniTokenId uniswap v3 position token id\n     * @return wethAmount amount of weth withdrawn from uniswap\n     * @return wPowerPerpAmount amount of wPowerPerp withdrawn from uniswap\n     */\n    function _redeemUniToken(uint256 _uniTokenId) internal returns (uint256, uint256) {\n        INonfungiblePositionManager positionManager = INonfungiblePositionManager(uniswapPositionManager);\n\n        (, , uint128 liquidity, , ) = VaultLib._getUniswapPositionInfo(uniswapPositionManager, _uniTokenId);\n\n        // prepare parameters to withdraw liquidity from uniswap v3 position manager\n        INonfungiblePositionManager.DecreaseLiquidityParams memory decreaseParams = INonfungiblePositionManager\n            .DecreaseLiquidityParams({\n                tokenId: _uniTokenId,\n                liquidity: liquidity,\n                amount0Min: 0,\n                amount1Min: 0,\n                deadline: block.timestamp\n            });\n\n        positionManager.decreaseLiquidity(decreaseParams);\n\n        // withdraw max amount of weth and wPowerPerp from uniswap\n        INonfungiblePositionManager.CollectParams memory collectParams = INonfungiblePositionManager.CollectParams({\n            tokenId: _uniTokenId,\n            recipient: address(this),\n            amount0Max: uint128(-1),\n            amount1Max: uint128(-1)\n        });\n\n        (uint256 collectedToken0, uint256 collectedToken1) = positionManager.collect(collectParams);\n\n        return isWethToken0 ? (collectedToken0, collectedToken1) : (collectedToken1, collectedToken0);\n    }\n\n    /**\n     * @notice update the normalization factor as a way to pay in-kind funding\n     * @dev the normalization factor scales amount of debt that must be repaid, effecting an interest rate paid between long and short positions\n     * @return new normalization factor\n     **/\n    function _applyFunding() internal returns (uint256) {\n        // only update the norm factor once per block\n        if (lastFundingUpdateTimestamp == block.timestamp) return normalizationFactor;\n\n        uint256 newNormalizationFactor = _getNewNormalizationFactor();\n\n        emit NormalizationFactorUpdated(\n            normalizationFactor,\n            newNormalizationFactor,\n            lastFundingUpdateTimestamp,\n            block.timestamp\n        );\n\n        // the following will be batch into 1 SSTORE because of type uint128\n        normalizationFactor = newNormalizationFactor.toUint128();\n        lastFundingUpdateTimestamp = block.timestamp.toUint128();\n\n        return newNormalizationFactor;\n    }\n\n    /**\n     * @dev calculate new normalization factor base on the current timestamp\n     * @return new normalization factor if funding happens in the current block\n     */\n    function _getNewNormalizationFactor() internal view returns (uint256) {\n        uint32 period = block.timestamp.sub(lastFundingUpdateTimestamp).toUint32();\n\n        if (period == 0) {\n            return normalizationFactor;\n        }\n\n        // make sure we use the same period for mark and index\n        uint32 periodForOracle = _getConsistentPeriodForOracle(period);\n\n        // avoid reading normalizationFactor from storage multiple times\n        uint256 cacheNormFactor = normalizationFactor;\n\n        uint256 mark = Power2Base._getDenormalizedMark(\n            periodForOracle,\n            oracle,\n            wPowerPerpPool,\n            ethQuoteCurrencyPool,\n            weth,\n            quoteCurrency,\n            wPowerPerp,\n            cacheNormFactor\n        );\n        uint256 index = Power2Base._getIndex(periodForOracle, oracle, ethQuoteCurrencyPool, weth, quoteCurrency);\n\n        //the fraction of the funding period. used to compound the funding rate\n        int128 rFunding = ABDKMath64x64.divu(period, FUNDING_PERIOD);\n\n        // floor mark to be at least LOWER_MARK_RATIO of index\n        uint256 lowerBound = index.mul(LOWER_MARK_RATIO).div(ONE);\n        if (mark < lowerBound) {\n            mark = lowerBound;\n        } else {\n            // cap mark to be at most UPPER_MARK_RATIO of index\n            uint256 upperBound = index.mul(UPPER_MARK_RATIO).div(ONE);\n            if (mark > upperBound) mark = upperBound;\n        }\n\n        // normFactor(new) = multiplier * normFactor(old)\n        // multiplier = (index/mark)^rFunding\n        // x^r = n^(log_n(x) * r)\n        // multiplier = 2^( log2(index/mark) * rFunding )\n\n        int128 base = ABDKMath64x64.divu(index, mark);\n        int128 logTerm = ABDKMath64x64.log_2(base).mul(rFunding);\n        int128 multiplier = logTerm.exp_2();\n        return multiplier.mulu(cacheNormFactor);\n    }\n\n    /**\n     * @notice check if vault has enough collateral and is not a dust vault\n     * @dev revert if vault has insufficient collateral or is a dust vault\n     * @param _vault the Vault memory to update\n     * @param _normalizationFactor normalization factor\n     */\n    function _checkVault(VaultLib.Vault memory _vault, uint256 _normalizationFactor) internal view {\n        (bool isSafe, bool isDust) = _getVaultStatus(_vault, _normalizationFactor);\n        require(isSafe, \"C24\");\n        require(!isDust, \"C22\");\n    }\n\n    /**\n     * @notice check that the vault has enough collateral\n     * @param _vault in-memory vault\n     * @param _normalizationFactor normalization factor\n     * @return true if the vault is properly collateralized\n     */\n    function _isVaultSafe(VaultLib.Vault memory _vault, uint256 _normalizationFactor) internal view returns (bool) {\n        (bool isSafe, ) = _getVaultStatus(_vault, _normalizationFactor);\n        return isSafe;\n    }\n\n    /**\n     * @notice return if the vault is properly collateralized and if it is a dust vault\n     * @param _vault the Vault memory to update\n     * @param _normalizationFactor normalization factor\n     * @return true if the vault is safe\n     * @return true if the vault is a dust vault\n     */\n    function _getVaultStatus(VaultLib.Vault memory _vault, uint256 _normalizationFactor)\n        internal\n        view\n        returns (bool, bool)\n    {\n        uint256 scaledEthPrice = Power2Base._getScaledTwap(\n            oracle,\n            ethQuoteCurrencyPool,\n            weth,\n            quoteCurrency,\n            TWAP_PERIOD,\n            true // do not call more than maximum period so it does not revert\n        );\n        return\n            VaultLib.getVaultStatus(\n                _vault,\n                uniswapPositionManager,\n                _normalizationFactor,\n                scaledEthPrice,\n                MIN_COLLATERAL,\n                IOracle(oracle).getTimeWeightedAverageTickSafe(wPowerPerpPool, TWAP_PERIOD),\n                isWethToken0\n            );\n    }\n\n    /**\n     * @notice get the expected excess, burnAmount and bounty if Uniswap position token got burned\n     * @dev this function will update the vault memory in-place\n     * @return burnAmount amount of wPowerPerp that should be burned\n     * @return wPowerPerpExcess amount of wPowerPerp that should be send to the vault owner\n     * @return bounty amount of bounty should be paid out to caller\n     */\n    function _getReduceDebtResultInVault(\n        VaultLib.Vault memory _vault,\n        uint256 nftEthAmount,\n        uint256 nftWPowerperpAmount,\n        bool _payBounty\n    )\n        internal\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        uint256 bounty;\n        if (_payBounty) bounty = _getReduceDebtBounty(nftEthAmount, nftWPowerperpAmount);\n\n        uint256 burnAmount = nftWPowerperpAmount;\n        uint256 wPowerPerpExcess;\n\n        if (nftWPowerperpAmount > _vault.shortAmount) {\n            wPowerPerpExcess = nftWPowerperpAmount.sub(_vault.shortAmount);\n            burnAmount = _vault.shortAmount;\n        }\n\n        _vault.removeShort(burnAmount);\n        _vault.removeUniNftCollateral();\n        _vault.addEthCollateral(nftEthAmount);\n        _vault.removeEthCollateral(bounty);\n\n        return (burnAmount, wPowerPerpExcess, bounty);\n    }\n\n    /**\n     * @notice get how much bounty you can get by helping a vault reducing the debt.\n     * @dev bounty is 2% of the total value of the position token\n     * @param _ethWithdrawn amount of eth withdrawn from uniswap by redeeming the position token\n     * @param _wPowerPerpReduced amount of wPowerPerp withdrawn from uniswap by redeeming the position token\n     */\n    function _getReduceDebtBounty(uint256 _ethWithdrawn, uint256 _wPowerPerpReduced) internal view returns (uint256) {\n        return\n            Power2Base\n                ._getDebtValueInEth(_wPowerPerpReduced, oracle, wPowerPerpPool, wPowerPerp, weth)\n                .add(_ethWithdrawn)\n                .mul(REDUCE_DEBT_BOUNTY)\n                .div(ONE);\n    }\n\n    /**\n     * @notice get the expected wPowerPerp needed to liquidate a vault.\n     * @dev a liquidator cannot liquidate more than half of a vault, unless only liquidating half of the debt will make the vault a \"dust vault\"\n     * @dev a liquidator cannot take out more collateral than the vault holds\n     * @param _maxWPowerPerpAmount the max amount of wPowerPerp willing to pay\n     * @param _vaultShortAmount the amount of short in the vault\n     * @param _maxWPowerPerpAmount the amount of collateral in the vault\n     * @return finalLiquidateAmount the amount that should be liquidated. This amount can be higher than _maxWPowerPerpAmount, which should be checked\n     * @return collateralToPay final amount of collateral paying out to the liquidator\n     */\n    function _getLiquidationResult(\n        uint256 _maxWPowerPerpAmount,\n        uint256 _vaultShortAmount,\n        uint256 _vaultCollateralAmount\n    ) internal view returns (uint256, uint256) {\n        // try limiting liquidation amount to half of the vault debt\n        (uint256 finalLiquidateAmount, uint256 collateralToPay) = _getSingleLiquidationAmount(\n            _maxWPowerPerpAmount,\n            _vaultShortAmount.div(2)\n        );\n\n        if (_vaultCollateralAmount > collateralToPay) {\n            if (_vaultCollateralAmount.sub(collateralToPay) < MIN_COLLATERAL) {\n                // the vault is left with dust after liquidation, allow liquidating full vault\n                // calculate the new liquidation amount and collateral again based on the new limit\n                (finalLiquidateAmount, collateralToPay) = _getSingleLiquidationAmount(\n                    _maxWPowerPerpAmount,\n                    _vaultShortAmount\n                );\n            }\n        }\n\n        // check if final collateral to pay is greater than vault amount.\n        // if so the system only pays out the amount the vault has, which may not be profitable\n        if (collateralToPay > _vaultCollateralAmount) {\n            // force liquidator to pay full debt amount\n            finalLiquidateAmount = _vaultShortAmount;\n            collateralToPay = _vaultCollateralAmount;\n        }\n\n        return (finalLiquidateAmount, collateralToPay);\n    }\n\n    /**\n     * @notice determine how much wPowerPerp to liquidate, and how much collateral to return\n     * @param _maxInputWAmount maximum wPowerPerp amount liquidator is willing to repay\n     * @param _maxLiquidatableWAmount maximum wPowerPerp amount a liquidator is allowed to repay\n     * @return finalWAmountToLiquidate amount of wPowerPerp the liquidator will burn\n     * @return collateralToPay total collateral the liquidator will get\n     */\n    function _getSingleLiquidationAmount(uint256 _maxInputWAmount, uint256 _maxLiquidatableWAmount)\n        internal\n        view\n        returns (uint256, uint256)\n    {\n        uint256 finalWAmountToLiquidate = _maxInputWAmount > _maxLiquidatableWAmount\n            ? _maxLiquidatableWAmount\n            : _maxInputWAmount;\n\n        uint256 collateralToPay = Power2Base._getDebtValueInEth(\n            finalWAmountToLiquidate,\n            oracle,\n            wPowerPerpPool,\n            wPowerPerp,\n            weth\n        );\n\n        // add 10% bonus for liquidators\n        collateralToPay = collateralToPay.add(collateralToPay.mul(LIQUIDATION_BOUNTY).div(ONE));\n\n        return (finalWAmountToLiquidate, collateralToPay);\n    }\n\n    /**\n     * @notice get a period can be used to request a twap for 2 uniswap v3 pools\n     * @dev if the period is greater than min(max_pool_1, max_pool_2), return min(max_pool_1, max_pool_2)\n     * @param _period max period that we intend to use\n     * @return fair period not greator than _period to be used for both pools.\n     */\n    function _getConsistentPeriodForOracle(uint32 _period) internal view returns (uint32) {\n        uint32 maxPeriodPool1 = IOracle(oracle).getMaxPeriod(ethQuoteCurrencyPool);\n        uint32 maxPeriodPool2 = IOracle(oracle).getMaxPeriod(wPowerPerpPool);\n\n        uint32 maxSafePeriod = maxPeriodPool1 > maxPeriodPool2 ? maxPeriodPool2 : maxPeriodPool1;\n        return _period > maxSafePeriod ? maxSafePeriod : _period;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol';\n\nimport './IPoolInitializer.sol';\nimport './IERC721Permit.sol';\nimport './IPeripheryPayments.sol';\nimport './IPeripheryImmutableState.sol';\nimport '../libraries/PoolAddress.sol';\n\n/// @title Non-fungible token for positions\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n/// and authorized.\ninterface INonfungiblePositionManager is\n    IPoolInitializer,\n    IPeripheryPayments,\n    IPeripheryImmutableState,\n    IERC721Metadata,\n    IERC721Enumerable,\n    IERC721Permit\n{\n    /// @notice Emitted when liquidity is increased for a position NFT\n    /// @dev Also emitted when a token is minted\n    /// @param tokenId The ID of the token for which liquidity was increased\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when liquidity is decreased for a position NFT\n    /// @param tokenId The ID of the token for which liquidity was decreased\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when tokens are collected for a position NFT\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n    /// @param tokenId The ID of the token for which underlying tokens were collected\n    /// @param recipient The address of the account that received the collected tokens\n    /// @param amount0 The amount of token0 owed to the position that was collected\n    /// @param amount1 The amount of token1 owed to the position that was collected\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\n\n    /// @notice Returns the position information associated with a given token ID.\n    /// @dev Throws if the token ID is not valid.\n    /// @param tokenId The ID of the token that represents the position\n    /// @return nonce The nonce for permits\n    /// @return operator The address that is approved for spending\n    /// @return token0 The address of the token0 for a specific pool\n    /// @return token1 The address of the token1 for a specific pool\n    /// @return fee The fee associated with the pool\n    /// @return tickLower The lower end of the tick range for the position\n    /// @return tickUpper The higher end of the tick range for the position\n    /// @return liquidity The liquidity of the position\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    /// @notice Creates a new position wrapped in a NFT\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n    /// @return tokenId The ID of the token that represents the minted position\n    /// @return liquidity The amount of liquidity for this position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\n    /// amount0Desired The desired amount of token0 to be spent,\n    /// amount1Desired The desired amount of token1 to be spent,\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return liquidity The new liquidity amount as a result of the increase\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\n    /// amount The amount by which liquidity will be decreased,\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\n    /// recipient The account that should receive the tokens,\n    /// amount0Max The maximum amount of token0 to collect,\n    /// amount1Max The maximum amount of token1 to collect\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n    /// must be collected first.\n    /// @param tokenId The ID of the token that is being burned\n    function burn(uint256 tokenId) external payable;\n}\n"
    },
    "contracts/interfaces/IWETH9.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.7.6;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWETH9 is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n}\n"
    },
    "contracts/interfaces/IWPowerPerp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.7.6;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWPowerPerp is IERC20 {\n    function mint(address _account, uint256 _amount) external;\n\n    function burn(address _account, uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/IShortPowerPerp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.7.6;\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IShortPowerPerp is IERC721 {\n    function nextId() external view returns (uint256);\n\n    function mintNFT(address recipient) external returns (uint256 _newId);\n}\n"
    },
    "contracts/interfaces/IOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.7.6;\n\ninterface IOracle {\n    function getHistoricalTwap(\n        address _pool,\n        address _base,\n        address _quote,\n        uint32 _period,\n        uint32 _periodToHistoricPrice\n    ) external view returns (uint256);\n\n    function getTwap(\n        address _pool,\n        address _base,\n        address _quote,\n        uint32 _period,\n        bool _checkPeriod\n    ) external view returns (uint256);\n\n    function getMaxPeriod(address _pool) external view returns (uint32);\n\n    function getTimeWeightedAverageTickSafe(address _pool, uint32 _period)\n        external\n        view\n        returns (int24 timeWeightedAverageTick);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/libs/ABDKMath64x64.sol": {
      "content": "// SPDX-License-Identifier: BSD-4-Clause\n/*\n * ABDK Math 64.64 Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\n * Copyright (c) 2019, ABDK Consulting\n *\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * All advertising materials mentioning features or use of this software must display the following acknowledgement: This product includes software developed by ABDK Consulting.\n * Neither the name of ABDK Consulting nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * THIS SOFTWARE IS PROVIDED BY ABDK CONSULTING ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL ABDK CONSULTING BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npragma solidity ^0.7.0;\n\n/**\n * Smart contract library of mathematical functions operating with signed\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\n * basically a simple fraction whose numerator is signed 128-bit integer and\n * denominator is 2^64.  As long as denominator is always the same, there is no\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\n * represented by int128 type holding only the numerator.\n *\n * Commit used - 16d7e1dd8628dfa2f88d5dadab731df7ada70bdd\n * Copied from - https://github.com/abdk-consulting/abdk-libraries-solidity/tree/v2.4\n * Changes - some function visibility switched to public, solidity version set to 0.7.x\n * Changes (cont) - revert strings added\n * solidity version set to ^0.7.0\n */\nlibrary ABDKMath64x64 {\n    /*\n     * Minimum value signed 64.64-bit fixed point number may have.\n     * Minimum value signed 64.64-bit fixed point number may have.\n     * Minimum value signed 64.64-bit fixed point number may have.\n     * -2^127\n     */\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\n\n    /*\n     * Maximum value signed 64.64-bit fixed point number may have.\n     * Maximum value signed 64.64-bit fixed point number may have.\n     * Maximum value signed 64.64-bit fixed point number may have.\n     * 2^127-1\n     */\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    /**\n     * Calculate x * y rounding down.  Revert on overflow.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @param y signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function mul(int128 x, int128 y) internal pure returns (int128) {\n        int256 result = (int256(x) * y) >> 64;\n        require(result >= MIN_64x64 && result <= MAX_64x64, \"MUL-OVUF\");\n        return int128(result);\n    }\n\n    /**\n     * Calculate x * y rounding down, where x is signed 64.64 fixed point number\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\n     *\n     * @param x signed 64.64 fixed point number\n     * @param y unsigned 256-bit integer number\n     * @return unsigned 256-bit integer number\n     */\n    function mulu(int128 x, uint256 y) internal pure returns (uint256) {\n        if (y == 0) return 0;\n\n        require(x >= 0, \"MULU-X0\");\n\n        uint256 lo = (uint256(x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\n        uint256 hi = uint256(x) * (y >> 128);\n\n        require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, \"MULU-OF1\");\n        hi <<= 64;\n\n        require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo, \"MULU-OF2\");\n        return hi + lo;\n    }\n\n    /**\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\n     * integer numbers.  Revert on overflow or when y is zero.\n     *\n     * @param x unsigned 256-bit integer number\n     * @param y unsigned 256-bit integer number\n     * @return signed 64.64-bit fixed point number\n     */\n    function divu(uint256 x, uint256 y) public pure returns (int128) {\n        require(y != 0, \"DIVU-INF\");\n        uint128 result = divuu(x, y);\n        require(result <= uint128(MAX_64x64), \"DIVU-OF\");\n        return int128(result);\n    }\n\n    /**\n     * Calculate binary logarithm of x.  Revert if x <= 0.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function log_2(int128 x) public pure returns (int128) {\n        require(x > 0, \"LOG_2-X0\");\n\n        int256 msb = 0;\n        int256 xc = x;\n        if (xc >= 0x10000000000000000) {\n            xc >>= 64;\n            msb += 64;\n        }\n        if (xc >= 0x100000000) {\n            xc >>= 32;\n            msb += 32;\n        }\n        if (xc >= 0x10000) {\n            xc >>= 16;\n            msb += 16;\n        }\n        if (xc >= 0x100) {\n            xc >>= 8;\n            msb += 8;\n        }\n        if (xc >= 0x10) {\n            xc >>= 4;\n            msb += 4;\n        }\n        if (xc >= 0x4) {\n            xc >>= 2;\n            msb += 2;\n        }\n        if (xc >= 0x2) msb += 1; // No need to shift xc anymore\n\n        int256 result = (msb - 64) << 64;\n        uint256 ux = uint256(x) << uint256(127 - msb);\n        for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\n            ux *= ux;\n            uint256 b = ux >> 255;\n            ux >>= 127 + b;\n            result += bit * int256(b);\n        }\n\n        return int128(result);\n    }\n\n    /**\n     * Calculate binary exponent of x.  Revert on overflow.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function exp_2(int128 x) public pure returns (int128) {\n        require(x < 0x400000000000000000, \"EXP_2-OF\"); // Overflow\n\n        if (x < -0x400000000000000000) return 0; // Underflow\n\n        uint256 result = 0x80000000000000000000000000000000;\n\n        if (x & 0x8000000000000000 > 0) result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\n        if (x & 0x4000000000000000 > 0) result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\n        if (x & 0x2000000000000000 > 0) result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\n        if (x & 0x1000000000000000 > 0) result = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\n        if (x & 0x800000000000000 > 0) result = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\n        if (x & 0x400000000000000 > 0) result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\n        if (x & 0x200000000000000 > 0) result = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\n        if (x & 0x100000000000000 > 0) result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\n        if (x & 0x80000000000000 > 0) result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\n        if (x & 0x40000000000000 > 0) result = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\n        if (x & 0x20000000000000 > 0) result = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\n        if (x & 0x10000000000000 > 0) result = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\n        if (x & 0x8000000000000 > 0) result = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\n        if (x & 0x4000000000000 > 0) result = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\n        if (x & 0x2000000000000 > 0) result = (result * 0x1000162E525EE054754457D5995292026) >> 128;\n        if (x & 0x1000000000000 > 0) result = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\n        if (x & 0x800000000000 > 0) result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\n        if (x & 0x400000000000 > 0) result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\n        if (x & 0x200000000000 > 0) result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\n        if (x & 0x100000000000 > 0) result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\n        if (x & 0x80000000000 > 0) result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\n        if (x & 0x40000000000 > 0) result = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\n        if (x & 0x20000000000 > 0) result = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\n        if (x & 0x10000000000 > 0) result = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\n        if (x & 0x8000000000 > 0) result = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\n        if (x & 0x4000000000 > 0) result = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\n        if (x & 0x2000000000 > 0) result = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\n        if (x & 0x1000000000 > 0) result = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\n        if (x & 0x800000000 > 0) result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\n        if (x & 0x400000000 > 0) result = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\n        if (x & 0x200000000 > 0) result = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\n        if (x & 0x100000000 > 0) result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\n        if (x & 0x80000000 > 0) result = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\n        if (x & 0x40000000 > 0) result = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\n        if (x & 0x20000000 > 0) result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\n        if (x & 0x10000000 > 0) result = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\n        if (x & 0x8000000 > 0) result = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\n        if (x & 0x4000000 > 0) result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\n        if (x & 0x2000000 > 0) result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\n        if (x & 0x1000000 > 0) result = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\n        if (x & 0x800000 > 0) result = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\n        if (x & 0x400000 > 0) result = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;\n        if (x & 0x200000 > 0) result = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;\n        if (x & 0x100000 > 0) result = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;\n        if (x & 0x80000 > 0) result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\n        if (x & 0x40000 > 0) result = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\n        if (x & 0x20000 > 0) result = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;\n        if (x & 0x10000 > 0) result = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\n        if (x & 0x8000 > 0) result = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\n        if (x & 0x4000 > 0) result = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;\n        if (x & 0x2000 > 0) result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\n        if (x & 0x1000 > 0) result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\n        if (x & 0x800 > 0) result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\n        if (x & 0x400 > 0) result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\n        if (x & 0x200 > 0) result = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;\n        if (x & 0x100 > 0) result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\n        if (x & 0x80 > 0) result = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\n        if (x & 0x40 > 0) result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\n        if (x & 0x20 > 0) result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\n        if (x & 0x10 > 0) result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\n        if (x & 0x8 > 0) result = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\n        if (x & 0x4 > 0) result = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\n        if (x & 0x2 > 0) result = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;\n        if (x & 0x1 > 0) result = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;\n\n        result >>= uint256(63 - (x >> 64));\n        require(result <= uint256(MAX_64x64));\n\n        return int128(result);\n    }\n\n    /**\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\n     * integer numbers.  Revert on overflow or when y is zero.\n     *\n     * @param x unsigned 256-bit integer number\n     * @param y unsigned 256-bit integer number\n     * @return unsigned 64.64-bit fixed point number\n     */\n    function divuu(uint256 x, uint256 y) private pure returns (uint128) {\n        require(y != 0);\n\n        uint256 result;\n\n        if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) result = (x << 64) / y;\n        else {\n            uint256 msb = 192;\n            uint256 xc = x >> 192;\n            if (xc >= 0x100000000) {\n                xc >>= 32;\n                msb += 32;\n            }\n            if (xc >= 0x10000) {\n                xc >>= 16;\n                msb += 16;\n            }\n            if (xc >= 0x100) {\n                xc >>= 8;\n                msb += 8;\n            }\n            if (xc >= 0x10) {\n                xc >>= 4;\n                msb += 4;\n            }\n            if (xc >= 0x4) {\n                xc >>= 2;\n                msb += 2;\n            }\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\n\n            result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);\n            require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, \"DIVUU-OF1\");\n\n            uint256 hi = result * (y >> 128);\n            uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n\n            uint256 xh = x >> 192;\n            uint256 xl = x << 64;\n\n            if (xl < lo) xh -= 1;\n            xl -= lo; // We rely on overflow behavior here\n            lo = hi << 128;\n            if (xl < lo) xh -= 1;\n            xl -= lo; // We rely on overflow behavior here\n\n            assert(xh == hi >> 128);\n\n            result += xl / y;\n        }\n\n        require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, \"DIVUU-OF2\");\n        return uint128(result);\n    }\n}\n"
    },
    "contracts/libs/VaultLib.sol": {
      "content": "//SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity =0.7.6;\n\n//interface\nimport {INonfungiblePositionManager} from \"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\";\n\n//lib\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport {TickMathExternal} from \"./TickMathExternal.sol\";\nimport {SqrtPriceMathPartial} from \"./SqrtPriceMathPartial.sol\";\nimport {Uint256Casting} from \"./Uint256Casting.sol\";\n\n/**\n * Error code:\n * V1: Vault already had nft\n * V2: Vault has no NFT\n */\nlibrary VaultLib {\n    using SafeMath for uint256;\n    using Uint256Casting for uint256;\n\n    uint256 constant ONE_ONE = 1e36;\n\n    // the collateralization ratio (CR) is checked with the numerator and denominator separately\n    // a user is safe if - collateral value >= (COLLAT_RATIO_NUMER/COLLAT_RATIO_DENOM)* debt value\n    uint256 public constant CR_NUMERATOR = 3;\n    uint256 public constant CR_DENOMINATOR = 2;\n\n    struct Vault {\n        // the address that can update the vault\n        address operator;\n        // uniswap position token id deposited into the vault as collateral\n        // 2^32 is 4,294,967,296, which means the vault structure will work with up to 4 billion positions\n        uint32 NftCollateralId;\n        // amount of eth (wei) used in the vault as collateral\n        // 2^96 / 1e18 = 79,228,162,514, which means a vault can store up to 79 billion eth\n        // when we need to do calculations, we always cast this number to uint256 to avoid overflow\n        uint96 collateralAmount;\n        // amount of wPowerPerp minted from the vault\n        uint128 shortAmount;\n    }\n\n    /**\n     * @notice add eth collateral to a vault\n     * @param _vault in-memory vault\n     * @param _amount amount of eth to add\n     */\n    function addEthCollateral(Vault memory _vault, uint256 _amount) internal pure {\n        _vault.collateralAmount = uint256(_vault.collateralAmount).add(_amount).toUint96();\n    }\n\n    /**\n     * @notice add uniswap position token collateral to a vault\n     * @param _vault in-memory vault\n     * @param _tokenId uniswap position token id\n     */\n    function addUniNftCollateral(Vault memory _vault, uint256 _tokenId) internal pure {\n        require(_vault.NftCollateralId == 0, \"V1\");\n        require(_tokenId != 0, \"C23\");\n        _vault.NftCollateralId = _tokenId.toUint32();\n    }\n\n    /**\n     * @notice remove eth collateral from a vault\n     * @param _vault in-memory vault\n     * @param _amount amount of eth to remove\n     */\n    function removeEthCollateral(Vault memory _vault, uint256 _amount) internal pure {\n        _vault.collateralAmount = uint256(_vault.collateralAmount).sub(_amount).toUint96();\n    }\n\n    /**\n     * @notice remove uniswap position token collateral from a vault\n     * @param _vault in-memory vault\n     */\n    function removeUniNftCollateral(Vault memory _vault) internal pure {\n        require(_vault.NftCollateralId != 0, \"V2\");\n        _vault.NftCollateralId = 0;\n    }\n\n    /**\n     * @notice add debt to vault\n     * @param _vault in-memory vault\n     * @param _amount amount of debt to add\n     */\n    function addShort(Vault memory _vault, uint256 _amount) internal pure {\n        _vault.shortAmount = uint256(_vault.shortAmount).add(_amount).toUint128();\n    }\n\n    /**\n     * @notice remove debt from vault\n     * @param _vault in-memory vault\n     * @param _amount amount of debt to remove\n     */\n    function removeShort(Vault memory _vault, uint256 _amount) internal pure {\n        _vault.shortAmount = uint256(_vault.shortAmount).sub(_amount).toUint128();\n    }\n\n    /**\n     * @notice check if a vault is properly collateralized\n     * @param _vault the vault we want to check\n     * @param _positionManager address of the uniswap position manager\n     * @param _normalizationFactor current _normalizationFactor\n     * @param _ethQuoteCurrencyPrice current eth price scaled by 1e18\n     * @param _minCollateral minimum collateral that needs to be in a vault\n     * @param _wsqueethPoolTick current price tick for wsqueeth pool\n     * @param _isWethToken0 whether weth is token0 in the wsqueeth pool\n     * @return true if the vault is sufficiently collateralized\n     * @return true if the vault is considered as a dust vault\n     */\n    function getVaultStatus(\n        Vault memory _vault,\n        address _positionManager,\n        uint256 _normalizationFactor,\n        uint256 _ethQuoteCurrencyPrice,\n        uint256 _minCollateral,\n        int24 _wsqueethPoolTick,\n        bool _isWethToken0\n    ) internal view returns (bool, bool) {\n        if (_vault.shortAmount == 0) return (true, false);\n\n        uint256 debtValueInETH = uint256(_vault.shortAmount).mul(_normalizationFactor).mul(_ethQuoteCurrencyPrice).div(\n            ONE_ONE\n        );\n        uint256 totalCollateral = _getEffectiveCollateral(\n            _vault,\n            _positionManager,\n            _normalizationFactor,\n            _ethQuoteCurrencyPrice,\n            _wsqueethPoolTick,\n            _isWethToken0\n        );\n\n        bool isDust = totalCollateral < _minCollateral;\n        bool isAboveWater = totalCollateral.mul(CR_DENOMINATOR) >= debtValueInETH.mul(CR_NUMERATOR);\n        return (isAboveWater, isDust);\n    }\n\n    /**\n     * @notice get the total effective collateral of a vault, which is:\n     *         collateral amount + uniswap position token equivelent amount in eth\n     * @param _vault the vault we want to check\n     * @param _positionManager address of the uniswap position manager\n     * @param _normalizationFactor current _normalizationFactor\n     * @param _ethQuoteCurrencyPrice current eth price scaled by 1e18\n     * @param _wsqueethPoolTick current price tick for wsqueeth pool\n     * @param _isWethToken0 whether weth is token0 in the wsqueeth pool\n     * @return the total worth of collateral in the vault\n     */\n    function _getEffectiveCollateral(\n        Vault memory _vault,\n        address _positionManager,\n        uint256 _normalizationFactor,\n        uint256 _ethQuoteCurrencyPrice,\n        int24 _wsqueethPoolTick,\n        bool _isWethToken0\n    ) internal view returns (uint256) {\n        if (_vault.NftCollateralId == 0) return _vault.collateralAmount;\n\n        // the user has deposited uniswap position token as collateral, see how much eth / wSqueeth the uniswap position token has\n        (uint256 nftEthAmount, uint256 nftWsqueethAmount) = _getUniPositionBalances(\n            _positionManager,\n            _vault.NftCollateralId,\n            _wsqueethPoolTick,\n            _isWethToken0\n        );\n        // convert squeeth amount from uniswap position token as equivalent amount of collateral\n        uint256 wSqueethIndexValueInEth = nftWsqueethAmount.mul(_normalizationFactor).mul(_ethQuoteCurrencyPrice).div(\n            ONE_ONE\n        );\n        // add eth value from uniswap position token as collateral\n        return nftEthAmount.add(wSqueethIndexValueInEth).add(_vault.collateralAmount);\n    }\n\n    /**\n     * @notice determine how much eth / wPowerPerp the uniswap position contains\n     * @param _positionManager address of the uniswap position manager\n     * @param _tokenId uniswap position token id\n     * @param _wPowerPerpPoolTick current price tick\n     * @param _isWethToken0 whether weth is token0 in the pool\n     * @return ethAmount the eth amount this LP token contains\n     * @return wPowerPerpAmount the wPowerPerp amount this LP token contains\n     */\n    function _getUniPositionBalances(\n        address _positionManager,\n        uint256 _tokenId,\n        int24 _wPowerPerpPoolTick,\n        bool _isWethToken0\n    ) internal view returns (uint256 ethAmount, uint256 wPowerPerpAmount) {\n        (\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        ) = _getUniswapPositionInfo(_positionManager, _tokenId);\n        (uint256 amount0, uint256 amount1) = _getToken0Token1Balances(\n            tickLower,\n            tickUpper,\n            _wPowerPerpPoolTick,\n            liquidity\n        );\n\n        return\n            _isWethToken0\n                ? (amount0 + tokensOwed0, amount1 + tokensOwed1)\n                : (amount1 + tokensOwed1, amount0 + tokensOwed0);\n    }\n\n    /**\n     * @notice get uniswap position token info\n     * @param _positionManager address of the uniswap position position manager\n     * @param _tokenId uniswap position token id\n     * @return tickLower lower tick of the position\n     * @return tickUpper upper tick of the position\n     * @return liquidity raw liquidity amount of the position\n     * @return tokensOwed0 amount of token 0 can be collected as fee\n     * @return tokensOwed1 amount of token 1 can be collected as fee\n     */\n    function _getUniswapPositionInfo(address _positionManager, uint256 _tokenId)\n        internal\n        view\n        returns (\n            int24,\n            int24,\n            uint128,\n            uint128,\n            uint128\n        )\n    {\n        INonfungiblePositionManager positionManager = INonfungiblePositionManager(_positionManager);\n        (\n            ,\n            ,\n            ,\n            ,\n            ,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            ,\n            ,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        ) = positionManager.positions(_tokenId);\n        return (tickLower, tickUpper, liquidity, tokensOwed0, tokensOwed1);\n    }\n\n    /**\n     * @notice get balances of token0 / token1 in a uniswap position\n     * @dev knowing liquidity, tick range, and current tick gives balances\n     * @param _tickLower address of the uniswap position manager\n     * @param _tickUpper uniswap position token id\n     * @param _tick current price tick used for calculation\n     * @return amount0 the amount of token0 in the uniswap position token\n     * @return amount1 the amount of token1 in the uniswap position token\n     */\n    function _getToken0Token1Balances(\n        int24 _tickLower,\n        int24 _tickUpper,\n        int24 _tick,\n        uint128 _liquidity\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\n        // get the current price and tick from wPowerPerp pool\n        uint160 sqrtPriceX96 = TickMathExternal.getSqrtRatioAtTick(_tick);\n\n        if (_tick < _tickLower) {\n            amount0 = SqrtPriceMathPartial.getAmount0Delta(\n                TickMathExternal.getSqrtRatioAtTick(_tickLower),\n                TickMathExternal.getSqrtRatioAtTick(_tickUpper),\n                _liquidity,\n                true\n            );\n        } else if (_tick < _tickUpper) {\n            amount0 = SqrtPriceMathPartial.getAmount0Delta(\n                sqrtPriceX96,\n                TickMathExternal.getSqrtRatioAtTick(_tickUpper),\n                _liquidity,\n                true\n            );\n            amount1 = SqrtPriceMathPartial.getAmount1Delta(\n                TickMathExternal.getSqrtRatioAtTick(_tickLower),\n                sqrtPriceX96,\n                _liquidity,\n                true\n            );\n        } else {\n            amount1 = SqrtPriceMathPartial.getAmount1Delta(\n                TickMathExternal.getSqrtRatioAtTick(_tickLower),\n                TickMathExternal.getSqrtRatioAtTick(_tickUpper),\n                _liquidity,\n                true\n            );\n        }\n    }\n}\n"
    },
    "contracts/libs/Uint256Casting.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity =0.7.6;\n\nlibrary Uint256Casting {\n    /**\n     * @notice cast a uint256 to a uint128, revert on overflow\n     * @param y the uint256 to be downcasted\n     * @return z the downcasted integer, now type uint128\n     */\n    function toUint128(uint256 y) internal pure returns (uint128 z) {\n        require((z = uint128(y)) == y, \"OF128\");\n    }\n\n    /**\n     * @notice cast a uint256 to a uint96, revert on overflow\n     * @param y the uint256 to be downcasted\n     * @return z the downcasted integer, now type uint96\n     */\n    function toUint96(uint256 y) internal pure returns (uint96 z) {\n        require((z = uint96(y)) == y, \"OF96\");\n    }\n\n    /**\n     * @notice cast a uint256 to a uint32, revert on overflow\n     * @param y the uint256 to be downcasted\n     * @return z the downcasted integer, now type uint32\n     */\n    function toUint32(uint256 y) internal pure returns (uint32 z) {\n        require((z = uint32(y)) == y, \"OF32\");\n    }\n}\n"
    },
    "contracts/libs/Power2Base.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity =0.7.6;\n\n//interface\nimport {IOracle} from \"../interfaces/IOracle.sol\";\n\n//lib\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nlibrary Power2Base {\n    using SafeMath for uint256;\n\n    uint32 private constant TWAP_PERIOD = 420 seconds;\n    uint256 private constant INDEX_SCALE = 1e4;\n    uint256 private constant ONE = 1e18;\n    uint256 private constant ONE_ONE = 1e36;\n\n    /**\n     * @notice return the scaled down index of the power perp in USD, scaled by 18 decimals\n     * @param _period period of time for the twap in seconds (cannot be longer than maximum period for the pool)\n     * @param _oracle oracle address\n     * @param _ethQuoteCurrencyPool uniswap v3 pool for weth / quoteCurrency\n     * @param _weth weth address\n     * @param _quoteCurrency quoteCurrency address\n     * @return for squeeth, return ethPrice^2\n     */\n    function _getIndex(\n        uint32 _period,\n        address _oracle,\n        address _ethQuoteCurrencyPool,\n        address _weth,\n        address _quoteCurrency\n    ) internal view returns (uint256) {\n        uint256 ethQuoteCurrencyPrice = _getScaledTwap(\n            _oracle,\n            _ethQuoteCurrencyPool,\n            _weth,\n            _quoteCurrency,\n            _period,\n            false\n        );\n        return ethQuoteCurrencyPrice.mul(ethQuoteCurrencyPrice).div(ONE);\n    }\n\n    /**\n     * @notice return the unscaled index of the power perp in USD, scaled by 18 decimals\n     * @param _period period of time for the twap in seconds (cannot be longer than maximum period for the pool)\n     * @param _oracle oracle address\n     * @param _ethQuoteCurrencyPool uniswap v3 pool for weth / quoteCurrency\n     * @param _weth weth address\n     * @param _quoteCurrency quoteCurrency address\n     * @return for squeeth, return ethPrice^2\n     */\n    function _getUnscaledIndex(\n        uint32 _period,\n        address _oracle,\n        address _ethQuoteCurrencyPool,\n        address _weth,\n        address _quoteCurrency\n    ) internal view returns (uint256) {\n        uint256 ethQuoteCurrencyPrice = _getTwap(_oracle, _ethQuoteCurrencyPool, _weth, _quoteCurrency, _period, false);\n        return ethQuoteCurrencyPrice.mul(ethQuoteCurrencyPrice).div(ONE);\n    }\n\n    /**\n     * @notice return the mark price of power perp in quoteCurrency, scaled by 18 decimals\n     * @param _period period of time for the twap in seconds (cannot be longer than maximum period for the pool)\n     * @param _oracle oracle address\n     * @param _wSqueethEthPool uniswap v3 pool for wSqueeth / weth\n     * @param _ethQuoteCurrencyPool uniswap v3 pool for weth / quoteCurrency\n     * @param _weth weth address\n     * @param _quoteCurrency quoteCurrency address\n     * @param _wSqueeth wSqueeth address\n     * @param _normalizationFactor current normalization factor\n     * @return for squeeth, return ethPrice * squeethPriceInEth\n     */\n    function _getDenormalizedMark(\n        uint32 _period,\n        address _oracle,\n        address _wSqueethEthPool,\n        address _ethQuoteCurrencyPool,\n        address _weth,\n        address _quoteCurrency,\n        address _wSqueeth,\n        uint256 _normalizationFactor\n    ) internal view returns (uint256) {\n        uint256 ethQuoteCurrencyPrice = _getScaledTwap(\n            _oracle,\n            _ethQuoteCurrencyPool,\n            _weth,\n            _quoteCurrency,\n            _period,\n            false\n        );\n        uint256 wsqueethEthPrice = _getTwap(_oracle, _wSqueethEthPool, _wSqueeth, _weth, _period, false);\n\n        return wsqueethEthPrice.mul(ethQuoteCurrencyPrice).div(_normalizationFactor);\n    }\n\n    /**\n     * @notice get the fair collateral value for a _debtAmount of wSqueeth\n     * @dev the actual amount liquidator can get should have a 10% bonus on top of this value.\n     * @param _debtAmount wSqueeth amount paid by liquidator\n     * @param _oracle oracle address\n     * @param _wSqueethEthPool uniswap v3 pool for wSqueeth / weth\n     * @param _wSqueeth wSqueeth address\n     * @param _weth weth address\n     * @return returns value of debt in ETH\n     */\n    function _getDebtValueInEth(\n        uint256 _debtAmount,\n        address _oracle,\n        address _wSqueethEthPool,\n        address _wSqueeth,\n        address _weth\n    ) internal view returns (uint256) {\n        uint256 wSqueethPrice = _getTwap(_oracle, _wSqueethEthPool, _wSqueeth, _weth, TWAP_PERIOD, false);\n        return _debtAmount.mul(wSqueethPrice).div(ONE);\n    }\n\n    /**\n     * @notice request twap from our oracle, scaled down by INDEX_SCALE\n     * @param _oracle oracle address\n     * @param _pool uniswap v3 pool address\n     * @param _base base currency. to get eth/usd price, eth is base token\n     * @param _quote quote currency. to get eth/usd price, usd is the quote currency\n     * @param _period number of seconds in the past to start calculating time-weighted average.\n     * @param _checkPeriod check that period is not longer than maximum period for the pool to prevent reverts\n     * @return twap price scaled down by INDEX_SCALE\n     */\n    function _getScaledTwap(\n        address _oracle,\n        address _pool,\n        address _base,\n        address _quote,\n        uint32 _period,\n        bool _checkPeriod\n    ) internal view returns (uint256) {\n        uint256 twap = _getTwap(_oracle, _pool, _base, _quote, _period, _checkPeriod);\n        return twap.div(INDEX_SCALE);\n    }\n\n    /**\n     * @notice request twap from our oracle\n     * @dev this will revert if period is > max period for the pool\n     * @param _oracle oracle address\n     * @param _pool uniswap v3 pool address\n     * @param _base base currency. to get eth/quoteCurrency price, eth is base token\n     * @param _quote quote currency. to get eth/quoteCurrency price, quoteCurrency is the quote currency\n     * @param _period number of seconds in the past to start calculating time-weighted average\n     * @param _checkPeriod check that period is not longer than maximum period for the pool to prevent reverts\n     * @return human readable price. scaled by 1e18\n     */\n    function _getTwap(\n        address _oracle,\n        address _pool,\n        address _base,\n        address _quote,\n        uint32 _period,\n        bool _checkPeriod\n    ) internal view returns (uint256) {\n        // period reaching this point should be check, otherwise might revert\n        return IOracle(_oracle).getTwap(_pool, _base, _quote, _period, _checkPeriod);\n    }\n\n    /**\n     * @notice get the index value of wsqueeth in wei, used when system settles\n     * @dev the index of squeeth is ethPrice^2, so each squeeth will need to pay out {ethPrice} eth\n     * @param _wsqueethAmount amount of wsqueeth used in settlement\n     * @param _indexPriceForSettlement index price for settlement\n     * @param _normalizationFactor current normalization factor\n     * @return amount in wei that should be paid to the token holder\n     */\n    function _getLongSettlementValue(\n        uint256 _wsqueethAmount,\n        uint256 _indexPriceForSettlement,\n        uint256 _normalizationFactor\n    ) internal pure returns (uint256) {\n        return _wsqueethAmount.mul(_normalizationFactor).mul(_indexPriceForSettlement).div(ONE_ONE);\n    }\n}\n"
    },
    "@openzeppelin/contracts/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Creates and initializes V3 Pools\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n/// require the pool to exist.\ninterface IPoolInitializer {\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n    /// @param token0 The contract address of token0 of the pool\n    /// @param token1 The contract address of token1 of the pool\n    /// @param fee The fee amount of the v3 pool for the specified token pair\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\n    function createAndInitializePoolIfNecessary(\n        address token0,\n        address token1,\n        uint24 fee,\n        uint160 sqrtPriceX96\n    ) external payable returns (address pool);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\n/// @title ERC721 with permit\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\ninterface IERC721Permit is IERC721 {\n    /// @notice The permit typehash used in the permit signature\n    /// @return The typehash for the permit\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    /// @notice The domain separator used in the permit signature\n    /// @return The domain seperator used in encoding of permit signature\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /// @notice Approve of a specific token ID for spending by spender via signature\n    /// @param spender The account that is being approved\n    /// @param tokenId The ID of the token that is being approved for spending\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function permit(\n        address spender,\n        uint256 tokenId,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPayments {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\n    /// @param recipient The address receiving ETH\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\n\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n    /// that use ether for the input amount\n    function refundETH() external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    /// @param token The contract address of the token which will be transferred to `recipient`\n    /// @param amountMinimum The minimum amount of token required for a transfer\n    /// @param recipient The destination address of the token\n    function sweepToken(\n        address token,\n        uint256 amountMinimum,\n        address recipient\n    ) external payable;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of WETH9\n    function WETH9() external view returns (address);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary PoolAddress {\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\n\n    /// @notice The identifying key of the pool\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n    /// @param tokenA The first token of a pool, unsorted\n    /// @param tokenB The second token of a pool, unsorted\n    /// @param fee The fee level of the pool\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n    function getPoolKey(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal pure returns (PoolKey memory) {\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n    }\n\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\n    /// @param factory The Uniswap V3 factory contract address\n    /// @param key The PoolKey\n    /// @return pool The contract address of the V3 pool\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\n        require(key.token0 < key.token1);\n        pool = address(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex'ff',\n                        factory,\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\n                        POOL_INIT_CODE_HASH\n                    )\n                )\n            )\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/libs/TickMathExternal.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMathExternal {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) public pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint256(MAX_TICK), \"T\");\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) external pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, \"R\");\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
    },
    "contracts/libs/SqrtPriceMathPartial.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport \"@uniswap/v3-core/contracts/libraries/FullMath.sol\";\nimport \"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol\";\nimport \"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\";\n\n/// @title Functions based on Q64.96 sqrt price and liquidity\n/// @notice Exposes two functions from @uniswap/v3-core SqrtPriceMath\n/// that use square root of price as a Q64.96 and liquidity to compute deltas\nlibrary SqrtPriceMathPartial {\n    /// @notice Gets the amount0 delta between two prices\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up or down\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\n    function getAmount0Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity,\n        bool roundUp\n    ) external pure returns (uint256 amount0) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\n\n        require(sqrtRatioAX96 > 0);\n\n        return\n            roundUp\n                ? UnsafeMath.divRoundingUp(\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\n                    sqrtRatioAX96\n                )\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\n    }\n\n    /// @notice Gets the amount1 delta between two prices\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up, or down\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\n    function getAmount1Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity,\n        bool roundUp\n    ) external pure returns (uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return\n            roundUp\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = a * b\n        // Compute the product mod 2**256 and mod 2**256 - 1\n        // then use the Chinese Remainder Theorem to reconstruct\n        // the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            prod0 := mul(a, b)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2**256.\n        // Also prevents denominator == 0\n        require(denominator > prod1);\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0]\n        // Compute remainder using mulmod\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(a, b, denominator)\n        }\n        // Subtract 256 bit number from 512 bit number\n        assembly {\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator\n        // Compute largest power of two divisor of denominator.\n        // Always >= 1.\n        uint256 twos = -denominator & denominator;\n        // Divide denominator by power of two\n        assembly {\n            denominator := div(denominator, twos)\n        }\n\n        // Divide [prod1 prod0] by the factors of two\n        assembly {\n            prod0 := div(prod0, twos)\n        }\n        // Shift in bits from prod1 into prod0. For this we need\n        // to flip `twos` such that it is 2**256 / twos.\n        // If twos is zero, then it becomes one\n        assembly {\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n\n        // Invert denominator mod 2**256\n        // Now that denominator is an odd number, it has an inverse\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n        // Compute the inverse by starting with a seed that is correct\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\n        uint256 inv = (3 * denominator) ^ 2;\n        // Now use Newton-Raphson iteration to improve the precision.\n        // Thanks to Hensel's lifting lemma, this also works in modular\n        // arithmetic, doubling the correct bits in each step.\n        inv *= 2 - denominator * inv; // inverse mod 2**8\n        inv *= 2 - denominator * inv; // inverse mod 2**16\n        inv *= 2 - denominator * inv; // inverse mod 2**32\n        inv *= 2 - denominator * inv; // inverse mod 2**64\n        inv *= 2 - denominator * inv; // inverse mod 2**128\n        inv *= 2 - denominator * inv; // inverse mod 2**256\n\n        // Because the division is now exact we can divide by multiplying\n        // with the modular inverse of denominator. This will give us the\n        // correct result modulo 2**256. Since the precoditions guarantee\n        // that the outcome is less than 2**256, this is the final result.\n        // We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inv;\n        return result;\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n        if (mulmod(a, b, denominator) > 0) {\n            require(result < type(uint256).max);\n            result++;\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/UnsafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math functions that do not check inputs or outputs\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\nlibrary UnsafeMath {\n    /// @notice Returns ceil(x / y)\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\n    /// @param x The dividend\n    /// @param y The divisor\n    /// @return z The quotient, ceil(x / y)\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        assembly {\n            z := add(div(x, y), gt(mod(x, y), 0))\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/FixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
    },
    "contracts/test/LiquidationHelper.sol": {
      "content": "//SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport {IUniswapV3Pool} from \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\nimport {IController} from \"../interfaces/IController.sol\";\n\nimport {IWETH9} from \"../interfaces/IWETH9.sol\";\nimport {IWPowerPerp} from \"../interfaces/IWPowerPerp.sol\";\nimport {IShortPowerPerp} from \"../interfaces/IShortPowerPerp.sol\";\nimport {IOracle} from \"../interfaces/IOracle.sol\";\n\nimport {VaultLib} from \"../libs/VaultLib.sol\";\nimport {Uint256Casting} from \"../libs/Uint256Casting.sol\";\nimport {Power2Base} from \"../libs/Power2Base.sol\";\n\ncontract LiquidationHelper  {\n\n    using SafeMath for uint256;\n    using Uint256Casting for uint256;\n    using VaultLib for VaultLib.Vault;\n\n    // constatns\n    uint256 public constant MIN_COLLATERAL = 0.5 ether;\n    uint32 public constant TWAP_PERIOD = 420 seconds;\n\n    address immutable public controller;\n    address immutable public oracle;\n    address immutable public wPowerPerp;\n    address immutable public weth;\n    address immutable public quoteCurrency;\n    address immutable public ethQuoteCurrencyPool;\n    address immutable public wPowerPerpPool;\n    address immutable public uniswapPositionManager;\n\n    bool immutable isWethToken0;\n    \n    constructor(\n        address _controller,\n        address _oracle,\n        address _wPowerPerp,\n        address _weth,\n        address _quoteCurrency,\n        address _ethQuoteCurrencyPool,\n        address _wPowerPerpPool,\n        address _uniPositionManager\n    ) {\n        controller = _controller;\n        oracle = _oracle;\n        wPowerPerp = _wPowerPerp;\n        weth = _weth;\n        quoteCurrency = _quoteCurrency;\n        ethQuoteCurrencyPool = _ethQuoteCurrencyPool;\n        wPowerPerpPool = _wPowerPerpPool;\n        uniswapPositionManager = _uniPositionManager;\n        isWethToken0 = _weth < _wPowerPerp;\n    }\n    \n    /**\n     * @notice check the result of a call to liquidate\n     * @dev can be used before sending a transaction to determine if the vault is unsafe, if vault can be saved\n     * @dev the minimum wPowerPerp to repay, the maximum wPowerPerp to repay and the proceeds at max wPowerPerp to repay\n     * @param _vaultId vault to liquidate\n     * @return isUnsafe\n     * @return isLiquidatable after reducing debt\n     * @return max wPowerPerp to repay, this is only non-zero if saving a vault is not possible\n     * @return proceeds at max wPowerPerp to repay, if isLiquidatable after reducing debt is false, this is the bounty for saving a vault\n     */\n    function checkLiquidation(uint256 _vaultId)\n        external\n        view\n        returns (\n            bool,\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        uint256 _newNormalizationFactor = IController(controller).getExpectedNormalizationFactor();\n        return _checkLiquidation(_vaultId, _newNormalizationFactor);\n    }\n\n    /**\n     * @notice check that the vault has enough collateral\n     * @param _vault in-memory vault\n     * @param _normalizationFactor normalization factor\n     * @return true if the vault is properly collateralized\n     */\n    function _isVaultSafe(VaultLib.Vault memory _vault, uint256 _normalizationFactor) internal view returns (bool) {\n        (bool isSafe, ) = _getVaultStatus(_vault, _normalizationFactor);\n        return isSafe;\n    }\n\n    /**\n     * @notice return if the vault is properly collateralized and if it is a dust vault\n     * @param _vault the Vault memory to update\n     * @param _normalizationFactor normalization factor\n     * @return true if the vault is safe\n     * @return true if the vault is a dust vault\n     */\n    function _getVaultStatus(VaultLib.Vault memory _vault, uint256 _normalizationFactor)\n        internal\n        view\n        returns (bool, bool)\n    {\n        uint256 scaledEthPrice = Power2Base._getScaledTwap(\n            oracle,\n            ethQuoteCurrencyPool,\n            weth,\n            quoteCurrency,\n            TWAP_PERIOD,\n            true // do not call more than maximum period so it does not revert\n        );\n        return\n            VaultLib.getVaultStatus(\n                _vault,\n                uniswapPositionManager,\n                _normalizationFactor,\n                scaledEthPrice,\n                MIN_COLLATERAL,\n                IOracle(oracle).getTimeWeightedAverageTickSafe(wPowerPerpPool, TWAP_PERIOD),\n                isWethToken0\n            );\n    }\n\n    /**\n     * @notice check the result of a call to liquidate\n     * @dev can be used before sending a transaction to determine if the vault is unsafe, if vault can be saved\n     * @dev the minimum wPowerPerp to repay, the maximum wPowerPerp to repay and the proceeds at max wPowerPerp to repay\n     * @param _vaultId vault to liquidate\n     * @return isUnsafe\n     * @return isLiquidatable after reducing debt\n     * @return max wPowerPerp to repay, this is only non-zero if saving a vault is not possible\n     * @return proceeds at max wPowerPerp to repay, if isLiquidatable after reducing debt is false, this is the bounty for saving a vault\n     */\n    function _checkLiquidation(uint256 _vaultId, uint256 _normalizationFactor)\n        internal\n        view\n        returns (\n            bool,\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        VaultLib.Vault memory cachedVault = IController(controller).vaults(_vaultId);\n\n        if (_isVaultSafe(cachedVault, _normalizationFactor)) {\n            return (false, false, 0, 0);\n        }\n\n        // if there's a Uniswap Position token in the vault, stimulate reducing debt first\n        if (cachedVault.NftCollateralId != 0) {\n            // using current tick to check how much nft is worth\n            (, int24 spotTick, , , , , ) = IUniswapV3Pool(wPowerPerpPool).slot0();\n\n            // simulate vault state after removing nft\n            (uint256 nftEthAmount, uint256 nftWPowerperpAmount) = VaultLib._getUniPositionBalances(\n                uniswapPositionManager,\n                cachedVault.NftCollateralId,\n                spotTick,\n                isWethToken0\n            );\n\n            (, , uint256 bounty) = _getReduceDebtResultInVault(\n                cachedVault,\n                nftEthAmount,\n                nftWPowerperpAmount,\n                true\n            );\n\n            if (_isVaultSafe(cachedVault, _normalizationFactor)) {\n                return (true, false, 0, bounty);\n            }\n            //re-add bounty if not safe after reducing debt\n            cachedVault.addEthCollateral(bounty);\n        }\n\n        // assuming the max the liquidator is willing to pay full debt, this should give us the max one can liquidate\n        (uint256 wMaxAmountToLiquidate, uint256 collateralToPay) = _getLiquidationResult(\n            cachedVault.shortAmount,\n            cachedVault.shortAmount,\n            cachedVault.collateralAmount\n        );\n\n        return (true, true, wMaxAmountToLiquidate, collateralToPay);\n    }\n\n    /**\n     * @notice get the expected excess, burnAmount and bounty if Uniswap position token got burned\n     * @dev this function will update the vault memory in-place\n     * @return burnAmount amount of wSqueeth that should be burned\n     * @return wPowerPerpExcess amount of wSqueeth that should be send to the vault owner\n     * @return bounty amount of bounty should be paid out to caller\n     */\n    function _getReduceDebtResultInVault(\n        VaultLib.Vault memory _vault,\n        uint256 nftEthAmount,\n        uint256 nftWPowerperpAmount,\n        bool _payBounty\n    )\n        internal\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        uint256 bounty;\n        if (_payBounty) bounty = _getReduceDebtBounty(nftEthAmount, nftWPowerperpAmount);\n\n        uint256 burnAmount = nftWPowerperpAmount;\n        uint256 wPowerPerpExcess;\n\n        if (nftWPowerperpAmount > _vault.shortAmount) {\n            wPowerPerpExcess = nftWPowerperpAmount.sub(_vault.shortAmount);\n            burnAmount = _vault.shortAmount;\n        }\n\n        _vault.removeShort(burnAmount);\n        _vault.removeUniNftCollateral();\n        _vault.addEthCollateral(nftEthAmount);\n        _vault.removeEthCollateral(bounty);\n\n        return (burnAmount, wPowerPerpExcess, bounty);\n    }\n\n    /**\n     * @notice get how much bounty you can get by helping a vault reducing the debt.\n     * @dev bounty is 2% of the total value of the position token\n     * @param _ethWithdrawn amount of eth withdrawn from uniswap by redeeming the position token\n     * @param _wPowerPerpReduced amount of wPowerPerp withdrawn from uniswap by redeeming the position token\n     */\n    function _getReduceDebtBounty(\n        uint256 _ethWithdrawn,\n        uint256 _wPowerPerpReduced\n    ) internal view returns (uint256) {\n        return\n            Power2Base\n                ._getDebtValueInEth(\n                    _wPowerPerpReduced,\n                    oracle,\n                    wPowerPerpPool,\n                    wPowerPerp,\n                    weth\n                )\n                .add(_ethWithdrawn)\n                .mul(2)\n                .div(100);\n    }\n\n    /**\n     * @notice get the expected wPowerPerp needed to liquidate a vault.\n     * @dev a liquidator cannot liquidate more than half of a vault, unless only liquidating half of the debt will make the vault a \"dust vault\"\n     * @dev a liquidator cannot take out more collateral than the vault holds\n     * @param _maxWPowerPerpAmount the max amount of wPowerPerp willing to pay\n     * @param _vaultShortAmount the amount of short in the vault\n     * @param _maxWPowerPerpAmount the amount of collateral in the vault\n     * @return finalLiquidateAmount the amount that should be liquidated. This amount can be higher than _maxWPowerPerpAmount, which should be checked\n     * @return collateralToPay final amount of collateral paying out to the liquidator\n     */\n    function _getLiquidationResult(\n        uint256 _maxWPowerPerpAmount,\n        uint256 _vaultShortAmount,\n        uint256 _vaultCollateralAmount\n    ) internal view returns (uint256, uint256) {\n        // try limiting liquidation amount to half of the vault debt\n        (uint256 finalLiquidateAmount, uint256 collateralToPay) = _getSingleLiquidationAmount(\n            _maxWPowerPerpAmount,\n            _vaultShortAmount.div(2)\n        );\n\n        if (_vaultCollateralAmount > collateralToPay) {\n            if (_vaultCollateralAmount.sub(collateralToPay) < MIN_COLLATERAL) {\n                // the vault is left with dust after liquidation, allow liquidating full vault\n                // calculate the new liquidation amount and collateral again based on the new limit\n                (finalLiquidateAmount, collateralToPay) = _getSingleLiquidationAmount(\n                    _maxWPowerPerpAmount,\n                    _vaultShortAmount\n                );\n            }\n        }\n\n        // check if final collateral to pay is greater than vault amount.\n        // if so the system only pays out the amount the vault has, which may not be profitable\n        if (collateralToPay > _vaultCollateralAmount) {\n            // force liquidator to pay full debt amount\n            finalLiquidateAmount = _vaultShortAmount;\n            collateralToPay = _vaultCollateralAmount;\n        }\n\n        return (finalLiquidateAmount, collateralToPay);\n    }\n\n    /**\n     * @notice determine how much wPowerPerp to liquidate, and how much collateral to return\n     * @param _maxInputWAmount maximum wPowerPerp amount liquidator is willing to repay\n     * @param _maxLiquidatableWAmount maximum wPowerPerp amount a liquidator is allowed to repay\n     * @return finalWAmountToLiquidate amount of wPowerPerp the liquidator will burn\n     * @return collateralToPay total collateral the liquidator will get\n     */\n    function _getSingleLiquidationAmount(\n        uint256 _maxInputWAmount,\n        uint256 _maxLiquidatableWAmount\n    ) internal view returns (uint256, uint256) {\n        uint256 finalWAmountToLiquidate = _maxInputWAmount > _maxLiquidatableWAmount\n            ? _maxLiquidatableWAmount\n            : _maxInputWAmount;\n\n        uint256 collateralToPay = Power2Base._getDebtValueInEth(\n            finalWAmountToLiquidate,\n            oracle,\n            wPowerPerpPool,\n            wPowerPerp,\n            weth\n        );\n\n        // add 10% bonus for liquidators\n        collateralToPay = collateralToPay.add(collateralToPay.div(10));\n\n        return (finalWAmountToLiquidate, collateralToPay);\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "contracts/interfaces/IController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.7.6;\n\npragma abicoder v2;\n\nimport {VaultLib} from \"../libs/VaultLib.sol\";\n\ninterface IController {\n    function ethQuoteCurrencyPool() external view returns (address);\n\n    function feeRate() external view returns (uint256);\n\n    function getFee(\n        uint256 _vaultId,\n        uint256 _wPowerPerpAmount,\n        uint256 _collateralAmount\n    ) external view returns (uint256);\n\n    function quoteCurrency() external view returns (address);\n\n    function vaults(uint256 _vaultId) external view returns (VaultLib.Vault memory);\n\n    function shortPowerPerp() external view returns (address);\n\n    function wPowerPerp() external view returns (address);\n\n    function getExpectedNormalizationFactor() external view returns (uint256);\n\n    function mintPowerPerpAmount(\n        uint256 _vaultId,\n        uint256 _powerPerpAmount,\n        uint256 _uniTokenId\n    ) external payable returns (uint256 vaultId, uint256 wPowerPerpAmount);\n\n    function mintWPowerPerpAmount(\n        uint256 _vaultId,\n        uint256 _wPowerPerpAmount,\n        uint256 _uniTokenId\n    ) external payable returns (uint256 vaultId);\n\n    /**\n     * Deposit collateral into a vault\n     */\n    function deposit(uint256 _vaultId) external payable;\n\n    /**\n     * Withdraw collateral from a vault.\n     */\n    function withdraw(uint256 _vaultId, uint256 _amount) external payable;\n\n    function burnWPowerPerpAmount(\n        uint256 _vaultId,\n        uint256 _wPowerPerpAmount,\n        uint256 _withdrawAmount\n    ) external;\n\n    function burnOnPowerPerpAmount(\n        uint256 _vaultId,\n        uint256 _powerPerpAmount,\n        uint256 _withdrawAmount\n    ) external returns (uint256 wPowerPerpAmount);\n\n    function liquidate(uint256 _vaultId, uint256 _maxDebtAmount) external returns (uint256);\n\n    function updateOperator(uint256 _vaultId, address _operator) external;\n\n    /**\n     * External function to update the normalized factor as a way to pay funding.\n     */\n    function applyFunding() external;\n\n    function redeemShort(uint256 _vaultId) external;\n\n    function reduceDebtShutdown(uint256 _vaultId) external;\n\n    function isShutDown() external returns (bool);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "contracts/test/OracleTester.sol": {
      "content": "//SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity =0.7.6;\n\nimport {IOracle} from \"../interfaces/IOracle.sol\";\nimport {Oracle} from \"../core/Oracle.sol\";\nimport {Uint256Casting} from \"../libs/Uint256Casting.sol\";\n\n/**\n * use this contract to test how to get twap from exactly 1 timestamp\n * Since we can't access block.timestamp offchain before sending the tx\n */\ncontract OracleTester is Oracle{\n\n  using Uint256Casting for uint256;\n\n  IOracle oracle;\n\n  constructor(address _oracle) {\n    oracle = IOracle(_oracle);\n  }\n\n  function testGetTwapSince(\n    uint256 _sinceTimestamp, \n    address _pool, \n    address _base, \n    address _quote\n  ) view external returns (uint256) {\n    uint32 period = uint32(block.timestamp - _sinceTimestamp);\n    return oracle.getTwap(_pool, _base, _quote, period, false);\n  }\n\n  function testGetTwapSafeSince(\n    uint256 _sinceTimestamp, \n    address _pool, \n    address _base, \n    address _quote\n  ) view external returns (uint256) {\n    uint32 period = uint32(block.timestamp - _sinceTimestamp);\n    return oracle.getTwap(_pool, _base, _quote, period, true);\n  }\n\n  function testGetWeightedTickSafe(\n    uint256 _sinceTimestamp,\n    address _pool\n  ) view external returns (int24) {\n    uint32 period = uint32(block.timestamp - _sinceTimestamp);\n    return oracle.getTimeWeightedAverageTickSafe(_pool, period);\n  }\n\n  function testGetHistoricalTwapToNow(\n    uint256 _startTimestamp,\n    address _pool,\n    address _base,\n    address _quote\n  ) view external returns (uint256) {\n    uint32 secondsAgoToStartOfTwap = uint32(block.timestamp - _startTimestamp);  \n    uint32 secondsAgoToEndOfTwap=0;\n    \n    return oracle.getHistoricalTwap(_pool, _base, _quote, secondsAgoToStartOfTwap, secondsAgoToEndOfTwap);\n  }\n\n  function testGetHistoricalTwap(\n    uint256 _startTimestamp,\n    uint256 _endTimestamp,\n    address _pool,\n    address _base,\n    address _quote\n  ) view external returns (uint256) {\n    uint32 secondsAgoToStartOfTwap = uint32(block.timestamp - _startTimestamp);  \n    uint32 secondsAgoToEndOfTwap=uint32(block.timestamp - _endTimestamp); \n        \n    return oracle.getHistoricalTwap(_pool, _base, _quote, secondsAgoToStartOfTwap, secondsAgoToEndOfTwap);\n  }\n\n  function testToUint128(uint256 y) external pure returns (uint128 z) {\n      return y.toUint128();\n  }\n}"
    },
    "contracts/core/Oracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\n// uniswap Library only works under 0.7.6\npragma solidity =0.7.6;\n\n//interface\nimport {IUniswapV3Pool} from \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\nimport {IERC20Detailed} from \"../interfaces/IERC20Detailed.sol\";\n\n//library\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport {Uint256Casting} from \"../libs/Uint256Casting.sol\";\nimport {OracleLibrary} from \"../libs/OracleLibrary.sol\";\n\n/**\n * @notice read UniswapV3 pool TWAP prices, and convert to human readable term with (18 decimals)\n * @dev if ETH price is $3000, both ETH/USDC price and ETH/DAI price will be reported as 3000 * 1e18 by this oracle\n */\ncontract Oracle {\n    using SafeMath for uint256;\n    using Uint256Casting for uint256;\n\n    uint128 private constant ONE = 1e18;\n\n    /**\n     * @notice get twap converted with base & quote token decimals\n     * @dev if period is longer than the current timestamp - first timestamp stored in the pool, this will revert with \"OLD\"\n     * @param _pool uniswap pool address\n     * @param _base base currency. to get eth/usd price, eth is base token\n     * @param _quote quote currency. to get eth/usd price, usd is the quote currency\n     * @param _period number of seconds in the past to start calculating time-weighted average\n     * @return price of 1 base currency in quote currency. scaled by 1e18\n     */\n    function getTwap(\n        address _pool,\n        address _base,\n        address _quote,\n        uint32 _period,\n        bool _checkPeriod\n    ) external view returns (uint256) {\n        // if the period is already checked, request TWAP directly. Will revert if period is too long.\n        if (!_checkPeriod) return _fetchTwap(_pool, _base, _quote, _period);\n\n        // make sure the requested period < maxPeriod the pool recorded.\n        uint32 maxPeriod = _getMaxPeriod(_pool);\n        uint32 requestPeriod = _period > maxPeriod ? maxPeriod : _period;\n        return _fetchTwap(_pool, _base, _quote, requestPeriod);\n    }\n\n    /**\n     * @notice get twap for a specific period of time, converted with base & quote token decimals\n     * @dev if the _secondsAgoToStartOfTwap period is longer than the current timestamp - first timestamp stored in the pool, this will revert with \"OLD\"\n     * @param _pool uniswap pool address\n     * @param _base base currency. to get eth/usd price, eth is base token\n     * @param _quote quote currency. to get eth/usd price, usd is the quote currency\n     * @param _secondsAgoToStartOfTwap amount of seconds in the past to start calculating time-weighted average\n     * @param _secondsAgoToEndOfTwap amount of seconds in the past to end calculating time-weighted average\n     * @return price of 1 base currency in quote currency. scaled by 1e18\n     */\n    function getHistoricalTwap(\n        address _pool,\n        address _base,\n        address _quote,\n        uint32 _secondsAgoToStartOfTwap,\n        uint32 _secondsAgoToEndOfTwap\n    ) external view returns (uint256) {\n        return _fetchHistoricTwap(_pool, _base, _quote, _secondsAgoToStartOfTwap, _secondsAgoToEndOfTwap);\n    }\n\n    /**\n     * @notice get the max period that can be used to request twap\n     * @param _pool uniswap pool address\n     * @return max period can be used to request twap\n     */\n    function getMaxPeriod(address _pool) external view returns (uint32) {\n        return _getMaxPeriod(_pool);\n    }\n\n    /**\n     * @notice get time weighed average tick, not converted to price\n     * @dev this function will not revert\n     * @param _pool address of the pool\n     * @param _period period in second that we want to calculate average on\n     * @return timeWeightedAverageTick the time weighted average tick\n     */\n    function getTimeWeightedAverageTickSafe(address _pool, uint32 _period)\n        external\n        view\n        returns (int24 timeWeightedAverageTick)\n    {\n        uint32 maxPeriod = _getMaxPeriod(_pool);\n        uint32 requestPeriod = _period > maxPeriod ? maxPeriod : _period;\n        return OracleLibrary.consultAtHistoricTime(_pool, requestPeriod, 0);\n    }\n\n    /**\n     * @notice get twap converted with base & quote token decimals\n     * @dev if period is longer than the current timestamp - first timestamp stored in the pool, this will revert with \"OLD\"\n     * @param _pool uniswap pool address\n     * @param _base base currency. to get eth/usd price, eth is base token\n     * @param _quote quote currency. to get eth/usd price, usd is the quote currency\n     * @param _period number of seconds in the past to start calculating time-weighted average\n     * @return twap price which is scaled\n     */\n    function _fetchTwap(\n        address _pool,\n        address _base,\n        address _quote,\n        uint32 _period\n    ) internal view returns (uint256) {\n        uint256 quoteAmountOut = _fetchRawTwap(_pool, _base, _quote, _period);\n\n        uint8 baseDecimals = IERC20Detailed(_base).decimals();\n        uint8 quoteDecimals = IERC20Detailed(_quote).decimals();\n        if (baseDecimals == quoteDecimals) return quoteAmountOut;\n\n        // if quote token has less decimals, the returned quoteAmountOut will be lower, need to scale up by decimal difference\n        if (baseDecimals > quoteDecimals) return quoteAmountOut.mul(10**(baseDecimals - quoteDecimals));\n\n        // if quote token has more decimals, the returned quoteAmountOut will be higher, need to scale down by decimal difference\n        return quoteAmountOut.div(10**(quoteDecimals - baseDecimals));\n    }\n\n    /**\n     * @notice get raw twap from the uniswap pool\n     * @dev if period is longer than the current timestamp - first timestamp stored in the pool, this will revert with \"OLD\".\n     * @param _pool uniswap pool address\n     * @param _base base currency. to get eth/usd price, eth is base token\n     * @param _quote quote currency. to get eth/usd price, usd is the quote currency\n     * @param _period number of seconds in the past to start calculating time-weighted average\n     * @return amount of quote currency received for _amountIn of base currency\n     */\n    function _fetchRawTwap(\n        address _pool,\n        address _base,\n        address _quote,\n        uint32 _period\n    ) internal view returns (uint256) {\n        int24 twapTick = OracleLibrary.consultAtHistoricTime(_pool, _period, 0);\n        return OracleLibrary.getQuoteAtTick(twapTick, ONE, _base, _quote);\n    }\n\n    /**\n     * @notice get twap for a specific period of time, converted with base & quote token decimals\n     * @dev if the _secondsAgoToStartOfTwap period is longer than the current timestamp - first timestamp stored in the pool, this will revert with \"OLD\"\n     * @param _pool uniswap pool address\n     * @param _base base currency. to get eth/usd price, eth is base token\n     * @param _quote quote currency. to get eth/usd price, usd is the quote currency\n     * @param _secondsAgoToStartOfTwap amount of seconds in the past to start calculating time-weighted average\n     * @param _secondsAgoToEndOfTwap amount of seconds in the past to end calculating time-weighted average\n     * @return price of 1 base currency in quote currency. scaled by 1e18\n     */\n    function _fetchHistoricTwap(\n        address _pool,\n        address _base,\n        address _quote,\n        uint32 _secondsAgoToStartOfTwap,\n        uint32 _secondsAgoToEndOfTwap\n    ) internal view returns (uint256) {\n        int24 twapTick = OracleLibrary.consultAtHistoricTime(_pool, _secondsAgoToStartOfTwap, _secondsAgoToEndOfTwap);\n\n        return OracleLibrary.getQuoteAtTick(twapTick, ONE, _base, _quote);\n    }\n\n    /**\n     * @notice get the max period that can be used to request twap\n     * @param _pool uniswap pool address\n     * @return max period can be used to request twap\n     */\n    function _getMaxPeriod(address _pool) internal view returns (uint32) {\n        IUniswapV3Pool pool = IUniswapV3Pool(_pool);\n        // observationIndex: the index of the last oracle observation that was written\n        // cardinality: the current maximum number of observations stored in the pool\n        (, , uint16 observationIndex, uint16 cardinality, , , ) = pool.slot0();\n\n        // first observation index\n        // it's safe to use % without checking cardinality = 0 because cardinality is always >= 1\n        uint16 oldestObservationIndex = (observationIndex + 1) % cardinality;\n\n        (uint32 oldestObservationTimestamp, , , bool initialized) = pool.observations(oldestObservationIndex);\n\n        if (initialized) return uint32(block.timestamp) - oldestObservationTimestamp;\n\n        // (index + 1) % cardinality is not the oldest index,\n        // probably because cardinality is increased after last observation.\n        // in this case, observation at index 0 should be the oldest.\n        (oldestObservationTimestamp, , , ) = pool.observations(0);\n\n        return uint32(block.timestamp) - oldestObservationTimestamp;\n    }\n}\n"
    },
    "contracts/interfaces/IERC20Detailed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// uniswap Library only works under 0.7.6\npragma solidity =0.7.6;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IERC20Detailed is IERC20 {\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/libs/OracleLibrary.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity >=0.5.0 <0.8.0;\n\n//interface\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\n\n//lib\nimport \"@uniswap/v3-core/contracts/libraries/FullMath.sol\";\nimport \"@uniswap/v3-core/contracts/libraries/TickMath.sol\";\n\n/// @title oracle library\n/// @notice provides functions to integrate with uniswap v3 oracle\n/// @author uniswap team other than consultAtHistoricTime(), built by opyn\nlibrary OracleLibrary {\n    /// @notice fetches time-weighted average tick using uniswap v3 oracle\n    /// @dev written by opyn team\n    /// @param pool Address of uniswap v3 pool that we want to observe\n    /// @param _secondsAgoToStartOfTwap number of seconds to start of TWAP period\n    /// @param _secondsAgoToEndOfTwap number of seconds to end of TWAP period\n    /// @return timeWeightedAverageTick The time-weighted average tick from (block.timestamp - _secondsAgoToStartOfTwap) to _secondsAgoToEndOfTwap\n    function consultAtHistoricTime(\n        address pool,\n        uint32 _secondsAgoToStartOfTwap,\n        uint32 _secondsAgoToEndOfTwap\n    ) internal view returns (int24) {\n        require(_secondsAgoToStartOfTwap > _secondsAgoToEndOfTwap, \"BP\");\n        int24 timeWeightedAverageTick;\n        uint32[] memory secondAgos = new uint32[](2);\n\n        uint32 twapDuration = _secondsAgoToStartOfTwap - _secondsAgoToEndOfTwap;\n\n        // get TWAP from (now - _secondsAgoToStartOfTwap) -> (now - _secondsAgoToEndOfTwap)\n        secondAgos[0] = _secondsAgoToStartOfTwap;\n        secondAgos[1] = _secondsAgoToEndOfTwap;\n\n        (int56[] memory tickCumulatives, ) = IUniswapV3Pool(pool).observe(secondAgos);\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\n\n        timeWeightedAverageTick = int24(tickCumulativesDelta / (twapDuration));\n\n        // Always round to negative infinity\n        if (tickCumulativesDelta < 0 && (tickCumulativesDelta % (twapDuration) != 0)) timeWeightedAverageTick--;\n\n        return timeWeightedAverageTick;\n    }\n\n    /// @notice given a tick and a token amount, calculates the amount of token received in exchange\n    /// @param tick tick value used to calculate the quote\n    /// @param baseAmount amount of token to be converted\n    /// @param baseToken address of an ERC20 token contract used as the baseAmount denomination\n    /// @param quoteToken address of an ERC20 token contract used as the quoteAmount denomination\n    /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\n    function getQuoteAtTick(\n        int24 tick,\n        uint128 baseAmount,\n        address baseToken,\n        address quoteToken\n    ) internal pure returns (uint256 quoteAmount) {\n        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\n\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\n        if (sqrtRatioX96 <= type(uint128).max) {\n            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\n            quoteAmount = baseToken < quoteToken\n                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\n                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\n        } else {\n            uint256 ratioX128 = FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64);\n            quoteAmount = baseToken < quoteToken\n                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\n                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint256(MAX_TICK), 'T');\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/base/LiquidityManagement.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol';\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol';\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\n\nimport '../libraries/PoolAddress.sol';\nimport '../libraries/CallbackValidation.sol';\nimport '../libraries/LiquidityAmounts.sol';\n\nimport './PeripheryPayments.sol';\nimport './PeripheryImmutableState.sol';\n\n/// @title Liquidity management functions\n/// @notice Internal functions for safely managing liquidity in Uniswap V3\nabstract contract LiquidityManagement is IUniswapV3MintCallback, PeripheryImmutableState, PeripheryPayments {\n    struct MintCallbackData {\n        PoolAddress.PoolKey poolKey;\n        address payer;\n    }\n\n    /// @inheritdoc IUniswapV3MintCallback\n    function uniswapV3MintCallback(\n        uint256 amount0Owed,\n        uint256 amount1Owed,\n        bytes calldata data\n    ) external override {\n        MintCallbackData memory decoded = abi.decode(data, (MintCallbackData));\n        CallbackValidation.verifyCallback(factory, decoded.poolKey);\n\n        if (amount0Owed > 0) pay(decoded.poolKey.token0, decoded.payer, msg.sender, amount0Owed);\n        if (amount1Owed > 0) pay(decoded.poolKey.token1, decoded.payer, msg.sender, amount1Owed);\n    }\n\n    struct AddLiquidityParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        address recipient;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n    }\n\n    /// @notice Add liquidity to an initialized pool\n    function addLiquidity(AddLiquidityParams memory params)\n        internal\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1,\n            IUniswapV3Pool pool\n        )\n    {\n        PoolAddress.PoolKey memory poolKey =\n            PoolAddress.PoolKey({token0: params.token0, token1: params.token1, fee: params.fee});\n\n        pool = IUniswapV3Pool(PoolAddress.computeAddress(factory, poolKey));\n\n        // compute the liquidity amount\n        {\n            (uint160 sqrtPriceX96, , , , , , ) = pool.slot0();\n            uint160 sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(params.tickLower);\n            uint160 sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(params.tickUpper);\n\n            liquidity = LiquidityAmounts.getLiquidityForAmounts(\n                sqrtPriceX96,\n                sqrtRatioAX96,\n                sqrtRatioBX96,\n                params.amount0Desired,\n                params.amount1Desired\n            );\n        }\n\n        (amount0, amount1) = pool.mint(\n            params.recipient,\n            params.tickLower,\n            params.tickUpper,\n            liquidity,\n            abi.encode(MintCallbackData({poolKey: poolKey, payer: msg.sender}))\n        );\n\n        require(amount0 >= params.amount0Min && amount1 >= params.amount1Min, 'Price slippage check');\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#mint\n/// @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface\ninterface IUniswapV3MintCallback {\n    /// @notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\n    /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\n    /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\n    function uniswapV3MintCallback(\n        uint256 amount0Owed,\n        uint256 amount1Owed,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/CallbackValidation.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\nimport './PoolAddress.sol';\n\n/// @notice Provides validation for callbacks from Uniswap V3 Pools\nlibrary CallbackValidation {\n    /// @notice Returns the address of a valid Uniswap V3 Pool\n    /// @param factory The contract address of the Uniswap V3 factory\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The V3 pool contract address\n    function verifyCallback(\n        address factory,\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal view returns (IUniswapV3Pool pool) {\n        return verifyCallback(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee));\n    }\n\n    /// @notice Returns the address of a valid Uniswap V3 Pool\n    /// @param factory The contract address of the Uniswap V3 factory\n    /// @param poolKey The identifying key of the V3 pool\n    /// @return pool The V3 pool contract address\n    function verifyCallback(address factory, PoolAddress.PoolKey memory poolKey)\n        internal\n        view\n        returns (IUniswapV3Pool pool)\n    {\n        pool = IUniswapV3Pool(PoolAddress.computeAddress(factory, poolKey));\n        require(msg.sender == address(pool));\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\n\n/// @title Liquidity amount functions\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\nlibrary LiquidityAmounts {\n    /// @notice Downcasts uint256 to uint128\n    /// @param x The uint258 to be downcasted\n    /// @return y The passed value, downcasted to uint128\n    function toUint128(uint256 x) private pure returns (uint128 y) {\n        require((y = uint128(x)) == x);\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount0 The amount0 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount0(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount1 The amount1 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount1(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\n    }\n\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\n    /// pool prices and the prices at the tick boundaries\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount0 The amount of token0 being sent in\n    /// @param amount1 The amount of token1 being sent in\n    /// @return liquidity The maximum amount of liquidity received\n    function getLiquidityForAmounts(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\n\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\n        } else {\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\n        }\n    }\n\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount of token0\n    function getAmount0ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return\n            FullMath.mulDiv(\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\n                sqrtRatioBX96 - sqrtRatioAX96,\n                sqrtRatioBX96\n            ) / sqrtRatioAX96;\n    }\n\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount1 The amount of token1\n    function getAmount1ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n    }\n\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\n    /// pool prices and the prices at the tick boundaries\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function getAmountsForLiquidity(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\n        } else {\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        }\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/base/PeripheryPayments.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport '../interfaces/IPeripheryPayments.sol';\nimport '../interfaces/external/IWETH9.sol';\n\nimport '../libraries/TransferHelper.sol';\n\nimport './PeripheryImmutableState.sol';\n\nabstract contract PeripheryPayments is IPeripheryPayments, PeripheryImmutableState {\n    receive() external payable {\n        require(msg.sender == WETH9, 'Not WETH9');\n    }\n\n    /// @inheritdoc IPeripheryPayments\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable override {\n        uint256 balanceWETH9 = IWETH9(WETH9).balanceOf(address(this));\n        require(balanceWETH9 >= amountMinimum, 'Insufficient WETH9');\n\n        if (balanceWETH9 > 0) {\n            IWETH9(WETH9).withdraw(balanceWETH9);\n            TransferHelper.safeTransferETH(recipient, balanceWETH9);\n        }\n    }\n\n    /// @inheritdoc IPeripheryPayments\n    function sweepToken(\n        address token,\n        uint256 amountMinimum,\n        address recipient\n    ) external payable override {\n        uint256 balanceToken = IERC20(token).balanceOf(address(this));\n        require(balanceToken >= amountMinimum, 'Insufficient token');\n\n        if (balanceToken > 0) {\n            TransferHelper.safeTransfer(token, recipient, balanceToken);\n        }\n    }\n\n    /// @inheritdoc IPeripheryPayments\n    function refundETH() external payable override {\n        if (address(this).balance > 0) TransferHelper.safeTransferETH(msg.sender, address(this).balance);\n    }\n\n    /// @param token The token to pay\n    /// @param payer The entity that must pay\n    /// @param recipient The entity that will receive payment\n    /// @param value The amount to pay\n    function pay(\n        address token,\n        address payer,\n        address recipient,\n        uint256 value\n    ) internal {\n        if (token == WETH9 && address(this).balance >= value) {\n            // pay with WETH9\n            IWETH9(WETH9).deposit{value: value}(); // wrap only what is needed to pay\n            IWETH9(WETH9).transfer(recipient, value);\n        } else if (payer == address(this)) {\n            // pay with tokens already in the contract (for the exact input multihop case)\n            TransferHelper.safeTransfer(token, recipient, value);\n        } else {\n            // pull payment\n            TransferHelper.safeTransferFrom(token, payer, recipient, value);\n        }\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport '../interfaces/IPeripheryImmutableState.sol';\n\n/// @title Immutable state\n/// @notice Immutable state used by periphery contracts\nabstract contract PeripheryImmutableState is IPeripheryImmutableState {\n    /// @inheritdoc IPeripheryImmutableState\n    address public immutable override factory;\n    /// @inheritdoc IPeripheryImmutableState\n    address public immutable override WETH9;\n\n    constructor(address _factory, address _WETH9) {\n        factory = _factory;\n        WETH9 = _WETH9;\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\n/// @title Interface for WETH9\ninterface IWETH9 is IERC20 {\n    /// @notice Deposit ether to get wrapped ether\n    function deposit() external payable;\n\n    /// @notice Withdraw wrapped ether to get ether\n    function withdraw(uint256) external;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"
    },
    "contracts/mocks/MockUniPositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport {ERC721} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {INonfungiblePositionManager} from \"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\";\n\ncontract MockUniPositionManager is ERC721 {\n    int24 public tickLower;\n    int24 public tickUpper;\n    uint128 public liquidity;\n    address public token0;\n    address public token1;\n\n    uint256 token0ToCollect;\n    uint256 token1ToCollect;\n\n    constructor() ERC721(\"Uniswap Position\", \"UNIP\") {}\n\n    function mint(address account, uint256 tokenId) external {\n        _mint(account, tokenId);\n    }\n\n    function setMockedProperties(\n        address _token0,\n        address _token1,\n        int24 _tickLower,\n        int24 _tickUpper,\n        uint128 _liquidity\n    ) external {\n        token0 = _token0;\n        token1 = _token1;\n        tickLower = _tickLower;\n        tickUpper = _tickUpper;\n        liquidity = _liquidity;\n    }\n\n    function positions(uint256)\n        public\n        view\n        returns (\n            uint96, //nonce,\n            address, //operator,\n            address, //token0,\n            address, //token1,\n            uint24, // fee,\n            int24, // tickLower,\n            int24, // tickUpper,\n            uint128, // liquidity,\n            uint256, //feeGrowthInside0LastX128,\n            uint256, //feeGrowthInside1LastX128,\n            uint128, //tokensOwed0,\n            uint128 //tokensOwed1\n        )\n    {\n        // return 0 for everything\n        return (\n            0, //nonce,\n            address(0), //operator,\n            token0, //token0,\n            token1, //token1,\n            3000, // fee,\n            tickLower, // tickLower,\n            tickUpper, // tickUpper,\n            liquidity, // liquidity,\n            0, //feeGrowthInside0LastX128,\n            0, //feeGrowthInside1LastX128,\n            0, //tokensOwed0,\n            0 //tokensOwed1\n        );\n    }\n\n    function setAmount0Amount1ToDecrease(uint256 amount0, uint256 amount1) external {\n        token0ToCollect = amount0;\n        token1ToCollect = amount1;\n    }\n\n    // SPDX-License-Identifier: GPL-2.0-or-later\n    function decreaseLiquidity(\n        INonfungiblePositionManager.DecreaseLiquidityParams memory /*params*/\n    ) external view returns (uint256, uint256) {\n        return (token0ToCollect, token1ToCollect);\n    }\n\n    function collect(INonfungiblePositionManager.CollectParams memory params) external returns (uint256, uint256) {\n        uint256 cachedAmount0 = token0ToCollect;\n        uint256 cachedAmount1 = token1ToCollect;\n        uint256 token0Amount = cachedAmount0 > params.amount0Max ? params.amount0Max : cachedAmount0;\n        uint256 token1Amount = cachedAmount1 > params.amount1Max ? params.amount1Max : cachedAmount1;\n        IERC20(token0).transfer(params.recipient, token0Amount);\n        IERC20(token1).transfer(params.recipient, token1Amount);\n        token0ToCollect = 0;\n        token1ToCollect = 0;\n        return (token0Amount, token1Amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC721.sol\";\nimport \"./IERC721Metadata.sol\";\nimport \"./IERC721Enumerable.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"../../introspection/ERC165.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/EnumerableSet.sol\";\nimport \"../../utils/EnumerableMap.sol\";\nimport \"../../utils/Strings.sol\";\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\n    using SafeMath for uint256;\n    using Address for address;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\n    using Strings for uint256;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from holder address to their (enumerable) set of owned tokens\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\n\n    // Enumerable mapping from token ids to their owners\n    EnumerableMap.UintToAddressMap private _tokenOwners;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Optional mapping for token URIs\n    mapping (uint256 => string) private _tokenURIs;\n\n    // Base URI\n    string private _baseURI;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    /*\n     *     bytes4(keccak256('name()')) == 0x06fdde03\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n     *\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n\n    /*\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n     *\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _holderTokens[owner].length();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\n        return string(abi.encodePacked(base, tokenId.toString()));\n    }\n\n    /**\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\n    * to the token ID if no specific URI is set for that token ID.\n    */\n    function baseURI() public view virtual returns (string memory) {\n        return _baseURI;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        return _holderTokens[owner].at(index);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\n        return _tokenOwners.length();\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        (uint256 tokenId, ) = _tokenOwners.at(index);\n        return tokenId;\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _tokenOwners.contains(tokenId);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     d*\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId); // internal owner\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n\n        _holderTokens[owner].remove(tokenId);\n\n        _tokenOwners.remove(tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\"); // internal owner\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _holderTokens[from].remove(tokenId);\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Internal function to set the base URI for all token IDs. It is\n     * automatically added as a prefix to the value returned in {tokenURI},\n     * or to the token ID if {tokenURI} is empty.\n     */\n    function _setBaseURI(string memory baseURI_) internal virtual {\n        _baseURI = baseURI_;\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        private returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\n            IERC721Receiver(to).onERC721Received.selector,\n            _msgSender(),\n            from,\n            tokenId,\n            _data\n        ), \"ERC721: transfer to non ERC721Receiver implementer\");\n        bytes4 retval = abi.decode(returndata, (bytes4));\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\n * supported.\n */\nlibrary EnumerableMap {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct MapEntry {\n        bytes32 _key;\n        bytes32 _value;\n    }\n\n    struct Map {\n        // Storage of map keys and values\n        MapEntry[] _entries;\n\n        // Position of the entry defined by a key in the `entries` array, plus 1\n        // because index 0 means a key is not in the map.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\n            map._entries.push(MapEntry({ _key: key, _value: value }));\n            // The entry is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            map._indexes[key] = map._entries.length;\n            return true;\n        } else {\n            map._entries[keyIndex - 1]._value = value;\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = keyIndex - 1;\n            uint256 lastIndex = map._entries.length - 1;\n\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            MapEntry storage lastEntry = map._entries[lastIndex];\n\n            // Move the last entry to the index where the entry to delete is\n            map._entries[toDeleteIndex] = lastEntry;\n            // Update the index for the moved entry\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved entry was stored\n            map._entries.pop();\n\n            // Delete the index for the deleted slot\n            delete map._indexes[key];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n        return map._indexes[key] != 0;\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._entries.length;\n    }\n\n   /**\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n    *\n    * Note that there are no guarantees on the ordering of entries inside the\n    * array, and it may change when more entries are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\n\n        MapEntry storage entry = map._entries[index];\n        return (entry._key, entry._value);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, \"EnumerableMap: nonexistent key\"); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\n     */\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n   /**\n    * @dev Returns the element stored at position `index` in the set. O(1).\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (uint256(key), address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     *\n     * _Available since v3.4._\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        uint256 index = digits - 1;\n        temp = value;\n        while (temp != 0) {\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\n            temp /= 10;\n        }\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "contracts/strategy/base/StrategyBase.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity =0.7.6;\n\npragma abicoder v2;\n\n// interface\nimport {IController} from \"../../interfaces/IController.sol\";\nimport {IWPowerPerp} from \"../../interfaces/IWPowerPerp.sol\";\n\n// contract\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n// lib\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {StrategyMath} from \"./StrategyMath.sol\";\nimport {VaultLib} from \"../../libs/VaultLib.sol\";\n\n/**\n * @dev StrategyBase contract\n * @notice base contract for PowerToken strategy\n * @author opyn team\n */\ncontract StrategyBase is ERC20 {\n    using StrategyMath for uint256;\n    using Address for address payable;\n\n    /// @dev power token controller\n    IController public powerTokenController;\n\n    /// @dev WETH token\n    address public immutable weth;\n    address public immutable wPowerPerp;\n\n    /// @dev power token strategy vault ID\n    uint256 public immutable vaultId;\n\n    /**\n     * @notice constructor for StrategyBase\n     * @dev this will open a vault in the power token contract and store the vault ID\n     * @param _powerTokenController power token controller address\n     * @param _weth weth token address\n     * @param _name token name for strategy ERC20 token\n     * @param _symbol token symbol for strategy ERC20 token\n     */\n    constructor(address _powerTokenController, address _weth, string memory _name, string memory _symbol) ERC20(_name, _symbol) {\n        require(_powerTokenController != address(0), \"invalid power token controller address\");\n        require(_weth != address(0), \"invalid weth address\");\n\n        weth = _weth;\n        powerTokenController = IController(_powerTokenController);\n        wPowerPerp = address(powerTokenController.wPowerPerp());\n        vaultId = powerTokenController.mintWPowerPerpAmount(0, 0, 0);\n    }\n    /**\n     * @notice get power token strategy vault ID \n     * @return vault ID\n     */\n    function getStrategyVaultId() external view returns (uint256) {\n        return vaultId;\n    }\n\n    /**\n     * @notice get the vault composition of the strategy \n     * @return operator\n     * @return nft collateral id\n     * @return collateral amount\n     * @return short amount\n    */\n    function getVaultDetails() external view returns (address, uint256, uint256, uint256) {\n        return _getVaultDetails();\n    }\n\n    /**\n     * @notice mint WPowerPerp and deposit collateral\n    * @dev this function will not send WPowerPerp to msg.sender if _keepWSqueeth == true\n     * @param _to receiver address\n     * @param _wAmount amount of WPowerPerp to mint\n     * @param _collateral amount of collateral to deposit\n     * @param _keepWsqueeth keep minted wSqueeth in this contract if it is set to true\n     */\n    function _mintWPowerPerp(\n        address _to,\n        uint256 _wAmount,\n        uint256 _collateral,\n        bool _keepWsqueeth\n    ) internal {\n        powerTokenController.mintWPowerPerpAmount{value: _collateral}(vaultId, _wAmount, 0);\n\n        if (!_keepWsqueeth) {\n            IWPowerPerp(wPowerPerp).transfer(_to, _wAmount);\n        }\n    }\n\n    /**\n     * @notice burn WPowerPerp and withdraw collateral\n     * @dev this function will not take WPowerPerp from msg.sender if _isOwnedWSqueeth == true\n     * @param _from WPowerPerp holder address\n     * @param _amount amount of wPowerPerp to burn\n     * @param _collateralToWithdraw amount of collateral to withdraw\n     * @param _isOwnedWSqueeth transfer WPowerPerp from holder if it is set to false\n     */\n    function _burnWPowerPerp(\n        address _from,\n        uint256 _amount,\n        uint256 _collateralToWithdraw,\n        bool _isOwnedWSqueeth\n    ) internal {\n        if (!_isOwnedWSqueeth) {\n            IWPowerPerp(wPowerPerp).transferFrom(_from, address(this), _amount);\n        }\n\n        powerTokenController.burnWPowerPerpAmount(vaultId, _amount, _collateralToWithdraw);\n    }\n\n    /**\n     * @notice mint strategy token\n     * @param _to recepient address\n     * @param _amount token amount\n     */\n    function _mintStrategyToken(address _to, uint256 _amount) internal {\n        _mint(_to, _amount);\n    }\n\n    /**\n     * @notice get strategy debt amount for a specific strategy token amount\n     * @param _strategyAmount strategy amount\n     * @return debt amount\n     */\n    function _getDebtFromStrategyAmount(uint256 _strategyAmount) internal view returns (uint256) {\n        (, , ,uint256 strategyDebt) = _getVaultDetails();\n        return strategyDebt.wmul(_strategyAmount).wdiv(totalSupply());\n    }\n\n    /**\n     * @notice get the vault composition of the strategy \n     * @return operator\n     * @return nft collateral id\n     * @return collateral amount\n     * @return short amount\n     */\n    function _getVaultDetails() internal view returns (address, uint256, uint256, uint256) {\n        VaultLib.Vault memory strategyVault = powerTokenController.vaults(vaultId);\n\n        return (strategyVault.operator, strategyVault.NftCollateralId, strategyVault.collateralAmount, strategyVault.shortAmount);\n    }\n}\n\n"
    },
    "contracts/strategy/base/StrategyMath.sol": {
      "content": "//SPDX-License-Identifier: AGPL-3.0-only\n\n/// math.sol -- mixin for inline numerical wizardry\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >0.4.13;\n\n\n/**\n * @notice Copied from https://github.com/dapphub/ds-math/blob/e70a364787804c1ded9801ed6c27b440a86ebd32/src/math.sol\n * @dev change contract to library, all uint to uint256, added div() function\n */\nlibrary StrategyMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    //rounds to zero if x*y < WAD / 2\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    //rounds to zero if x*y < WAD / 2\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    //rounds to zero if x*y < WAD / 2\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    //rounds to zero if x*y < RAY / 2\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}"
    },
    "contracts/strategy/CrabStrategy.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity =0.7.6;\npragma abicoder v2;\n\n// interface\nimport {IController} from \"../interfaces/IController.sol\";\nimport {IWPowerPerp} from \"../interfaces/IWPowerPerp.sol\";\nimport {IOracle} from \"../interfaces/IOracle.sol\";\nimport {IWETH9} from \"../interfaces/IWETH9.sol\";\nimport {IUniswapV3Pool} from \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\nimport {IController} from \"../interfaces/IController.sol\";\n\n// contract\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport {StrategyBase} from \"./base/StrategyBase.sol\";\nimport {StrategyFlashSwap} from \"./base/StrategyFlashSwap.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// lib\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {StrategyMath} from \"./base/StrategyMath.sol\";\nimport {Power2Base} from \"../libs/Power2Base.sol\";\n\n/**\n * @dev CrabStrategy contract\n * @notice Contract for Crab strategy\n * @author Opyn team\n */\ncontract CrabStrategy is StrategyBase, StrategyFlashSwap, ReentrancyGuard, Ownable {\n    using StrategyMath for uint256;\n    using Address for address payable;\n\n    uint32 public constant TWAP_PERIOD = 420 seconds;\n    uint32 public constant POWER_PERP_PERIOD = 420 seconds;\n    // strategy will only allow hedging if collateral to trade is at least 0.1% of the total strategy collateral\n    uint256 public constant DELTA_HEDGE_THRESHOLD = 1e15;\n\n    uint256 public strategyCap;\n\n    /// @dev enum to differentiate between uniswap swap callback function source\n    enum FLASH_SOURCE {\n        FLASH_DEPOSIT,\n        FLASH_WITHDRAW,\n        FLASH_HEDGE_SELL,\n        FLASH_HEDGE_BUY\n    }\n\n    /// @dev ETH:WSqueeth uniswap pool\n    address public immutable ethWSqueethPool;\n    /// @dev strategy uniswap oracle\n    address public immutable oracle;\n    address public immutable ethQuoteCurrencyPool;\n    address public immutable quoteCurrency;\n\n    /// @dev time difference to trigger a hedge (seconds)\n    uint256 public immutable hedgeTimeThreshold;\n    /// @dev price movement to trigger a hedge (0.1*1e18 = 10%)\n    uint256 public immutable hedgePriceThreshold;\n    /// @dev hedge auction duration (seconds)\n    uint256 public immutable auctionTime;\n    /// @dev start auction price multiplier for hedge buy auction and reserve price for end sell auction (scaled 1e18)\n    uint256 public immutable minPriceMultiplier;\n    /// @dev start auction price multiplier for hedge sell auction and reserve price for hedge buy auction (scaled 1e18)\n    uint256 public immutable maxPriceMultiplier;\n\n    /// @dev timestamp when last hedge executed\n    uint256 public timeAtLastHedge;\n    /// @dev WSqueeth/Eth price when last hedge executed\n    uint256 public priceAtLastHedge;\n    uint256 public auctionStartTime;\n\n    /// @dev set to true when redeemShortShutdown has been called\n    bool public hasRedeemedInShutdown;\n\n    struct FlashDepositData {\n        uint256 totalDeposit;\n    }\n\n    struct FlashWithdrawData {\n        uint256 crabAmount;\n    }\n\n    struct FlashHedgeData {\n        uint256 wSqueethAmount;\n        uint256 ethProceeds;\n        uint256 minWSqueeth;\n        uint256 minEth;\n    }\n\n    event Deposit(address indexed depositor, uint256 wSqueethAmount, uint256 lpAmount);\n    event Withdraw(address indexed withdrawer, uint256 crabAmount, uint256 wSqueethAmount, uint256 ethWithdrawn);\n    event WithdrawShutdown(address indexed withdrawer, uint256 crabAmount, uint256 ethWithdrawn);\n    event FlashDeposit(address indexed depositor, uint256 depositedAmount, uint256 tradedAmountOut);\n    event FlashWithdraw(address indexed withdrawer, uint256 crabAmount, uint256 wSqueethAmount);\n    event TimeHedgeOnUniswap(\n        address indexed hedger,\n        uint256 hedgeTimestamp,\n        uint256 auctionTriggerTimestamp,\n        uint256 minWSqueeth,\n        uint256 minEth\n    );\n    event PriceHedgeOnUniswap(\n        address indexed hedger,\n        uint256 hedgeTimestamp,\n        uint256 auctionTriggerTimestamp,\n        uint256 minWSqueeth,\n        uint256 minEth\n    );\n    event TimeHedge(address indexed hedger, bool auctionType, uint256 hedgerPrice, uint256 auctionTriggerTimestamp);\n    event PriceHedge(address indexed hedger, bool auctionType, uint256 hedgerPrice, uint256 auctionTriggerTimestamp);\n    event Hedge(\n        address indexed hedger,\n        bool auctionType,\n        uint256 hedgerPrice,\n        uint256 auctionPrice,\n        uint256 wSqueethHedgeTargetAmount,\n        uint256 ethHedgetargetAmount\n    );\n    event HedgeOnUniswap(\n        address indexed hedger,\n        bool auctionType,\n        uint256 auctionPrice,\n        uint256 wSqueethHedgeTargetAmount,\n        uint256 ethHedgetargetAmount\n    );\n    event ExecuteSellAuction(address indexed buyer, uint256 wSqueethSold, uint256 ethBought, bool isHedgingOnUniswap);\n    event ExecuteBuyAuction(address indexed seller, uint256 wSqueethBought, uint256 ethSold, bool isHedgingOnUniswap);\n    event SetStrategyCap(uint256 newCapAmount, uint256 oldCapAmount);\n\n    /**\n     * @notice strategy constructor\n     * @dev this will open a vault in the power token contract and store the vault ID\n     * @param _wSqueethController power token controller address\n     * @param _oracle oracle address\n     * @param _weth weth address\n     * @param _uniswapFactory uniswap factory address\n     * @param _ethWSqueethPool eth:wSqueeth uniswap pool address\n     * @param _hedgeTimeThreshold hedge time threshold (seconds)\n     * @param _hedgePriceThreshold hedge price threshold (0.1*1e18 = 10%)\n     * @param _auctionTime auction duration (seconds)\n     * @param _minPriceMultiplier minimum auction price multiplier (0.9*1e18 = min auction price is 90% of twap)\n     * @param _maxPriceMultiplier maximum auction price multiplier (1.1*1e18 = max auction price is 110% of twap)\n     */\n    constructor(\n        address _wSqueethController,\n        address _oracle,\n        address _weth,\n        address _uniswapFactory,\n        address _ethWSqueethPool,\n        uint256 _hedgeTimeThreshold,\n        uint256 _hedgePriceThreshold,\n        uint256 _auctionTime,\n        uint256 _minPriceMultiplier,\n        uint256 _maxPriceMultiplier\n    ) StrategyBase(_wSqueethController, _weth, \"Crab Strategy\", \"Crab\") StrategyFlashSwap(_uniswapFactory) {\n        require(_oracle != address(0), \"invalid oracle address\");\n        require(_ethWSqueethPool != address(0), \"invalid ETH:WSqueeth address\");\n        require(_hedgeTimeThreshold > 0, \"invalid hedge time threshold\");\n        require(_hedgePriceThreshold > 0, \"invalid hedge price threshold\");\n        require(_auctionTime > 0, \"invalid auction time\");\n        require(_minPriceMultiplier < 1e18, \"auction min price multiplier too high\");\n        require(_minPriceMultiplier > 0, \"invalid auction min price multiplier\");\n        require(_maxPriceMultiplier > 1e18, \"auction max price multiplier too low\");\n\n        oracle = _oracle;\n        ethWSqueethPool = _ethWSqueethPool;\n        hedgeTimeThreshold = _hedgeTimeThreshold;\n        hedgePriceThreshold = _hedgePriceThreshold;\n        auctionTime = _auctionTime;\n        minPriceMultiplier = _minPriceMultiplier;\n        maxPriceMultiplier = _maxPriceMultiplier;\n        ethQuoteCurrencyPool = IController(_wSqueethController).ethQuoteCurrencyPool();\n        quoteCurrency = IController(_wSqueethController).quoteCurrency();\n    }\n\n    /**\n     * @notice receive function to allow ETH transfer to this contract\n     */\n    receive() external payable {\n        require(msg.sender == weth || msg.sender == address(powerTokenController), \"Cannot receive eth\");\n    }\n\n    /**\n     * @notice flash deposit into strategy, providing ETH, selling wSqueeth and receiving strategy tokens\n     * @dev this function will execute a flash swap where it receives ETH, deposits and mints using flash swap proceeds and msg.value, and then repays the flash swap with wSqueeth\n     * @dev _ethToDeposit must be less than msg.value plus the proceeds from the flash swap\n     * @dev the difference between _ethToDeposit and msg.value provides the minimum that a user can receive for their sold wSqueeth\n     * @param _ethToDeposit total ETH that will be deposited in to the strategy which is a combination of msg.value and flash swap proceeds\n     */\n    function flashDeposit(uint256 _ethToDeposit) external payable nonReentrant {\n        (uint256 cachedStrategyDebt, uint256 cachedStrategyCollateral) = _syncStrategyState();\n        _checkStrategyCap(_ethToDeposit, cachedStrategyCollateral);\n\n        (uint256 wSqueethToMint, ) = _calcWsqueethToMintAndFee(\n            _ethToDeposit,\n            cachedStrategyDebt,\n            cachedStrategyCollateral\n        );\n\n        if (cachedStrategyDebt == 0 && cachedStrategyCollateral == 0) {\n            // store hedge data as strategy is delta neutral at this point\n            // only execute this upon first deposit\n            uint256 wSqueethEthPrice = IOracle(oracle).getTwap(ethWSqueethPool, wPowerPerp, weth, TWAP_PERIOD, true);\n            timeAtLastHedge = block.timestamp;\n            priceAtLastHedge = wSqueethEthPrice;\n        }\n\n        _exactInFlashSwap(\n            wPowerPerp,\n            weth,\n            IUniswapV3Pool(ethWSqueethPool).fee(),\n            wSqueethToMint,\n            _ethToDeposit.sub(msg.value),\n            uint8(FLASH_SOURCE.FLASH_DEPOSIT),\n            abi.encodePacked(_ethToDeposit)\n        );\n\n        emit FlashDeposit(msg.sender, _ethToDeposit, wSqueethToMint);\n    }\n\n    /**\n     * @notice flash deposit into strategy, providing strategy tokens, buying wSqueeth, burning and receiving ETH\n     * @dev this function will execute a flash swap where it receives wSqueeth, burns, withdraws ETH and then repays the flash swap with ETH\n     * @param _crabAmount strategy token amount to burn\n     * @param _maxEthToPay maximum ETH to pay to buy back the owed wSqueeth debt\n     */\n    function flashWithdraw(uint256 _crabAmount, uint256 _maxEthToPay) external nonReentrant {\n        uint256 exactWSqueethNeeded = _getDebtFromStrategyAmount(_crabAmount);\n\n        _exactOutFlashSwap(\n            weth,\n            wPowerPerp,\n            IUniswapV3Pool(ethWSqueethPool).fee(),\n            exactWSqueethNeeded,\n            _maxEthToPay,\n            uint8(FLASH_SOURCE.FLASH_WITHDRAW),\n            abi.encodePacked(_crabAmount)\n        );\n\n        emit FlashWithdraw(msg.sender, _crabAmount, exactWSqueethNeeded);\n    }\n\n    /**\n     * @notice deposit ETH into strategy\n     * @dev provide ETH, return wSqueeth and strategy token\n     * @return wSqueethToMint minted amount of wSqueeth\n     * @return depositorCrabAmount minted amount of strategy token\n     */\n    function deposit() external payable nonReentrant returns (uint256, uint256) {\n        uint256 amount = msg.value;\n\n        (uint256 wSqueethToMint, uint256 depositorCrabAmount) = _deposit(msg.sender, amount, false);\n\n        emit Deposit(msg.sender, wSqueethToMint, depositorCrabAmount);\n\n        return (wSqueethToMint, depositorCrabAmount);\n    }\n\n    /**\n     * @notice withdraw WETH from strategy\n     * @dev provide strategy tokens and wSqueeth, returns eth\n     * @param _crabAmount amount of strategy token to burn\n     */\n    function withdraw(uint256 _crabAmount) external payable nonReentrant {\n        uint256 wSqueethAmount = _getDebtFromStrategyAmount(_crabAmount);\n        uint256 ethToWithdraw = _withdraw(msg.sender, _crabAmount, wSqueethAmount, false);\n\n        // send back ETH collateral\n        payable(msg.sender).sendValue(ethToWithdraw);\n\n        emit Withdraw(msg.sender, _crabAmount, wSqueethAmount, ethToWithdraw);\n    }\n\n    /**\n     * @notice called to exit a vault if the Squeeth Power Perp contracts are shutdown\n     * @param _crabAmount amount of strategy token to burn\n     */\n    function withdrawShutdown(uint256 _crabAmount) external nonReentrant {\n        require(powerTokenController.isShutDown(), \"Squeeth contracts are not shut down\");\n        require(hasRedeemedInShutdown, \"Strategy has not redeemed vault proceeds\");\n\n        uint256 strategyShare = _calcCrabRatio(_crabAmount, totalSupply());\n        uint256 ethToWithdraw = _calcEthToWithdraw(strategyShare, address(this).balance);\n        _burn(msg.sender, _crabAmount);\n\n        payable(msg.sender).sendValue(ethToWithdraw);\n        emit WithdrawShutdown(msg.sender, _crabAmount, ethToWithdraw);\n    }\n\n    /**\n     * @notice hedge startegy based on time threshold with uniswap arbing\n     * @param _minWSqueeth minimum WSqueeth amount of profit if hedge auction is selling WSqueeth\n     * @param _minEth minimum ETH amount of profit if hedge auction is buying WSqueeth\n     */\n    function timeHedgeOnUniswap(uint256 _minWSqueeth, uint256 _minEth) external {\n        uint256 auctionTriggerTime = timeAtLastHedge.add(hedgeTimeThreshold);\n\n        require(block.timestamp >= auctionTriggerTime, \"Time hedging is not allowed\");\n\n        _hedgeOnUniswap(auctionTriggerTime, _minWSqueeth, _minEth);\n\n        emit TimeHedgeOnUniswap(msg.sender, block.timestamp, auctionTriggerTime, _minWSqueeth, _minEth);\n    }\n\n    /**\n     * @notice hedge startegy based on price threshold with uniswap arbing\n     */\n    function priceHedgeOnUniswap(\n        uint256 _auctionTriggerTime,\n        uint256 _minWSqueeth,\n        uint256 _minEth\n    ) external payable {\n        require(_isPriceHedge(_auctionTriggerTime), \"Price hedging not allowed\");\n\n        _hedgeOnUniswap(_auctionTriggerTime, _minWSqueeth, _minEth);\n\n        emit PriceHedgeOnUniswap(msg.sender, block.timestamp, _auctionTriggerTime, _minWSqueeth, _minEth);\n    }\n\n    /**\n     * @notice strategy hedging based on time threshold\n     * @dev need to attach msg.value if buying WSqueeth\n     * @param _isStrategySellingWSqueeth sell or buy auction, true for sell auction\n     * @param _limitPrice hedger limit auction price, should be the max price when auction is sell auction, min price when it is a buy auction\n     */\n    function timeHedge(bool _isStrategySellingWSqueeth, uint256 _limitPrice) external payable nonReentrant {\n        (bool isTimeHedgeAllowed, uint256 auctionTriggerTime) = _isTimeHedge();\n\n        require(isTimeHedgeAllowed, \"Time hedging is not allowed\");\n\n        _hedge(auctionTriggerTime, _isStrategySellingWSqueeth, _limitPrice);\n\n        emit TimeHedge(msg.sender, _isStrategySellingWSqueeth, _limitPrice, auctionTriggerTime);\n    }\n\n    /**\n     * @notice strategy hedging based on price threshold\n     * @dev need to attach msg.value if buying WSqueeth\n     * @param _auctionTriggerTime timestamp where auction started\n     */\n    function priceHedge(\n        uint256 _auctionTriggerTime,\n        bool _isStrategySellingWSqueeth,\n        uint256 _limitPrice\n    ) external payable nonReentrant {\n        require(_isPriceHedge(_auctionTriggerTime), \"Price hedging not allowed\");\n\n        _hedge(_auctionTriggerTime, _isStrategySellingWSqueeth, _limitPrice);\n\n        emit PriceHedge(msg.sender, _isStrategySellingWSqueeth, _limitPrice, _auctionTriggerTime);\n    }\n\n    /**\n     * @notice check if hedging based on price threshold is allowed\n     * @param _auctionTriggerTime alleged timestamp where auction was triggered\n     * @return true if hedging is allowed\n     */\n    function checkPriceHedge(uint256 _auctionTriggerTime) external view returns (bool) {\n        return _isPriceHedge(_auctionTriggerTime);\n    }\n\n    /**\n     * @notice check if hedging based on time threshold is allowed\n     * @return isTimeHedgeAllowed true if hedging is allowed\n     * @return auctionTriggertime auction trigger timestamp\n     */\n    function checkTimeHedge() external view returns (bool, uint256) {\n        (bool isTimeHedgeAllowed, uint256 auctionTriggerTime) = _isTimeHedge();\n\n        return (isTimeHedgeAllowed, auctionTriggerTime);\n    }\n\n    /**\n     * @notice get wSqueeth debt amount associated with strategy token amount\n     * @dev _crabAmount strategy token amount\n     * @return wSqueeth amount\n     */\n    function getWsqueethFromCrabAmount(uint256 _crabAmount) external view returns (uint256) {\n        return _getDebtFromStrategyAmount(_crabAmount);\n    }\n\n    /**\n     * @notice owner can set the strategy cap in ETH collateral terms\n     * @dev deposits are rejected if it would put the strategy above the cap amount\n     * @dev strategy collateral can be above the cap amount due to hedging activities\n     * @param _capAmount the maximum strategy collateral in ETH, checked on deposits\n     */\n    function setStrategyCap(uint256 _capAmount) external onlyOwner {\n        uint256 oldCap = strategyCap;\n        strategyCap = _capAmount;\n\n        emit SetStrategyCap(_capAmount, oldCap);\n    }\n\n    /**\n     * @notice called to redeem the net value of a vault post shutdown\n     * @dev needs to be called 1 time before users can exit the strategy using withdrawShutdown\n     */\n    function redeemShortShutdown() external {\n        hasRedeemedInShutdown = true;\n        powerTokenController.redeemShort(vaultId);\n    }\n\n    /**\n     * @notice check if a user deposit puts the strategy above the cap\n     * @dev reverts if a deposit amount puts strategy over the cap\n     * @dev it is possible for the strategy to be over the cap from trading/hedging activities, but withdrawals are still allowed\n     * @param _depositAmount the user deposit amount in ETH\n     * @param _strategyCollateral the updated strategy collateral\n     */\n    function _checkStrategyCap(uint256 _depositAmount, uint256 _strategyCollateral) internal view {\n        require(_strategyCollateral.add(_depositAmount) <= strategyCap, \"Deposit exceeds strategy cap\");\n    }\n\n    /**\n     * @notice uniswap flash swap callback function\n     * @dev this function will be called by flashswap callback function uniswapV3SwapCallback()\n     * @param _caller address of original function caller\n     * @param _amountToPay amount to pay back for flashswap\n     * @param _callData arbitrary data attached to callback\n     * @param _callSource identifier for which function triggered callback\n     */\n    function _strategyFlash(\n        address _caller,\n        address, /*_tokenIn*/\n        address, /*_tokenOut*/\n        uint24, /*_fee*/\n        uint256 _amountToPay,\n        bytes memory _callData,\n        uint8 _callSource\n    ) internal override {\n        if (FLASH_SOURCE(_callSource) == FLASH_SOURCE.FLASH_DEPOSIT) {\n            FlashDepositData memory data = abi.decode(_callData, (FlashDepositData));\n\n            // convert WETH to ETH as Uniswap uses WETH\n            IWETH9(weth).withdraw(IWETH9(weth).balanceOf(address(this)));\n\n            //use user msg.value and unwrapped WETH from uniswap flash swap proceeds to deposit into strategy\n            //will revert if data.totalDeposit is > eth balance in contract\n            _deposit(_caller, data.totalDeposit, true);\n\n            //repay the flash swap\n            IWPowerPerp(wPowerPerp).transfer(ethWSqueethPool, _amountToPay);\n\n            //return excess eth to the user that was not needed for slippage\n            if (address(this).balance > 0) {\n                payable(_caller).sendValue(address(this).balance);\n            }\n        } else if (FLASH_SOURCE(_callSource) == FLASH_SOURCE.FLASH_WITHDRAW) {\n            FlashWithdrawData memory data = abi.decode(_callData, (FlashWithdrawData));\n\n            //use flash swap wSqueeth proceeds to withdraw ETH along with user crabAmount\n            uint256 ethToWithdraw = _withdraw(\n                _caller,\n                data.crabAmount,\n                IWPowerPerp(wPowerPerp).balanceOf(address(this)),\n                true\n            );\n\n            //use some amount of withdrawn ETH to repay flash swap\n            IWETH9(weth).deposit{value: _amountToPay}();\n            IWETH9(weth).transfer(ethWSqueethPool, _amountToPay);\n\n            //excess ETH not used to repay flash swap is transferred to the user\n            uint256 proceeds = ethToWithdraw.sub(_amountToPay);\n            if (proceeds > 0) {\n                payable(_caller).sendValue(proceeds);\n            }\n        } else if (FLASH_SOURCE(_callSource) == FLASH_SOURCE.FLASH_HEDGE_SELL) {\n            //strategy is selling wSqueeth for ETH\n            FlashHedgeData memory data = abi.decode(_callData, (FlashHedgeData));\n\n            // convert WETH to ETH as Uniswap uses WETH\n            IWETH9(weth).withdraw(IWETH9(weth).balanceOf(address(this)));\n            //mint wSqueeth to pay hedger and repay flash swap, deposit ETH\n            _executeSellAuction(_caller, data.ethProceeds, data.wSqueethAmount, data.ethProceeds, true);\n\n            //determine excess wSqueeth that the auction would have sold but is not needed to repay flash swap\n            uint256 wSqueethProfit = data.wSqueethAmount.sub(_amountToPay);\n\n            //minimum profit check for hedger\n            require(wSqueethProfit >= data.minWSqueeth, \"profit is less than min wSqueeth\");\n\n            //repay flash swap and transfer profit to hedger\n            IWPowerPerp(wPowerPerp).transfer(ethWSqueethPool, _amountToPay);\n            IWPowerPerp(wPowerPerp).transfer(_caller, wSqueethProfit);\n        } else if (FLASH_SOURCE(_callSource) == FLASH_SOURCE.FLASH_HEDGE_BUY) {\n            //strategy is buying wSqueeth for ETH\n            FlashHedgeData memory data = abi.decode(_callData, (FlashHedgeData));\n\n            //withdraw ETH to pay hedger and repay flash swap, burn wSqueeth\n            _executeBuyAuction(_caller, data.wSqueethAmount, data.ethProceeds, true);\n\n            //determine excess ETH that the auction would have paid but is not needed to repay flash swap\n            uint256 ethProfit = data.ethProceeds.sub(_amountToPay);\n\n            //minimum profit check for hedger\n            require(ethProfit >= data.minEth, \"profit is less than min ETH\");\n\n            //repay flash swap and transfer profit to hedger\n            IWETH9(weth).deposit{value: _amountToPay}();\n            IWETH9(weth).transfer(ethWSqueethPool, _amountToPay);\n            payable(_caller).sendValue(ethProfit);\n        }\n    }\n\n    /**\n     * @notice deposit into strategy\n     * @dev if _isFlashDeposit is true, keeps wSqueeth in contract, otherwise sends to user\n     * @param _depositor depositor address\n     * @param _amount amount of ETH collateral to deposit\n     * @param _isFlashDeposit true if called by flashDeposit\n     * @return wSqueethToMint minted amount of WSqueeth\n     * @return depositorCrabAmount minted CRAB strategy token amount\n     */\n    function _deposit(\n        address _depositor,\n        uint256 _amount,\n        bool _isFlashDeposit\n    ) internal returns (uint256, uint256) {\n        (uint256 strategyDebt, uint256 strategyCollateral) = _syncStrategyState();\n        _checkStrategyCap(_amount, strategyCollateral);\n\n        (uint256 wSqueethToMint, uint256 ethFee) = _calcWsqueethToMintAndFee(_amount, strategyDebt, strategyCollateral);\n\n        uint256 depositorCrabAmount = _calcSharesToMint(_amount.sub(ethFee), strategyCollateral, totalSupply());\n\n        if (strategyDebt == 0 && strategyCollateral == 0) {\n            // store hedge data as strategy is delta neutral at this point\n            // only execute this upon first deposit\n            uint256 wSqueethEthPrice = IOracle(oracle).getTwap(ethWSqueethPool, wPowerPerp, weth, TWAP_PERIOD, true);\n            timeAtLastHedge = block.timestamp;\n            priceAtLastHedge = wSqueethEthPrice;\n        }\n\n        // mint wSqueeth and send it to msg.sender\n        _mintWPowerPerp(_depositor, wSqueethToMint, _amount, _isFlashDeposit);\n        // mint LP to depositor\n        _mintStrategyToken(_depositor, depositorCrabAmount);\n\n        return (wSqueethToMint, depositorCrabAmount);\n    }\n\n    /**\n     * @notice withdraw WETH from strategy\n     * @dev if _isFlashDeposit is true, keeps wSqueeth in contract, otherwise sends to user\n     * @param _crabAmount amount of strategy token to burn\n     * @param _wSqueethAmount amount of wSqueeth to burn\n     * @param _isFlashWithdraw flag if called by flashWithdraw\n     * @return ETH amount to withdraw\n     */\n    function _withdraw(\n        address _from,\n        uint256 _crabAmount,\n        uint256 _wSqueethAmount,\n        bool _isFlashWithdraw\n    ) internal returns (uint256) {\n        (, uint256 strategyCollateral) = _syncStrategyState();\n\n        uint256 strategyShare = _calcCrabRatio(_crabAmount, totalSupply());\n        uint256 ethToWithdraw = _calcEthToWithdraw(strategyShare, strategyCollateral);\n\n        _burnWPowerPerp(_from, _wSqueethAmount, ethToWithdraw, _isFlashWithdraw);\n        _burn(_from, _crabAmount);\n\n        return ethToWithdraw;\n    }\n\n    /**\n     * @notice hedging function to adjust collateral and debt to be eth delta neutral\n     * @param _auctionTriggerTime timestamp where auction started\n     * @param _isStrategySellingWSqueeth auction type, true for sell auction\n     * @param _limitPrice hedger accepted auction price, should be the max price when auction is sell auction, min price when it is a buy auction\n     */\n    function _hedge(\n        uint256 _auctionTriggerTime,\n        bool _isStrategySellingWSqueeth,\n        uint256 _limitPrice\n    ) internal {\n        (\n            bool isSellingAuction,\n            uint256 wSqueethToAuction,\n            uint256 ethProceeds,\n            uint256 auctionWSqueethEthPrice\n        ) = _startAuction(_auctionTriggerTime);\n\n        require(_isStrategySellingWSqueeth == isSellingAuction, \"wrong auction type\");\n\n        if (isSellingAuction) {\n            // Receiving ETH and paying wSqueeth\n            require(auctionWSqueethEthPrice <= _limitPrice, \"Auction price greater than max accepted price\");\n            require(msg.value >= ethProceeds, \"Low ETH amount received\");\n\n            _executeSellAuction(msg.sender, msg.value, wSqueethToAuction, ethProceeds, false);\n        } else {\n            require(msg.value == 0, \"ETH attached for buy auction\");\n            // Receiving wSqueeth and paying ETH\n            require(auctionWSqueethEthPrice >= _limitPrice, \"Auction price greater than min accepted price\");\n            _executeBuyAuction(msg.sender, wSqueethToAuction, ethProceeds, false);\n        }\n\n        emit Hedge(\n            msg.sender,\n            _isStrategySellingWSqueeth,\n            _limitPrice,\n            auctionWSqueethEthPrice,\n            wSqueethToAuction,\n            ethProceeds\n        );\n    }\n\n    /**\n     * @notice execute arb between auction price and uniswap price\n     * @param _auctionTriggerTime auction starting time\n     */\n    function _hedgeOnUniswap(\n        uint256 _auctionTriggerTime,\n        uint256 _minWSqueeth,\n        uint256 _minEth\n    ) internal {\n        (\n            bool isSellingAuction,\n            uint256 wSqueethToAuction,\n            uint256 ethProceeds,\n            uint256 auctionWSqueethEthPrice\n        ) = _startAuction(_auctionTriggerTime);\n\n        if (isSellingAuction) {\n            _exactOutFlashSwap(\n                wPowerPerp,\n                weth,\n                IUniswapV3Pool(ethWSqueethPool).fee(),\n                ethProceeds,\n                wSqueethToAuction,\n                uint8(FLASH_SOURCE.FLASH_HEDGE_SELL),\n                abi.encodePacked(wSqueethToAuction, ethProceeds, _minWSqueeth, _minEth)\n            );\n        } else {\n            _exactOutFlashSwap(\n                weth,\n                wPowerPerp,\n                IUniswapV3Pool(ethWSqueethPool).fee(),\n                wSqueethToAuction,\n                ethProceeds,\n                uint8(FLASH_SOURCE.FLASH_HEDGE_BUY),\n                abi.encodePacked(wSqueethToAuction, ethProceeds, _minWSqueeth, _minEth)\n            );\n        }\n\n        emit HedgeOnUniswap(msg.sender, isSellingAuction, auctionWSqueethEthPrice, wSqueethToAuction, ethProceeds);\n    }\n\n    /**\n     * @notice execute sell auction based on the parameters calculated\n     * @dev if _isHedgingOnUniswap, wSqueeth minted is kept to repay flashswap, otherwise sent to seller\n     * @param _buyer buyer address\n     * @param _buyerAmount buyer ETH amount sent\n     * @param _wSqueethToSell wSqueeth amount to sell\n     * @param _ethToBuy ETH amount to buy\n     * @param _isHedgingOnUniswap true if arbing with uniswap price\n     */\n    function _executeSellAuction(\n        address _buyer,\n        uint256 _buyerAmount,\n        uint256 _wSqueethToSell,\n        uint256 _ethToBuy,\n        bool _isHedgingOnUniswap\n    ) internal {\n        if (_isHedgingOnUniswap) {\n            _mintWPowerPerp(_buyer, _wSqueethToSell, _ethToBuy, true);\n        } else {\n            _mintWPowerPerp(_buyer, _wSqueethToSell, _ethToBuy, false);\n\n            uint256 remainingEth = _buyerAmount.sub(_ethToBuy);\n\n            if (remainingEth > 0) {\n                payable(_buyer).sendValue(remainingEth);\n            }\n        }\n\n        emit ExecuteSellAuction(_buyer, _wSqueethToSell, _ethToBuy, _isHedgingOnUniswap);\n    }\n\n    /**\n     * @notice execute buy auction based on the parameters calculated\n     * @dev if _isHedgingOnUniswap, ETH proceeds are not sent to seller\n     * @param _seller seller address\n     * @param _wSqueethToBuy wSqueeth amount to buy\n     * @param _ethToSell ETH amount to sell\n     * @param _isHedgingOnUniswap true if arbing with uniswap price\n     */\n    function _executeBuyAuction(\n        address _seller,\n        uint256 _wSqueethToBuy,\n        uint256 _ethToSell,\n        bool _isHedgingOnUniswap\n    ) internal {\n        _burnWPowerPerp(_seller, _wSqueethToBuy, _ethToSell, _isHedgingOnUniswap);\n\n        if (!_isHedgingOnUniswap) {\n            payable(_seller).sendValue(_ethToSell);\n        }\n\n        emit ExecuteBuyAuction(_seller, _wSqueethToBuy, _ethToSell, _isHedgingOnUniswap);\n    }\n\n    /**\n     * @notice determine auction direction, price, and ensure auction hasn't switched directions\n     * @param _auctionTriggerTime auction starting time\n     * @return auction type\n     * @return WSqueeth amount to sell or buy\n     * @return ETH to sell/buy\n     * @return auction WSqueeth/ETH price\n     */\n    function _startAuction(uint256 _auctionTriggerTime)\n        internal\n        returns (\n            bool,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        (uint256 strategyDebt, uint256 ethDelta) = _syncStrategyState();\n        uint256 currentWSqueethPrice = IOracle(oracle).getTwap(ethWSqueethPool, wPowerPerp, weth, TWAP_PERIOD, true);\n        uint256 feeAdjustment = _calcFeeAdjustment();\n        (bool isSellingAuction, ) = _checkAuctionType(strategyDebt, ethDelta, currentWSqueethPrice, feeAdjustment);\n        uint256 auctionWSqueethEthPrice = _getAuctionPrice(_auctionTriggerTime, currentWSqueethPrice, isSellingAuction);\n        (bool isStillSellingAuction, uint256 wSqueethToAuction) = _checkAuctionType(\n            strategyDebt,\n            ethDelta,\n            auctionWSqueethEthPrice,\n            feeAdjustment\n        );\n\n        require(isSellingAuction == isStillSellingAuction, \"can not execute hedging trade as auction type changed\");\n\n        uint256 ethProceeds = wSqueethToAuction.wmul(auctionWSqueethEthPrice);\n\n        timeAtLastHedge = block.timestamp;\n        priceAtLastHedge = currentWSqueethPrice;\n\n        return (isSellingAuction, wSqueethToAuction, ethProceeds, auctionWSqueethEthPrice);\n    }\n\n    /**\n     * @notice sync strategy debt and collateral amount from vault\n     * @return synced debt amount\n     * @return synced collateral amount\n     */\n    function _syncStrategyState() internal view returns (uint256, uint256) {\n        (, , uint256 syncedStrategyCollateral, uint256 syncedStrategyDebt) = _getVaultDetails();\n\n        return (syncedStrategyDebt, syncedStrategyCollateral);\n    }\n\n    /**\n     * @notice calculate the fee adjustment factor, which is the amount of ETH owed per 1 wSqueeth minted\n     * @dev the fee is a based off the index value of squeeth and uses a twap scaled down by the PowerPerp's INDEX_SCALE\n     * @return the fee adjustment factor\n     */\n    function _calcFeeAdjustment() internal view returns (uint256) {\n        uint256 wSqueethEthPrice = Power2Base._getTwap(\n            oracle,\n            ethWSqueethPool,\n            wPowerPerp,\n            weth,\n            POWER_PERP_PERIOD,\n            false\n        );\n        uint256 feeRate = IController(powerTokenController).feeRate();\n        return wSqueethEthPrice.mul(feeRate).div(10000);\n    }\n\n    /**\n     * @notice calculate amount of wSqueeth to mint and fee paid from deposited amount\n     * @param _depositedAmount amount of deposited WETH\n     * @param _strategyDebtAmount amount of strategy debt\n     * @param _strategyCollateralAmount collateral amount in strategy\n     * @return amount of minted wSqueeth and ETH fee paid on minted squeeth\n     */\n    function _calcWsqueethToMintAndFee(\n        uint256 _depositedAmount,\n        uint256 _strategyDebtAmount,\n        uint256 _strategyCollateralAmount\n    ) internal view returns (uint256, uint256) {\n        uint256 wSqueethToMint;\n        uint256 feeAdjustment = _calcFeeAdjustment();\n\n        if (_strategyDebtAmount == 0 && _strategyCollateralAmount == 0) {\n            require(\n                totalSupply() == 0,\n                \"Crab strategy shut down due to full liquidation or shutdown of squeeth contracts\"\n            );\n\n            uint256 wSqueethEthPrice = IOracle(oracle).getTwap(ethWSqueethPool, wPowerPerp, weth, TWAP_PERIOD, true);\n            uint256 squeethDelta = wSqueethEthPrice.wmul(2e18);\n            wSqueethToMint = _depositedAmount.wdiv(squeethDelta.add(feeAdjustment));\n        } else {\n            wSqueethToMint = _depositedAmount.wmul(_strategyDebtAmount).wdiv(\n                _strategyCollateralAmount.add(_strategyDebtAmount.wmul(feeAdjustment))\n            );\n        }\n\n        uint256 fee = wSqueethToMint.wmul(feeAdjustment);\n\n        return (wSqueethToMint, fee);\n    }\n\n    /**\n     * @notice check if hedging based on time threshold is allowed\n     * @return true if time hedging is allowed\n     * @return auction trigger timestamp\n     */\n    function _isTimeHedge() internal view returns (bool, uint256) {\n        uint256 auctionTriggerTime = timeAtLastHedge.add(hedgeTimeThreshold);\n\n        return (block.timestamp >= auctionTriggerTime, auctionTriggerTime);\n    }\n\n    /**\n     * @notice check if hedging based on price threshold is allowed\n     * @return true if hedging is allowed\n     */\n    function _isPriceHedge(uint256 _auctionTriggerTime) internal view returns (bool) {\n        uint32 secondsToPriceHedgeTrigger = uint32(block.timestamp.sub(_auctionTriggerTime));\n        uint256 wSqueethEthPriceAtTriggerTime = IOracle(oracle).getHistoricalTwap(\n            ethWSqueethPool,\n            wPowerPerp,\n            weth,\n            secondsToPriceHedgeTrigger + TWAP_PERIOD,\n            secondsToPriceHedgeTrigger\n        );\n        uint256 cachedRatio = wSqueethEthPriceAtTriggerTime.wdiv(priceAtLastHedge);\n        uint256 priceThreshold = cachedRatio > 1e18 ? (cachedRatio).sub(1e18) : uint256(1e18).sub(cachedRatio);\n\n        return priceThreshold >= hedgePriceThreshold;\n    }\n\n    /**\n     * @notice calculate auction price based on auction direction, start time and wSqueeth price\n     * @param _auctionTriggerTime timestamp where auction started\n     * @param _wSqueethEthPrice WSqueeth/ETH price\n     * @param _isSellingAuction auction type (true for selling, false for buying auction)\n     * @return auction price\n     */\n    function _getAuctionPrice(\n        uint256 _auctionTriggerTime,\n        uint256 _wSqueethEthPrice,\n        bool _isSellingAuction\n    ) internal view returns (uint256) {\n        uint256 auctionCompletionRatio = block.timestamp.sub(_auctionTriggerTime) >= auctionTime\n            ? 1e18\n            : (block.timestamp.sub(_auctionTriggerTime)).wdiv(auctionTime);\n\n        uint256 priceMultiplier;\n        if (_isSellingAuction) {\n            priceMultiplier = maxPriceMultiplier.sub(\n                auctionCompletionRatio.wmul(maxPriceMultiplier.sub(minPriceMultiplier))\n            );\n        } else {\n            priceMultiplier = minPriceMultiplier.add(\n                auctionCompletionRatio.wmul(maxPriceMultiplier.sub(minPriceMultiplier))\n            );\n        }\n\n        return _wSqueethEthPrice.wmul(priceMultiplier);\n    }\n\n    /**\n     * @notice check the direction of auction and the target amount of wSqueeth to hedge\n     * @param _debt strategy debt\n     * @param _ethDelta ETH delta (amount of ETH in strategy)\n     * @param _wSqueethEthPrice WSqueeth/ETH price\n     * @param _feeAdjustment the fee adjustment, the amount of ETH owed per wSqueeth minted\n     * @return auction type(sell or buy) and auction initial target hedge in wSqueth\n     */\n    function _checkAuctionType(\n        uint256 _debt,\n        uint256 _ethDelta,\n        uint256 _wSqueethEthPrice,\n        uint256 _feeAdjustment\n    ) internal pure returns (bool, uint256) {\n        uint256 wSqueethDelta = _debt.wmul(2e18).wmul(_wSqueethEthPrice);\n\n        (uint256 targetHedge, bool isSellingAuction) = _getTargetHedgeAndAuctionType(\n            wSqueethDelta,\n            _ethDelta,\n            _wSqueethEthPrice,\n            _feeAdjustment\n        );\n\n        uint256 collateralRatioToHedge = targetHedge.wmul(_wSqueethEthPrice).wdiv(_ethDelta);\n\n        require(collateralRatioToHedge > DELTA_HEDGE_THRESHOLD, \"strategy is delta neutral\");\n\n        return (isSellingAuction, targetHedge);\n    }\n\n    /**\n     * @dev calculate amount of strategy token to mint for depositor\n     * @param _amount amount of ETH deposited\n     * @param _strategyCollateralAmount amount of strategy collateral\n     * @param _crabTotalSupply total supply of strategy token\n     * @return amount of strategy token to mint\n     */\n    function _calcSharesToMint(\n        uint256 _amount,\n        uint256 _strategyCollateralAmount,\n        uint256 _crabTotalSupply\n    ) internal pure returns (uint256) {\n        uint256 depositorShare = _amount.wdiv(_strategyCollateralAmount.add(_amount));\n\n        if (_crabTotalSupply != 0) return _crabTotalSupply.wmul(depositorShare).wdiv(uint256(1e18).sub(depositorShare));\n\n        return _amount;\n    }\n\n    /**\n     * @notice calculates the ownership proportion for strategy debt and collateral relative to a total amount of strategy tokens\n     * @param _crabAmount strategy token amount\n     * @param _totalSupply strategy total supply\n     * @return ownership proportion of a strategy token amount relative to the total strategy tokens\n     */\n    function _calcCrabRatio(uint256 _crabAmount, uint256 _totalSupply) internal pure returns (uint256) {\n        return _crabAmount.wdiv(_totalSupply);\n    }\n\n    /**\n     * @notice calculate ETH to withdraw from strategy given a ownership proportion\n     * @param _crabRatio crab ratio\n     * @param _strategyCollateralAmount amount of collateral in strategy\n     * @return amount of ETH allowed to withdraw\n     */\n    function _calcEthToWithdraw(uint256 _crabRatio, uint256 _strategyCollateralAmount) internal pure returns (uint256) {\n        return _strategyCollateralAmount.wmul(_crabRatio);\n    }\n\n    /**\n     * @notice determine target hedge and auction type (selling/buying auction)\n     * @dev target hedge is the amount of WSqueeth the auction needs to sell or buy to be eth delta neutral\n     * @param _wSqueethDelta WSqueeth delta\n     * @param _ethDelta ETH delta\n     * @param _wSqueethEthPrice WSqueeth/ETH price\n     * @param _feeAdjustment the fee adjustment, the amount of ETH owed per wSqueeth minted\n     * @return target hedge in wSqueeth\n     * @return auction type: true if auction is selling WSqueeth, false if buying WSqueeth\n     */\n    function _getTargetHedgeAndAuctionType(\n        uint256 _wSqueethDelta,\n        uint256 _ethDelta,\n        uint256 _wSqueethEthPrice,\n        uint256 _feeAdjustment\n    ) internal pure returns (uint256, bool) {\n        return\n            (_wSqueethDelta > _ethDelta)\n                ? ((_wSqueethDelta.sub(_ethDelta)).wdiv(_wSqueethEthPrice), false)\n                : ((_ethDelta.sub(_wSqueethDelta)).wdiv(_wSqueethEthPrice.add(_feeAdjustment)), true);\n    }\n}\n"
    },
    "contracts/strategy/base/StrategyFlashSwap.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity =0.7.6;\npragma abicoder v2;\n\n// interface\nimport \"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\";\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\n\n// lib\nimport '@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol';\nimport '@uniswap/v3-periphery/contracts/libraries/Path.sol';\nimport '@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol';\nimport '@uniswap/v3-periphery/contracts/libraries/CallbackValidation.sol';\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\nimport '@uniswap/v3-core/contracts/libraries/SafeCast.sol';\n\ncontract StrategyFlashSwap is IUniswapV3SwapCallback {\n    using Path for bytes;\n    using SafeCast for uint256;\n    using LowGasSafeMath for uint256;\n    using LowGasSafeMath for int256;\n\n    /// @dev Uniswap factory address\n    address public immutable factory;\n\n    struct SwapCallbackData {\n        bytes path;\n        address caller;\n        uint8 callSource;\n        bytes callData;\n    }\n\n    /**\n     * @dev constructor\n     * @param _factory uniswap factory address\n     */\n    constructor(\n        address _factory\n    ) {\n        require(_factory != address(0), \"invalid factory address\");\n        factory = _factory;\n    }\n\n    /**\n     * @notice uniswap swap callback function for flashes\n     * @param amount0Delta amount of token0\n     * @param amount1Delta amount of token1\n     * @param _data callback data encoded as SwapCallbackData struct\n     */\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata _data\n    ) external override {\n        require(amount0Delta > 0 || amount1Delta > 0); // swaps entirely within 0-liquidity regions are not supported\n\n        SwapCallbackData memory data = abi.decode(_data, (SwapCallbackData));\n        (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool();\n\n        //ensure that callback comes from uniswap pool\n        CallbackValidation.verifyCallback(factory, tokenIn, tokenOut, fee);\n\n        //determine the amount that needs to be repaid as part of the flashswap\n        uint256 amountToPay =\n            amount0Delta > 0\n                ?  uint256(amount0Delta)\n                :  uint256(amount1Delta);\n        \n        //calls the strategy function that uses the proceeds from flash swap and executes logic to have an amount of token to repay the flash swap\n        _strategyFlash(data.caller, tokenIn, tokenOut, fee, amountToPay, data.callData, data.callSource);\n    }\n\n    /**\n     * @notice execute an exact-in flash swap (specify an exact amount to pay)\n     * @param _tokenIn token address to sell\n     * @param _tokenOut token address to receive\n     * @param _fee pool fee\n     * @param _amountIn amount to sell\n     * @param _amountOutMinimum minimum amount to receive\n     * @param _callSource function call source\n     * @param _data arbitrary data assigned with the call \n     */\n    function _exactInFlashSwap(address _tokenIn, address _tokenOut, uint24 _fee, uint256 _amountIn, uint256 _amountOutMinimum, uint8 _callSource, bytes memory _data) internal {\n        //calls internal uniswap swap function that will trigger a callback for the flash swap\n        uint256 amountOut = _exactInputInternal(\n            _amountIn,\n            address(this),\n            uint160(0),\n            SwapCallbackData({path: abi.encodePacked(_tokenIn, _fee, _tokenOut), caller: msg.sender, callSource: _callSource, callData: _data})\n        );\n       \n        //slippage limit check\n        require(amountOut >= _amountOutMinimum, \"amount out less than min\");\n    }\n\n\n    /**\n     * @notice execute an exact-out flash swap (specify an exact amount to receive)\n     * @param _tokenIn token address to sell\n     * @param _tokenOut token address to receive\n     * @param _fee pool fee\n     * @param _amountOut exact amount to receive\n     * @param _amountInMaximum maximum amount to sell\n     * @param _callSource function call source\n     * @param _data arbitrary data assigned with the call \n     */\n    function _exactOutFlashSwap(address _tokenIn, address _tokenOut, uint24 _fee, uint256 _amountOut, uint256 _amountInMaximum, uint8 _callSource, bytes memory _data) internal {\n        //calls internal uniswap swap function that will trigger a callback for the flash swap\n        uint256 amountIn = _exactOutputInternal(\n            _amountOut,\n            address(this),\n            uint160(0),\n            SwapCallbackData({path: abi.encodePacked(_tokenOut, _fee, _tokenIn), caller: msg.sender, callSource: _callSource, callData: _data})\n        );\n        \n        //slippage limit check\n        require(amountIn <= _amountInMaximum, \"amount in greater than max\");\n    }\n\n\n    /**\n     * @notice function to be called by uniswap callback. \n     * @dev this function should be overridden by the child contract\n     * param _caller initial strategy function caller\n     * param _tokenIn token address sold\n     * param _tokenOut token address bought\n     * param _fee pool fee\n     * param _amountToPay amount to pay for the pool second token\n     * param _callData arbitrary data assigned with the flashswap call \n     * param _callSource function call source\n     */\n    function _strategyFlash(address /*_caller*/, address /*_tokenIn*/, address /*_tokenOut*/, uint24 /*_fee*/, uint256 /*_amountToPay*/, bytes memory _callData, uint8 _callSource) internal virtual {}\n    \n    /** \n    * @notice internal function for exact-in swap on uniswap (specify exact amount to pay)\n    * @param _amountIn amount of token to pay\n    * @param _recipient recipient for receive\n    * @param _sqrtPriceLimitX96 price limit\n    * @return amount of token bought (amountOut)\n    */\n    function _exactInputInternal(\n        uint256 _amountIn,\n        address _recipient,\n        uint160 _sqrtPriceLimitX96,\n        SwapCallbackData memory data\n    ) private returns (uint256) {\n        (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool();\n       \n        //uniswap token0 has a lower address than token1\n        //if tokenIn<tokenOut, we are selling an exact amount of token0 in exchange for token1\n        //zeroForOne determines which token is being sold and which is being bought\n        bool zeroForOne = tokenIn < tokenOut;\n\n        //swap on uniswap, including data to trigger call back for flashswap\n        (int256 amount0, int256 amount1) =\n            _getPool(tokenIn, tokenOut, fee).swap(\n                _recipient,\n                zeroForOne,\n                _amountIn.toInt256(),\n                _sqrtPriceLimitX96 == 0\n                    ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\n                    : _sqrtPriceLimitX96,\n                abi.encode(data)\n            );\n        \n        //determine the amountOut based on which token has a lower address\n        return uint256(-(zeroForOne ? amount1 : amount0));\n    }\n\n    /** \n    * @notice internal function for exact-out swap on uniswap (specify exact amount to receive)\n    * @param _amountOut amount of token to receive\n    * @param _recipient recipient for receive\n    * @param _sqrtPriceLimitX96 price limit\n    * @return amount of token sold (amountIn)\n    */\n    function _exactOutputInternal(\n        uint256 _amountOut,\n        address _recipient,\n        uint160 _sqrtPriceLimitX96,\n        SwapCallbackData memory data\n    ) private returns (uint256) {\n        (address tokenOut, address tokenIn, uint24 fee) = data.path.decodeFirstPool();\n\n        //uniswap token0 has a lower address than token1\n        //if tokenIn<tokenOut, we are buying an exact amount of token1 in exchange for token0\n        //zeroForOne determines which token is being sold and which is being bought\n        bool zeroForOne = tokenIn < tokenOut;\n        \n        //swap on uniswap, including data to trigger call back for flashswap\n        (int256 amount0Delta, int256 amount1Delta) =\n            _getPool(tokenIn, tokenOut, fee).swap(\n                _recipient,\n                zeroForOne,\n                -_amountOut.toInt256(),\n                _sqrtPriceLimitX96 == 0\n                    ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\n                    : _sqrtPriceLimitX96,\n                abi.encode(data)\n            );\n\n        //determine the amountIn and amountOut based on which token has a lower address\n        (uint256 amountIn, uint256 amountOutReceived) = zeroForOne\n            ? (uint256(amount0Delta), uint256(-amount1Delta))\n            : (uint256(amount1Delta), uint256(-amount0Delta));\n        // it's technically possible to not receive the full output amount,\n        // so if no price limit has been specified, require this possibility away\n        if (_sqrtPriceLimitX96 == 0) require(amountOutReceived == _amountOut);\n\n        return amountIn;\n    }\n\n    /** \n    * @notice returns the uniswap pool for the given token pair and fee\n    * @dev the pool contract may or may not exist\n    * @param tokenA address of first token \n    * @param tokenB address of second token \n    * @param fee fee tier for pool\n    */\n    function _getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) private view returns (IUniswapV3Pool) {\n        return IUniswapV3Pool(PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)));\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.0;\n\n/// @title Optimized overflow and underflow safe math operations\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\nlibrary LowGasSafeMath {\n    /// @notice Returns x + y, reverts if sum overflows uint256\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    /// @notice Returns x - y, reverts if underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    /// @notice Returns x * y, reverts if overflows\n    /// @param x The multiplicand\n    /// @param y The multiplier\n    /// @return z The product of x and y\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(x == 0 || (z = x * y) / x == y);\n    }\n\n    /// @notice Returns x + y, reverts if overflows or underflows\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x + y) >= x == (y >= 0));\n    }\n\n    /// @notice Returns x - y, reverts if overflows or underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x - y) <= x == (y >= 0));\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/Path.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport './BytesLib.sol';\n\n/// @title Functions for manipulating path data for multihop swaps\nlibrary Path {\n    using BytesLib for bytes;\n\n    /// @dev The length of the bytes encoded address\n    uint256 private constant ADDR_SIZE = 20;\n    /// @dev The length of the bytes encoded fee\n    uint256 private constant FEE_SIZE = 3;\n\n    /// @dev The offset of a single token address and pool fee\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\n    /// @dev The offset of an encoded pool key\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\n    /// @dev The minimum length of an encoding that contains 2 or more pools\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\n\n    /// @notice Returns true iff the path contains two or more pools\n    /// @param path The encoded swap path\n    /// @return True if path contains two or more pools, otherwise false\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\n    }\n\n    /// @notice Returns the number of pools in the path\n    /// @param path The encoded swap path\n    /// @return The number of pools in the path\n    function numPools(bytes memory path) internal pure returns (uint256) {\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\n    }\n\n    /// @notice Decodes the first pool in path\n    /// @param path The bytes encoded swap path\n    /// @return tokenA The first token of the given pool\n    /// @return tokenB The second token of the given pool\n    /// @return fee The fee level of the pool\n    function decodeFirstPool(bytes memory path)\n        internal\n        pure\n        returns (\n            address tokenA,\n            address tokenB,\n            uint24 fee\n        )\n    {\n        tokenA = path.toAddress(0);\n        fee = path.toUint24(ADDR_SIZE);\n        tokenB = path.toAddress(NEXT_OFFSET);\n    }\n\n    /// @notice Gets the segment corresponding to the first pool in the path\n    /// @param path The bytes encoded swap path\n    /// @return The segment containing all data necessary to target the first pool in the path\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\n        return path.slice(0, POP_OFFSET);\n    }\n\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\n    /// @param path The swap path\n    /// @return The remaining token + fee elements in the path\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n    /// @notice Cast a uint256 to a uint160, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\n        require((z = uint160(y)) == y);\n    }\n\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\n    /// @param y The int256 to be downcasted\n    /// @return z The downcasted integer, now type int128\n    function toInt128(int256 y) internal pure returns (int128 z) {\n        require((z = int128(y)) == y);\n    }\n\n    /// @notice Cast a uint256 to a int256, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt256(uint256 y) internal pure returns (int256 z) {\n        require(y < 2**255);\n        z = int256(y);\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.5.0 <0.8.0;\n\nlibrary BytesLib {\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    ) internal pure returns (bytes memory) {\n        require(_length + 31 >= _length, 'slice_overflow');\n        require(_start + _length >= _start, 'slice_overflow');\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n                case 0 {\n                    // Get a location of some free memory and store it in tempBytes as\n                    // Solidity does for memory variables.\n                    tempBytes := mload(0x40)\n\n                    // The first word of the slice result is potentially a partial\n                    // word read from the original array. To read it, we calculate\n                    // the length of that partial word and start copying that many\n                    // bytes into the array. The first word we copy will start with\n                    // data we don't care about, but the last `lengthmod` bytes will\n                    // land at the beginning of the contents of the new array. When\n                    // we're done copying, we overwrite the full first word with\n                    // the actual length of the slice.\n                    let lengthmod := and(_length, 31)\n\n                    // The multiplication in the next line is necessary\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\n                    // the following copy loop was copying the origin's length\n                    // and then ending prematurely not copying everything it should.\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                    let end := add(mc, _length)\n\n                    for {\n                        // The multiplication in the next line has the same exact purpose\n                        // as the one above.\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                    } lt(mc, end) {\n                        mc := add(mc, 0x20)\n                        cc := add(cc, 0x20)\n                    } {\n                        mstore(mc, mload(cc))\n                    }\n\n                    mstore(tempBytes, _length)\n\n                    //update free-memory pointer\n                    //allocating the array padded to 32 bytes like the compiler does now\n                    mstore(0x40, and(add(mc, 31), not(31)))\n                }\n                //if we want a zero-length slice let's just return a zero-length array\n                default {\n                    tempBytes := mload(0x40)\n                    //zero out the 32 bytes slice we are about to return\n                    //we need to do it because Solidity does not garbage collect\n                    mstore(tempBytes, 0)\n\n                    mstore(0x40, add(tempBytes, 0x20))\n                }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_start + 20 >= _start, 'toAddress_overflow');\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\n        require(_start + 3 >= _start, 'toUint24_overflow');\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\n        uint24 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x3), _start))\n        }\n\n        return tempUint;\n    }\n}\n"
    },
    "contracts/periphery/ShortHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity =0.7.6;\npragma abicoder v2;\n// Interfaces\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {IERC721Receiver} from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport {ISwapRouter} from \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\n\nimport {IWPowerPerp} from \"../interfaces/IWPowerPerp.sol\";\nimport {IWETH9} from \"../interfaces/IWETH9.sol\";\nimport {IShortPowerPerp} from \"../interfaces/IShortPowerPerp.sol\";\nimport {IController} from \"../interfaces/IController.sol\";\n\n// Libraries\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n/**\n * @notice contract simplifies opening a short wPowerPerp position by selling wPowerPerp on uniswap v3 and returning eth to user\n */\ncontract ShortHelper is IERC721Receiver, ReentrancyGuard {\n    using SafeMath for uint256;\n    using Address for address payable;\n\n    IController public immutable controller;\n    ISwapRouter public immutable router;\n    IWETH9 public immutable weth;\n    IShortPowerPerp public immutable shortPowerPerp;\n    address public immutable wPowerPerp;\n\n    /**\n     * @notice constructor for short helper\n     * @param _controllerAddr controller address for wPowerPerp\n     * @param _swapRouter uniswap v3 swap router address\n     * @param _wethAddr weth address\n     */\n    constructor(\n        address _controllerAddr,\n        address _swapRouter,\n        address _wethAddr\n    ) {\n        require(_controllerAddr != address(0), \"Invalid controller address\");\n        require(_swapRouter != address(0), \"Invalid swap router address\");\n        require(_wethAddr != address(0), \"Invalid weth address\");\n        IController _controller = IController(_controllerAddr);\n        router = ISwapRouter(_swapRouter);\n        wPowerPerp = _controller.wPowerPerp();\n        IWPowerPerp _wPowerPerp = IWPowerPerp(_controller.wPowerPerp());\n        IWETH9 _weth = IWETH9(_wethAddr);\n        _wPowerPerp.approve(_swapRouter, type(uint256).max);\n        _weth.approve(_swapRouter, type(uint256).max);\n\n        // assign immutable variables\n        shortPowerPerp = IShortPowerPerp(_controller.shortPowerPerp());\n        weth = _weth;\n        controller = _controller;\n    }\n\n    /**\n     * @notice mint power perp, trade with uniswap v3 and send back premium in eth\n     * @param _vaultId short wPowerPerp vault id\n     * @param _powerPerpAmount amount of powerPerp to mint/sell\n     * @param _uniNftId uniswap v3 position token id\n     */\n    function openShort(\n        uint256 _vaultId,\n        uint256 _powerPerpAmount,\n        uint256 _uniNftId,\n        ISwapRouter.ExactInputSingleParams memory _exactInputParams\n    ) external payable nonReentrant {\n        if (_vaultId != 0) require(shortPowerPerp.ownerOf(_vaultId) == msg.sender, \"Not allowed\");\n        require(\n            _exactInputParams.tokenOut == address(weth) && _exactInputParams.tokenIn == wPowerPerp,\n            \"Wrong swap tokens\"\n        );\n\n        (uint256 vaultId, uint256 wPowerPerpAmount) = controller.mintPowerPerpAmount{value: msg.value}(\n            _vaultId,\n            _powerPerpAmount,\n            _uniNftId\n        );\n        _exactInputParams.amountIn = wPowerPerpAmount;\n\n        uint256 amountOut = router.exactInputSingle(_exactInputParams);\n\n        // if the recipient is this address: unwrap eth and send back to msg.sender\n        if (_exactInputParams.recipient == address(this)) {\n            weth.withdraw(amountOut);\n            payable(msg.sender).sendValue(amountOut);\n        }\n\n        // this is a newly open vault, transfer to the user.\n        if (_vaultId == 0) shortPowerPerp.safeTransferFrom(address(this), msg.sender, vaultId);\n    }\n\n    /**\n     * @notice buy back wPowerPerp with eth on uniswap v3 and close position\n     * @param _vaultId short wPowerPerp vault id\n     * @param _wPowerPerpAmount amount of wPowerPerp to burn\n     * @param _withdrawAmount amount to withdraw\n     */\n    function closeShort(\n        uint256 _vaultId,\n        uint256 _wPowerPerpAmount,\n        uint256 _withdrawAmount,\n        ISwapRouter.ExactOutputSingleParams memory _exactOutputParams\n    ) external payable nonReentrant {\n        require(shortPowerPerp.ownerOf(_vaultId) == msg.sender, \"Not allowed\");\n        require(\n            _exactOutputParams.tokenOut == wPowerPerp && _exactOutputParams.tokenIn == address(weth),\n            \"Wrong swap tokens\"\n        );\n\n        // wrap eth to weth\n        weth.deposit{value: msg.value}();\n\n        // pay weth and get wPowerPerp in return.\n        uint256 amountIn = router.exactOutputSingle(_exactOutputParams);\n\n        controller.burnWPowerPerpAmount(_vaultId, _wPowerPerpAmount, _withdrawAmount);\n\n        // send back unused eth and withdrawn collateral\n        weth.withdraw(msg.value.sub(amountIn));\n        // no eth should be left in the contract, so we send it all back\n        payable(msg.sender).sendValue(address(this).balance);\n    }\n\n    /**\n     * @dev only receive eth from weth contract and controller.\n     */\n    receive() external payable {\n        require(msg.sender == address(weth) || msg.sender == address(controller), \"can't receive eth\");\n    }\n\n    /**\n     * @dev accept erc721 from safeTransferFrom and safeMint after callback\n     * @return returns received selector\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "contracts/mocks/MockUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.7.6;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ninterface IUniswapV3FlashCallback {\n    function uniswapV3FlashCallback(\n        uint256 fee0,\n        uint256 fee1,\n        bytes calldata data\n    ) external;\n}\n\ncontract MockUniswapV3Pool {\n    using SafeMath for uint256;\n\n    address public token0;\n    address public token1;\n    uint256 public fee;\n\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n    struct Slot0 {\n        // the current price\n        uint160 sqrtPriceX96;\n        // the current tick\n        int24 tick;\n        // the most-recently updated index of the observations array\n        uint16 observationIndex;\n        // the current maximum number of observations that are being stored\n        uint16 observationCardinality;\n        // the next maximum number of observations to store, triggered in observations.write\n        uint16 observationCardinalityNext;\n        // the current protocol fee as a percentage of the swap fee taken on withdrawal\n        // represented as an integer denominator (1/x)%\n        uint8 feeProtocol;\n        // whether the pool is locked\n        bool unlocked;\n    }\n\n    Slot0 public slot0;\n\n    function setPoolTokens(address _token0, address _token1) external {\n        token0 = _token0;\n        token1 = _token1;\n    }\n\n    function setSlot0Data(uint160 _sqrtPriceX96, int24 _tick) external {\n        slot0.sqrtPriceX96 = _sqrtPriceX96;\n        slot0.tick = _tick;\n    }\n\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external {\n        // uint128 _liquidity = liquidity;\n        // require(_liquidity > 0, 'L');\n\n        // uint256 fee0 = FullMath.mulDivRoundingUp(amount0, fee, 1e6);\n        // uint256 fee1 = FullMath.mulDivRoundingUp(amount1, fee, 1e6);\n        uint256 fee0 = 0;\n        uint256 fee1 = 0;\n\n        uint256 balance0Before = ERC20(token0).balanceOf(address(this));\n        uint256 balance1Before = ERC20(token1).balanceOf(address(this));\n\n        if (amount0 > 0) ERC20(token0).transfer(recipient, amount0);\n        if (amount1 > 0) ERC20(token1).transfer(recipient, amount1);\n\n        IUniswapV3FlashCallback(msg.sender).uniswapV3FlashCallback(fee0, fee1, data);\n\n        uint256 balance0After = ERC20(token0).balanceOf(address(this));\n        uint256 balance1After = ERC20(token1).balanceOf(address(this));\n\n        require(balance0Before.add(fee0) <= balance0After, \"F0\");\n        require(balance1Before.add(fee1) <= balance1After, \"F1\");\n    }\n\n    function computeAddress(\n        address, /*factory*/\n        PoolKey memory /*key*/\n    ) internal view returns (address pool) {\n        return address(this);\n    }\n}\n"
    },
    "contracts/mocks/MockController.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity =0.7.6;\n\nimport {IShortPowerPerp} from \"../interfaces/IShortPowerPerp.sol\";\nimport {IWPowerPerp} from \"../interfaces/IWPowerPerp.sol\";\n\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {VaultLib} from \"../libs/VaultLib.sol\";\n\ncontract MockController {\n    using SafeMath for uint256;\n    using VaultLib for VaultLib.Vault;\n    using Address for address payable;\n\n    uint256 internal constant secInDay = 86400;\n\n    address public quoteCurrency;\n    address public ethQuoteCurrencyPool;\n    uint256 public normalizationFactor;\n    uint256 public feeRate = 0;\n\n    /// @dev The token ID vault data\n    mapping(uint256 => VaultLib.Vault) public vaults;\n\n    IWPowerPerp public wPowerPerp;\n    IShortPowerPerp public shortPowerPerp;\n\n    function init(\n        address _shortPowerPerp,\n        address _wPowerPerp,\n        address _ethQuoteCurrencyPool,\n        address _quoteCurrency\n    ) public {\n        require(_shortPowerPerp != address(0), \"C5\");\n        require(_wPowerPerp != address(0), \"Invalid wPowerPerp address\");\n\n        shortPowerPerp = IShortPowerPerp(_shortPowerPerp);\n        wPowerPerp = IWPowerPerp(_wPowerPerp);\n        ethQuoteCurrencyPool = _ethQuoteCurrencyPool;\n        quoteCurrency = _quoteCurrency;\n\n        normalizationFactor = 1e18;\n    }\n\n    function mintWPowerPerpAmount(\n        uint256 _vaultId,\n        uint256 _mintAmount,\n        uint256 /*_nftTokenId*/\n    ) external payable returns (uint256, uint256) {\n        uint256 wPowerPerpMinted;\n\n        if (_vaultId == 0) _vaultId = _openVault(msg.sender);\n        if (msg.value > 0) _addEthCollateral(_vaultId, msg.value);\n        if (_mintAmount > 0) {\n            wPowerPerpMinted = _addShort(msg.sender, _vaultId, _mintAmount);\n        }\n\n        return (_vaultId, wPowerPerpMinted);\n    }\n\n    function burnWPowerPerpAmount(\n        uint256 _vaultId,\n        uint256 _amount,\n        uint256 _withdrawAmount\n    ) external {\n        if (_amount > 0) _removeShort(msg.sender, _vaultId, _amount);\n        if (_withdrawAmount > 0) _withdrawCollateral(msg.sender, _vaultId, _withdrawAmount);\n        if (_withdrawAmount > 0) payable(msg.sender).sendValue(_withdrawAmount);\n    }\n\n    function _openVault(address _recipient) internal returns (uint256) {\n        uint256 vaultId = shortPowerPerp.mintNFT(_recipient);\n        vaults[vaultId] = VaultLib.Vault({\n            NftCollateralId: 0,\n            collateralAmount: 0,\n            shortAmount: 0,\n            operator: address(0)\n        });\n\n        return vaultId;\n    }\n\n    function _addEthCollateral(uint256 _vaultId, uint256 _amount) internal {\n        VaultLib.Vault memory cachedVault = vaults[_vaultId];\n        cachedVault.addEthCollateral(uint128(_amount));\n        vaults[_vaultId] = cachedVault;\n    }\n\n    function _withdrawCollateral(\n        address, /*_account*/\n        uint256 _vaultId,\n        uint256 _amount\n    ) internal {\n        VaultLib.Vault memory cachedVault = vaults[_vaultId];\n        cachedVault.removeEthCollateral(_amount);\n        vaults[_vaultId] = cachedVault;\n    }\n\n    function _addShort(\n        address _account,\n        uint256 _vaultId,\n        uint256 _wPowerPerpAmount\n    ) internal returns (uint256 amountToMint) {\n        require(_canModifyVault(_vaultId, _account), \"C3\");\n\n        amountToMint = _wPowerPerpAmount.mul(1e18).div(normalizationFactor);\n\n        VaultLib.Vault memory cachedVault = vaults[_vaultId];\n        cachedVault.addShort(amountToMint);\n        vaults[_vaultId] = cachedVault;\n\n        wPowerPerp.mint(_account, amountToMint);\n    }\n\n    function _removeShort(\n        address _account,\n        uint256 _vaultId,\n        uint256 _amount\n    ) internal {\n        VaultLib.Vault memory cachedVault = vaults[_vaultId];\n        cachedVault.removeShort(_amount);\n        vaults[_vaultId] = cachedVault;\n\n        wPowerPerp.burn(_account, _amount);\n    }\n\n    function _canModifyVault(uint256 _vaultId, address _account) internal view returns (bool) {\n        return shortPowerPerp.ownerOf(_vaultId) == _account || vaults[_vaultId].operator == _account;\n    }\n\n    function getExpectedNormalizationFactor() external view returns (uint256) {\n        return normalizationFactor;\n    }\n}\n"
    },
    "contracts/test/VaultTester.sol": {
      "content": "//SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity =0.7.6;\n\nimport {VaultLib} from \"../libs/VaultLib.sol\";\nimport \"@uniswap/v3-periphery/contracts/base/LiquidityManagement.sol\";\n\ncontract VaultLibTester {\n\n  function getUniPositionBalances(\n      address _positionManager,\n      uint256 _tokenId,\n      int24 _wPowerPerpPoolTick,\n      bool _isWethToken0\n    ) external view returns (uint256 ethAmount, uint256 wPowerPerpAmount) {\n        return VaultLib._getUniPositionBalances(_positionManager, _tokenId, _wPowerPerpPoolTick, _isWethToken0);\n    }\n\n  /**\n   * expose this function so it's easier to test vault lib.\n   */\n  function getLiquidity(\n    uint160 sqrtRatioX96,\n    int24 tickA,\n    int24 tickB,\n    uint256 amount0Desired,\n    uint256 amount1Desired\n  ) external pure returns (uint128 liquidity) {\n\n    uint160 sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(tickA);\n    uint160 sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(tickB);\n\n    liquidity = LiquidityAmounts.getLiquidityForAmounts(\n        sqrtRatioX96,\n        sqrtRatioAX96,\n        sqrtRatioBX96,\n        amount0Desired,\n        amount1Desired\n    );\n  }\n\n  function getLiquidityForAmount0(\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    uint256 amount0\n  ) external pure returns (uint128 liquidity) {\n\n    // uint160 sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(tickA);\n    // uint160 sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(tickB);\n\n    return LiquidityAmounts.getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\n  }\n\n  function getLiquidityForAmount1(\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    uint256 amount1\n  ) external pure returns (uint128 liquidity) {\n    // uint160 sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(tickA);\n    // uint160 sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(tickB);\n\n    return LiquidityAmounts.getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\n  }\n\n  function getAmountsForLiquidity(\n    uint160 sqrtRatioX96,\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    uint128 liquidity\n  ) external pure returns (uint256 amount0, uint256 amount1) {\n    return LiquidityAmounts.getAmountsForLiquidity(\n      sqrtRatioX96,\n      sqrtRatioAX96,\n      sqrtRatioBX96,\n      liquidity\n    );\n  }\n}"
    },
    "contracts/test/ControllerTester.sol": {
      "content": "//SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity =0.7.6;\n\nimport {IController} from \"../interfaces/IController.sol\";\n\n/**\n* use this contract to confirm that funding is not charged twice if called in same block\n */\ncontract ControllerTester{\n\n  IController controller;\n\n  constructor(address _controller) {\n    controller = IController(_controller);\n  }\n\n  function testDoubleFunding() external {\n    controller.applyFunding();\n    uint256 normalizationFactor1 = controller.getExpectedNormalizationFactor();\n    controller.applyFunding();\n    uint256 normalizationFactor2 = controller.getExpectedNormalizationFactor();\n    require(normalizationFactor1==normalizationFactor2, \"funding charged twice\");\n  }\n}"
    },
    "contracts/core/ShortPowerPerp.sol": {
      "content": "//SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.7.6;\n\n//contract\nimport {ERC721} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport {Initializable} from \"@openzeppelin/contracts/proxy/Initializable.sol\";\nimport {IController} from \"../interfaces/IController.sol\";\n\n/**\n * @notice ERC721 NFT representing ownership of a vault (short position)\n */\ncontract ShortPowerPerp is ERC721, Initializable {\n    /// @dev tokenId for the next vault opened\n    uint256 public nextId = 1;\n\n    address public controller;\n    address private immutable deployer;\n\n    modifier onlyController() {\n        require(msg.sender == controller, \"Not controller\");\n        _;\n    }\n\n    /**\n     * @notice short power perpetual constructor\n     * @param _name token name for ERC721\n     * @param _symbol token symbol for ERC721\n     */\n    constructor(string memory _name, string memory _symbol) ERC721(_name, _symbol) {\n        deployer = msg.sender;\n    }\n\n    /**\n     * @notice initialize short contract\n     * @param _controller controller address\n     */\n    function init(address _controller) public initializer {\n        require(msg.sender == deployer, \"Invalid caller of init\");\n        require(_controller != address(0), \"Invalid controller address\");\n        controller = _controller;\n    }\n\n    /**\n     * @notice mint new NFT\n     * @dev autoincrement tokenId starts at 1\n     * @param _recipient recipient address for NFT\n     */\n    function mintNFT(address _recipient) external onlyController returns (uint256 tokenId) {\n        // mint NFT\n        _safeMint(_recipient, (tokenId = nextId++));\n    }\n\n    function _beforeTokenTransfer(\n        address, /* from */\n        address, /* to */\n        uint256 tokenId\n    ) internal override {\n        IController(controller).updateOperator(tokenId, address(0));\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\nimport \"../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !Address.isContract(address(this));\n    }\n}\n"
    },
    "contracts/core/WPowerPerp.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.7.6;\n\n//interface\nimport {IWPowerPerp} from \"../interfaces/IWPowerPerp.sol\";\n\n//contract\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {Initializable} from \"@openzeppelin/contracts/proxy/Initializable.sol\";\n\n/**\n * @notice ERC20 Token representing wrapped long power perpetual position\n * @dev value of power perpetual is expected to go down over time through the impact of funding\n */\ncontract WPowerPerp is ERC20, Initializable, IWPowerPerp {\n    address public controller;\n    address private immutable deployer;\n\n    /**\n     * @notice long power perpetual constructor\n     * @param _name token name for ERC20\n     * @param _symbol token symbol for ERC20\n     */\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\n        deployer = msg.sender;\n    }\n\n    modifier onlyController() {\n        require(msg.sender == controller, \"Not controller\");\n        _;\n    }\n\n    /**\n     * @notice init wPowerPerp contract\n     * @param _controller controller address\n     */\n    function init(address _controller) external initializer {\n        require(msg.sender == deployer, \"Invalid caller of init\");\n        require(_controller != address(0), \"Invalid controller address\");\n        controller = _controller;\n    }\n\n    /**\n     * @notice mint wPowerPerp\n     * @param _account account to mint to\n     * @param _amount amount to mint\n     */\n    function mint(address _account, uint256 _amount) external override onlyController {\n        _mint(_account, _amount);\n    }\n\n    /**\n     * @notice burn wPowerPerp\n     * @param _account account to burn from\n     * @param _amount amount to burn\n     */\n    function burn(address _account, uint256 _amount) external override onlyController {\n        _burn(_account, _amount);\n    }\n}\n"
    },
    "contracts/test/ControllerAccessTester.sol": {
      "content": "//SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity =0.7.6;\n\nimport {IShortPowerPerp} from \"../interfaces/IShortPowerPerp.sol\";\n\n/**\n * use this contract to check that controller has correct access control to mint NFTs\n * a testing contract is necessary as the before transfer hook calls updateOperator\n */\ncontract ControllerAccessTester{\n    \n    IShortPowerPerp shortPowerPerp;\n\n    constructor(address _shortPowerPerp) {\n        shortPowerPerp = IShortPowerPerp(_shortPowerPerp);\n    }\n    \n    function mintTest(address _address) external returns (uint256) {\n        return shortPowerPerp.mintNFT(_address);\n    }\n\n    function updateOperator(uint256 _tokenId, address _operator) external {\n\n    }\n}"
    },
    "contracts/import/Uni.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity =0.7.6;\n\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\";\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\nimport \"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\";\nimport \"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\";\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\n\ncontract Uni {\n    // hack: force hardhat to import all the interfaces at compile time\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Quoter Interface\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\ninterface IQuoter {\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\n    /// @param amountIn The amount of the first token to swap\n    /// @return amountOut The amount of the last token that would be received\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\n\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n    /// @param tokenIn The token being swapped in\n    /// @param tokenOut The token being swapped out\n    /// @param fee The fee of the token pool to consider for the pair\n    /// @param amountIn The desired input amount\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountOut The amount of `tokenOut` that would be received\n    function quoteExactInputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountIn,\n        uint160 sqrtPriceLimitX96\n    ) external returns (uint256 amountOut);\n\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n    /// @param amountOut The amount of the last token to receive\n    /// @return amountIn The amount of first token required to be paid\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\n\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n    /// @param tokenIn The token being swapped in\n    /// @param tokenOut The token being swapped out\n    /// @param fee The fee of the token pool to consider for the pair\n    /// @param amountOut The desired output amount\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\n    function quoteExactOutputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountOut,\n        uint160 sqrtPriceLimitX96\n    ) external returns (uint256 amountIn);\n}\n"
    },
    "contracts/mocks/MockWSqueeth.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.7.6;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockWPowerPerp is ERC20 {\n    address public controller;\n\n    constructor() ERC20(\"Wrapped Power Perp\", \"WPowerPerp\") {}\n\n    function mint(address _account, uint256 _amount) external {\n        _mint(_account, _amount);\n    }\n\n    function burn(address _account, uint256 _amount) external {\n        _burn(_account, _amount);\n    }\n}\n"
    },
    "contracts/mocks/MockErc20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.7.6;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockErc20 is ERC20 {\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) ERC20(_name, _symbol) {\n        _setupDecimals(_decimals);\n    }\n\n    function mint(address _account, uint256 _amount) external {\n        _mint(_account, _amount);\n    }\n\n    function burn(address _account, uint256 _amount) external {\n        _burn(_account, _amount);\n    }\n}\n"
    },
    "contracts/test/CastingTester.sol": {
      "content": "//SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity =0.7.6;\n\nimport {Uint256Casting} from \"../libs/Uint256Casting.sol\";\n\ncontract CastingTester{    \n    using Uint256Casting for uint256;\n\n    function testToUint128(uint256 y) external pure returns (uint128 z) {\n        return y.toUint128();\n    }\n\n    function testToUint96(uint256 y) external pure returns (uint96 z) {\n        return y.toUint96();\n    }\n\n    function testToUint32(uint256 y) external pure returns (uint32 z) {\n        return y.toUint32();\n    }\n}"
    },
    "contracts/test/ABDKTester.sol": {
      "content": "// SPDX-License-Identifier: BSD-4-Clause\n/*\n * ABDK Math 64.64 Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\n * Copyright (c) 2019, ABDK Consulting\n *\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * All advertising materials mentioning features or use of this software must display the following acknowledgement: This product includes software developed by ABDK Consulting.\n * Neither the name of ABDK Consulting nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * THIS SOFTWARE IS PROVIDED BY ABDK CONSULTING ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL ABDK CONSULTING BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n \npragma solidity =0.7.6;\n\nimport {ABDKMath64x64} from \"../libs/ABDKMath64x64.sol\";\n\ncontract ABDKTester{    \n    using ABDKMath64x64 for int128;\n    using ABDKMath64x64 for uint256;\n\n    function testMul(int128 x, int128 y) external pure returns (int128 z) {\n        return x.mul(y);\n    }\n    \n    function testNegMul(int128 x, int128 y) external pure returns (int128 z) {\n        return -x.mul(y);\n    }\n\n    function testMulu(int128 x, uint256 y) external pure returns (uint256 z) {\n        return x.mulu(y);\n    }\n    function testDivu(uint256 x, uint256 y) external pure returns (int128 z) {\n        return x.divu(y);\n    }\n    function testLog_2(int128 x) external pure returns (int128 z) {\n        return x.log_2();\n    }\n    function testExp_2(int128 x) external pure returns (int128 z) {\n        return x.exp_2();\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 825
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}