{
  "address": "0x2F55e27E669F070dEf7B5771dB72f6B31A6d4df8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_crab",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositedERC20",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositedEthAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "crabAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "returnedEth",
          "type": "uint256"
        }
      ],
      "name": "FlashDepositERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawnERC20",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnEthAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "crabAmount",
          "type": "uint256"
        }
      ],
      "name": "FlashWithdrawERC20",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "crab",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ethToDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minEthToGet",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "_erc20Fee",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "_wPowerPerpFee",
          "type": "uint24"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        }
      ],
      "name": "flashDepositERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_crabAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxEthToPay",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "_erc20Fee",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "_wPowerPerpFee",
          "type": "uint24"
        }
      ],
      "name": "flashWithdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x582ac5cda021ecbb192d220bb58e57eef87fc2b95cc69d10cf8887bd2d4e8a90",
  "receipt": {
    "to": null,
    "from": "0xf60eb02594AbB75b2e0FA4b2aA28b0691D8db775",
    "contractAddress": "0x2F55e27E669F070dEf7B5771dB72f6B31A6d4df8",
    "transactionIndex": 84,
    "gasUsed": "821234",
    "logsBloom": "0x
    "blockHash": "0x4956b136e7f28c2736a3ea6f258165ede70c20ce6e0dd367ba583f2cbb77956a",
    "transactionHash": "0x582ac5cda021ecbb192d220bb58e57eef87fc2b95cc69d10cf8887bd2d4e8a90",
    "logs": [],
    "blockNumber": 15765940,
    "cumulativeGasUsed": "9883060",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3B960E47784150F5a63777201ee2B15253D713e8",
    "0xE592427A0AEce92De3Edee1F18E0157C05861564"
  ],
  "solcInputHash": "c53867cdbf46138ab42de1c7a1689875",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crab\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositedERC20\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositedEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"crabAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnedEth\",\"type\":\"uint256\"}],\"name\":\"FlashDepositERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawnERC20\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"crabAmount\",\"type\":\"uint256\"}],\"name\":\"FlashWithdrawERC20\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"crab\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethToDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minEthToGet\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_erc20Fee\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_wPowerPerpFee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"}],\"name\":\"flashDepositERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_crabAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxEthToPay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_erc20Fee\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_wPowerPerpFee\",\"type\":\"uint24\"}],\"name\":\"flashWithdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Opyn team\",\"details\":\"CrabHelper contract\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_crab\":\"address of crabV2 contract\",\"_swapRouter\":\"address of Uniswap swap router\"}},\"flashDepositERC20(uint256,uint256,uint256,uint24,uint24,address)\":{\"params\":{\"_amountIn\":\"amount of ERC20 token to swap for weth\",\"_erc20Fee\":\"pool fee for transfer ERC20/eth pool (3000 = 30bps)\",\"_ethToDeposit\":\"amount of ETH to deposit\",\"_minEthToGet\":\"min amount of ETH to receive in the swap\",\"_tokenIn\":\"ERC20 token to pay\",\"_wPowerPerpFee\":\"pool fee for wPowerPerp/eth pool (3000 = 30bps)\"}},\"flashWithdrawERC20(uint256,uint256,address,uint256,uint24,uint24)\":{\"params\":{\"_crabAmount\":\"amount of crab shares to withdraw\",\"_erc20Fee\":\"pool fee for transfer ERC20/eth pool (3000 = 30bps)\",\"_maxEthToPay\":\"max eth to pay in swap for wPowerPerp\",\"_minAmountOut\":\"min amount of ERC20 to receive\",\"_tokenOut\":\"ERC20 token to receive\",\"_wPowerPerpFee\":\"pool fee for wPowerPerp/eth pool (3000 = 30bps)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"constructor\"},\"flashDepositERC20(uint256,uint256,uint256,uint24,uint24,address)\":{\"notice\":\"allows user to flash deposit into crab from an aribtrary ERC20\"},\"flashWithdrawERC20(uint256,uint256,address,uint256,uint24,uint24)\":{\"notice\":\"allows user to flash withdraw from crab to an aribtrary ERC20\"}},\"notice\":\"Contract for Crab helper functions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategy/CrabHelper.sol\":\"CrabHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1153f6dd334c01566417b8c551122450542a2b75a2bbb379d59a8c320ed6da28\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ICrabStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.7.6;\\n\\npragma abicoder v2;\\n\\ninterface ICrabStrategyV2 {\\n    function wPowerPerp() external view returns (address);\\n\\n    function weth() external view returns (address);\\n\\n    function flashDeposit(uint256 _ethToDeposit, uint24 _poolFee) external payable;\\n\\n    function flashWithdraw(\\n        uint256 _crabAmount,\\n        uint256 _maxEthToPay,\\n        uint24 _poolFee\\n    ) external;\\n}\\n\",\"keccak256\":\"0xabf84430d693a3a3ef9c04147da7c26f9698fdbb14abeab60a6ec1c8f24cbeab\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH9 is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x78be70880c9ec22c35cf595377416bb25960936fee1b0fff06e415bda1b5e64b\",\"license\":\"MIT\"},\"contracts/strategy/CrabHelper.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.7.6;\\n\\nimport {ICrabStrategyV2} from \\\"../interfaces/ICrabStrategyV2.sol\\\";\\nimport {IWETH9} from \\\"../interfaces/IWETH9.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {StrategySwap} from \\\"./helper/StrategySwap.sol\\\";\\n\\n/**\\n * @dev CrabHelper contract\\n * @notice Contract for Crab helper functions\\n * @author Opyn team\\n */\\ncontract CrabHelper is StrategySwap, ReentrancyGuard {\\n    using Address for address payable;\\n\\n    address public immutable crab;\\n    address public immutable weth;\\n\\n    event FlashDepositERC20(\\n        address indexed depositor,\\n        address depositedERC20,\\n        uint256 depositedAmount,\\n        uint256 depositedEthAmount,\\n        uint256 crabAmount,\\n        uint256 returnedEth\\n    );\\n\\n    event FlashWithdrawERC20(\\n        address indexed withdrawer,\\n        address withdrawnERC20,\\n        uint256 withdrawnAmount,\\n        uint256 withdrawnEthAmount,\\n        uint256 crabAmount\\n    );\\n\\n    /**\\n     * @notice constructor\\n     * @param _crab address of crabV2 contract\\n     * @param _swapRouter address of Uniswap swap router\\n     */\\n    constructor(address _crab, address _swapRouter) StrategySwap(_swapRouter) {\\n        require(_crab != address(0), \\\"Invalid crab address\\\");\\n\\n        crab = _crab;\\n        weth = ICrabStrategyV2(_crab).weth();\\n    }\\n\\n    /**\\n     * @notice allows user to flash deposit into crab from an aribtrary ERC20\\n     * @param _ethToDeposit amount of ETH to deposit\\n     * @param _amountIn amount of ERC20 token to swap for weth\\n     * @param _minEthToGet min amount of ETH to receive in the swap\\n     * @param _erc20Fee pool fee for transfer ERC20/eth pool (3000 = 30bps)\\n     * @param _wPowerPerpFee pool fee for wPowerPerp/eth pool (3000 = 30bps)\\n     * @param _tokenIn ERC20 token to pay\\n     */\\n    function flashDepositERC20(\\n        uint256 _ethToDeposit,\\n        uint256 _amountIn,\\n        uint256 _minEthToGet,\\n        uint24 _erc20Fee,\\n        uint24 _wPowerPerpFee,\\n        address _tokenIn\\n    ) external nonReentrant {\\n        _swapExactInputSingle(_tokenIn, weth, msg.sender, address(this), _amountIn, _minEthToGet, _erc20Fee);\\n\\n        IWETH9(weth).withdraw(IWETH9(weth).balanceOf(address(this)));\\n        ICrabStrategyV2(crab).flashDeposit{value: address(this).balance}(_ethToDeposit, _wPowerPerpFee);\\n\\n        uint256 crabAmount = IERC20(crab).balanceOf(address(this));\\n\\n        emit FlashDepositERC20(msg.sender, _tokenIn, _amountIn, _ethToDeposit, crabAmount, address(this).balance);\\n\\n        IERC20(crab).transfer(msg.sender, crabAmount);\\n\\n        if (address(this).balance > 0) {\\n            payable(msg.sender).sendValue(address(this).balance);\\n        }\\n    }\\n\\n    /**\\n     * @notice allows user to flash withdraw from crab to an aribtrary ERC20\\n     * @param _crabAmount amount of crab shares to withdraw\\n     * @param _maxEthToPay max eth to pay in swap for wPowerPerp\\n     * @param _tokenOut ERC20 token to receive\\n     * @param _minAmountOut min amount of ERC20 to receive\\n     * @param _erc20Fee pool fee for transfer ERC20/eth pool (3000 = 30bps)\\n     * @param _wPowerPerpFee pool fee for wPowerPerp/eth pool (3000 = 30bps)\\n     */\\n    function flashWithdrawERC20(\\n        uint256 _crabAmount,\\n        uint256 _maxEthToPay,\\n        address _tokenOut,\\n        uint256 _minAmountOut,\\n        uint24 _erc20Fee,\\n        uint24 _wPowerPerpFee\\n    ) external nonReentrant {\\n        IERC20(crab).transferFrom(msg.sender, address(this), _crabAmount);\\n\\n        ICrabStrategyV2(crab).flashWithdraw(_crabAmount, _maxEthToPay, _wPowerPerpFee);\\n\\n        uint256 ethBalance = address(this).balance;\\n        IWETH9(weth).deposit{value: ethBalance}();\\n        uint256 tokenReceived = _swapExactInputSingle(\\n            weth,\\n            _tokenOut,\\n            address(this),\\n            msg.sender,\\n            ethBalance,\\n            _minAmountOut,\\n            _erc20Fee\\n        );\\n\\n        emit FlashWithdrawERC20(msg.sender, _tokenOut, tokenReceived, ethBalance, _crabAmount);\\n    }\\n\\n    /**\\n     * @notice receive function to allow ETH transfer to this contract\\n     */\\n    receive() external payable {\\n        require(msg.sender == weth || msg.sender == crab, \\\"Cannot receive eth\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4775406a9d21e895ccc6b03f91263810aa4a000cf573cb8883f3500d826e911e\",\"license\":\"BUSL-1.1\"},\"contracts/strategy/helper/StrategySwap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract StrategySwap {\\n    ISwapRouter public immutable swapRouter;\\n\\n    constructor(address _swapRouter) {\\n        require(_swapRouter != address(0), \\\"invalid swap router address\\\");\\n        swapRouter = ISwapRouter(_swapRouter);\\n    }\\n\\n    /**\\n     * @notice swapExactInputSingle swaps a given amount of tokenIn for a maximum possible amount of tokenOut\\n     * @dev The calling address must approve this contract to spend at least `amountIn` worth of its tokenIn for this function to succeed.\\n     * @param _tokenIn token address to sell\\n     * @param _tokenOut token address to receive\\n     * @param _from from which user we are selling\\n     * @param _to Recipient to get the tokens\\n     * @param _amountIn Exact amount to sell\\n     * @param _minAmountOut Minimum amount to be paid\\n     * @param _fee pool fee\\n     * @return amountOut The amount of WETH9 received.\\n     */\\n    function _swapExactInputSingle(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        uint24 _fee\\n    ) internal returns (uint256 amountOut) {\\n        // _from must approve this contract\\n\\n        // Transfer the specified amount of tokenIn to this contract.\\n        IERC20(_tokenIn).transferFrom(_from, address(this), _amountIn);\\n\\n        // Approve the router to spend tokenIn.\\n        IERC20(_tokenIn).approve(address(swapRouter), _amountIn);\\n\\n        // We also set the sqrtPriceLimitx96 to be 0 to ensure we swap our exact input amount.\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n            tokenIn: _tokenIn,\\n            tokenOut: _tokenOut,\\n            fee: _fee,\\n            recipient: _to,\\n            deadline: block.timestamp,\\n            amountIn: _amountIn,\\n            amountOutMinimum: _minAmountOut,\\n            sqrtPriceLimitX96: 0\\n        });\\n\\n        // The call to `exactInputSingle` executes the swap.\\n        amountOut = swapRouter.exactInputSingle(params);\\n    }\\n}\\n\",\"keccak256\":\"0x06b92720043fa9d2999d0d895ee3d058999a297e97b592a5d61ad00d09051e24\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b50604051610f84380380610f848339818101604052604081101561003357600080fd5b508051602090910151806001600160a01b03811661006c5760405162461bcd60e51b815260040161006390610176565b60405180910390fd5b60601b6001600160601b03191660805260016000556001600160a01b0382166100dc576040805162461bcd60e51b815260206004820152601460248201527f496e76616c696420637261622061646472657373000000000000000000000000604482015290519081900360640190fd5b816001600160a01b031660a0816001600160a01b031660601b81525050816001600160a01b0316633fc8cef36040518163ffffffff1660e01b815260040160206040518083038186803b15801561013257600080fd5b505afa158015610146573d6000803e3d6000fd5b505050506040513d602081101561015c57600080fd5b505160601b6001600160601b03191660c052506101ad9050565b6020808252601b908201527f696e76616c6964207377617020726f7574657220616464726573730000000000604082015260600190565b60805160601c60a05160601c60c05160601c610d6361022160003980606e52806103c3528061043c52806104cc528061057552806105bf52508060a052806102b4528061035d52806104f052806106a9528061073752806108505250806108e452806109b05280610a8a5250610d636000f3fe60806040526004361061005e5760003560e01c80634285512d116100435780634285512d146101a3578063bca4f628146101b8578063c31c9c071461021357610115565b806302c6600c1461011a5780633fc8cef31461017257610115565b3661011557336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806100c25750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b610113576040805162461bcd60e51b815260206004820152601260248201527f43616e6e6f742072656365697665206574680000000000000000000000000000604482015290519081900360640190fd5b005b600080fd5b34801561012657600080fd5b50610113600480360360c081101561013d57600080fd5b508035906020810135906001600160a01b036040820135169060608101359062ffffff608082013581169160a0013516610228565b34801561017e57600080fd5b506101876104ca565b604080516001600160a01b039092168252519081900360200190f35b3480156101af57600080fd5b506101876104ee565b3480156101c457600080fd5b50610113600480360360c08110156101db57600080fd5b50803590602081013590604081013590606081013562ffffff9081169160808101359091169060a001356001600160a01b0316610512565b34801561021f57600080fd5b506101876108e2565b60026000541415610280576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000908155604080516323b872dd60e01b81523360048201523060248201526044810189905290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016926323b872dd92606480820193602093909283900390910190829087803b1580156102fe57600080fd5b505af1158015610312573d6000803e3d6000fd5b505050506040513d602081101561032857600080fd5b505060408051630b52b7ff60e41b8152600481018890526024810187905262ffffff8316604482015290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163b52b7ff091606480830192600092919082900301818387803b1580156103a457600080fd5b505af11580156103b8573d6000803e3d6000fd5b5050505060004790507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561041c57600080fd5b505af1158015610430573d6000803e3d6000fd5b505050505060006104667f0000000000000000000000000000000000000000000000000000000000000000873033868a8a610906565b604080516001600160a01b038916815260208101839052808201859052606081018b9052905191925033917f614f663be393aac8fd2c2993040a634f5b013b3d5f418cc59ad013e96eef53f99181900360800190a250506001600055505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002600054141561056a576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260005561059e817f00000000000000000000000000000000000000000000000000000000000000003330898989610906565b50604080516370a0823160e01b815230600482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691632e1a7d4d9183916370a08231916024808301926020929190829003018186803b15801561060d57600080fd5b505afa158015610621573d6000803e3d6000fd5b505050506040513d602081101561063757600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b168152600481019290925251602480830192600092919082900301818387803b15801561068f57600080fd5b505af11580156106a3573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc5b73ff4788856040518463ffffffff1660e01b8152600401808381526020018262ffffff168152602001925050506000604051808303818588803b15801561071a57600080fd5b505af115801561072e573d6000803e3d6000fd5b505050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156107a257600080fd5b505afa1580156107b6573d6000803e3d6000fd5b505050506040513d60208110156107cc57600080fd5b5051604080516001600160a01b0385168152602081018990528082018a905260608101839052476080820152905191925033917fc723e34ef5da33ff97116afe67fb4330d3189467330363a49eb6c9d2fd762a8c9181900360a00190a26040805163a9059cbb60e01b81523360048201526024810183905290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a9059cbb9160448083019260209291908290030181600087803b15801561089857600080fd5b505af11580156108ac573d6000803e3d6000fd5b505050506040513d60208110156108c257600080fd5b505047156108d4576108d43347610b1e565b505060016000555050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516323b872dd60e01b81526000906001600160a01b038916906323b872dd9061093990899030908990600401610c47565b602060405180830381600087803b15801561095357600080fd5b505af1158015610967573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098b9190610c08565b5060405163095ea7b360e01b81526001600160a01b0389169063095ea7b3906109da907f0000000000000000000000000000000000000000000000000000000000000000908890600401610c6b565b602060405180830381600087803b1580156109f457600080fd5b505af1158015610a08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2c9190610c08565b5060408051610100810182526001600160a01b03808b168252898116602083015262ffffff851682840152878116606083015242608083015260a0820187905260c08201869052600060e0830152915163414bf38960e01b815290917f0000000000000000000000000000000000000000000000000000000000000000169063414bf38990610abf908490600401610c84565b602060405180830381600087803b158015610ad957600080fd5b505af1158015610aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b119190610c2f565b9998505050505050505050565b80471015610b73576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114610bbe576040519150601f19603f3d011682016040523d82523d6000602084013e610bc3565b606091505b5050905080610c035760405162461bcd60e51b815260040180806020018281038252603a815260200180610cf4603a913960400191505060405180910390fd5b505050565b600060208284031215610c19578081fd5b81518015158114610c28578182fd5b9392505050565b600060208284031215610c40578081fd5b5051919050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6000610100820190506001600160a01b0380845116835280602085015116602084015262ffffff60408501511660408401528060608501511660608401526080840151608084015260a084015160a084015260c084015160c08401528060e08501511660e0840152509291505056fe416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564a2646970667358221220fcd43e471a4f1be2f1f1ccf4169e3d06484dd0cc15e022ffbfc5207a7fbbdf4664736f6c63430007060033",
  "deployedBytecode": "0x60806040526004361061005e5760003560e01c80634285512d116100435780634285512d146101a3578063bca4f628146101b8578063c31c9c071461021357610115565b806302c6600c1461011a5780633fc8cef31461017257610115565b3661011557336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806100c25750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b610113576040805162461bcd60e51b815260206004820152601260248201527f43616e6e6f742072656365697665206574680000000000000000000000000000604482015290519081900360640190fd5b005b600080fd5b34801561012657600080fd5b50610113600480360360c081101561013d57600080fd5b508035906020810135906001600160a01b036040820135169060608101359062ffffff608082013581169160a0013516610228565b34801561017e57600080fd5b506101876104ca565b604080516001600160a01b039092168252519081900360200190f35b3480156101af57600080fd5b506101876104ee565b3480156101c457600080fd5b50610113600480360360c08110156101db57600080fd5b50803590602081013590604081013590606081013562ffffff9081169160808101359091169060a001356001600160a01b0316610512565b34801561021f57600080fd5b506101876108e2565b60026000541415610280576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000908155604080516323b872dd60e01b81523360048201523060248201526044810189905290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016926323b872dd92606480820193602093909283900390910190829087803b1580156102fe57600080fd5b505af1158015610312573d6000803e3d6000fd5b505050506040513d602081101561032857600080fd5b505060408051630b52b7ff60e41b8152600481018890526024810187905262ffffff8316604482015290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163b52b7ff091606480830192600092919082900301818387803b1580156103a457600080fd5b505af11580156103b8573d6000803e3d6000fd5b5050505060004790507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561041c57600080fd5b505af1158015610430573d6000803e3d6000fd5b505050505060006104667f0000000000000000000000000000000000000000000000000000000000000000873033868a8a610906565b604080516001600160a01b038916815260208101839052808201859052606081018b9052905191925033917f614f663be393aac8fd2c2993040a634f5b013b3d5f418cc59ad013e96eef53f99181900360800190a250506001600055505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002600054141561056a576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260005561059e817f00000000000000000000000000000000000000000000000000000000000000003330898989610906565b50604080516370a0823160e01b815230600482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691632e1a7d4d9183916370a08231916024808301926020929190829003018186803b15801561060d57600080fd5b505afa158015610621573d6000803e3d6000fd5b505050506040513d602081101561063757600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b168152600481019290925251602480830192600092919082900301818387803b15801561068f57600080fd5b505af11580156106a3573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc5b73ff4788856040518463ffffffff1660e01b8152600401808381526020018262ffffff168152602001925050506000604051808303818588803b15801561071a57600080fd5b505af115801561072e573d6000803e3d6000fd5b505050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156107a257600080fd5b505afa1580156107b6573d6000803e3d6000fd5b505050506040513d60208110156107cc57600080fd5b5051604080516001600160a01b0385168152602081018990528082018a905260608101839052476080820152905191925033917fc723e34ef5da33ff97116afe67fb4330d3189467330363a49eb6c9d2fd762a8c9181900360a00190a26040805163a9059cbb60e01b81523360048201526024810183905290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a9059cbb9160448083019260209291908290030181600087803b15801561089857600080fd5b505af11580156108ac573d6000803e3d6000fd5b505050506040513d60208110156108c257600080fd5b505047156108d4576108d43347610b1e565b505060016000555050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516323b872dd60e01b81526000906001600160a01b038916906323b872dd9061093990899030908990600401610c47565b602060405180830381600087803b15801561095357600080fd5b505af1158015610967573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098b9190610c08565b5060405163095ea7b360e01b81526001600160a01b0389169063095ea7b3906109da907f0000000000000000000000000000000000000000000000000000000000000000908890600401610c6b565b602060405180830381600087803b1580156109f457600080fd5b505af1158015610a08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2c9190610c08565b5060408051610100810182526001600160a01b03808b168252898116602083015262ffffff851682840152878116606083015242608083015260a0820187905260c08201869052600060e0830152915163414bf38960e01b815290917f0000000000000000000000000000000000000000000000000000000000000000169063414bf38990610abf908490600401610c84565b602060405180830381600087803b158015610ad957600080fd5b505af1158015610aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b119190610c2f565b9998505050505050505050565b80471015610b73576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114610bbe576040519150601f19603f3d011682016040523d82523d6000602084013e610bc3565b606091505b5050905080610c035760405162461bcd60e51b815260040180806020018281038252603a815260200180610cf4603a913960400191505060405180910390fd5b505050565b600060208284031215610c19578081fd5b81518015158114610c28578182fd5b9392505050565b600060208284031215610c40578081fd5b5051919050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6000610100820190506001600160a01b0380845116835280602085015116602084015262ffffff60408501511660408401528060608501511660608401526080840151608084015260a084015160a084015260c084015160c08401528060e08501511660e0840152509291505056fe416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564a2646970667358221220fcd43e471a4f1be2f1f1ccf4169e3d06484dd0cc15e022ffbfc5207a7fbbdf4664736f6c63430007060033",
  "devdoc": {
    "author": "Opyn team",
    "details": "CrabHelper contract",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_crab": "address of crabV2 contract",
          "_swapRouter": "address of Uniswap swap router"
        }
      },
      "flashDepositERC20(uint256,uint256,uint256,uint24,uint24,address)": {
        "params": {
          "_amountIn": "amount of ERC20 token to swap for weth",
          "_erc20Fee": "pool fee for transfer ERC20/eth pool (3000 = 30bps)",
          "_ethToDeposit": "amount of ETH to deposit",
          "_minEthToGet": "min amount of ETH to receive in the swap",
          "_tokenIn": "ERC20 token to pay",
          "_wPowerPerpFee": "pool fee for wPowerPerp/eth pool (3000 = 30bps)"
        }
      },
      "flashWithdrawERC20(uint256,uint256,address,uint256,uint24,uint24)": {
        "params": {
          "_crabAmount": "amount of crab shares to withdraw",
          "_erc20Fee": "pool fee for transfer ERC20/eth pool (3000 = 30bps)",
          "_maxEthToPay": "max eth to pay in swap for wPowerPerp",
          "_minAmountOut": "min amount of ERC20 to receive",
          "_tokenOut": "ERC20 token to receive",
          "_wPowerPerpFee": "pool fee for wPowerPerp/eth pool (3000 = 30bps)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "constructor"
      },
      "flashDepositERC20(uint256,uint256,uint256,uint24,uint24,address)": {
        "notice": "allows user to flash deposit into crab from an aribtrary ERC20"
      },
      "flashWithdrawERC20(uint256,uint256,address,uint256,uint24,uint24)": {
        "notice": "allows user to flash withdraw from crab to an aribtrary ERC20"
      }
    },
    "notice": "Contract for Crab helper functions",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4176,
        "contract": "contracts/strategy/CrabHelper.sol:CrabHelper",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}