{
  "address": "0xb9127F2e97F6816DCd7b85d8617B7AcFe5E15419",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "sqrtRatioAX96",
          "type": "uint160"
        },
        {
          "internalType": "uint160",
          "name": "sqrtRatioBX96",
          "type": "uint160"
        },
        {
          "internalType": "uint128",
          "name": "liquidity",
          "type": "uint128"
        },
        {
          "internalType": "bool",
          "name": "roundUp",
          "type": "bool"
        }
      ],
      "name": "getAmount0Delta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "sqrtRatioAX96",
          "type": "uint160"
        },
        {
          "internalType": "uint160",
          "name": "sqrtRatioBX96",
          "type": "uint160"
        },
        {
          "internalType": "uint128",
          "name": "liquidity",
          "type": "uint128"
        },
        {
          "internalType": "bool",
          "name": "roundUp",
          "type": "bool"
        }
      ],
      "name": "getAmount1Delta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x2bdb3fc694628e83855123ddee85e255d1fb5a12955ca7c6905deebcb9d29dd5",
  "receipt": {
    "to": null,
    "from": "0x5599b4EAdDd319e2F462b27fC8378B0BFaD309CA",
    "contractAddress": "0xb9127F2e97F6816DCd7b85d8617B7AcFe5E15419",
    "transactionIndex": 48,
    "gasUsed": "245472",
    "logsBloom": "0x
    "blockHash": "0x49521b7bb81c43ca68576110a738166dfe29d62e1428d3612dc63ad14aaefdce",
    "transactionHash": "0x2bdb3fc694628e83855123ddee85e255d1fb5a12955ca7c6905deebcb9d29dd5",
    "logs": [],
    "blockNumber": 14922911,
    "cumulativeGasUsed": "3944307",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "fc32ed9e00a9017e491333926bef5473",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtRatioAX96\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"sqrtRatioBX96\",\"type\":\"uint160\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"roundUp\",\"type\":\"bool\"}],\"name\":\"getAmount0Delta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtRatioAX96\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"sqrtRatioBX96\",\"type\":\"uint160\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"roundUp\",\"type\":\"bool\"}],\"name\":\"getAmount1Delta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAmount0Delta(uint160,uint160,uint128,bool)\":{\"details\":\"Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper), i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\",\"params\":{\"liquidity\":\"The amount of usable liquidity\",\"roundUp\":\"Whether to round the amount up or down\",\"sqrtRatioAX96\":\"A sqrt price\",\"sqrtRatioBX96\":\"Another sqrt price\"},\"returns\":{\"amount0\":\"Amount of token0 required to cover a position of size liquidity between the two passed prices\"}},\"getAmount1Delta(uint160,uint160,uint128,bool)\":{\"details\":\"Calculates liquidity * (sqrt(upper) - sqrt(lower))\",\"params\":{\"liquidity\":\"The amount of usable liquidity\",\"roundUp\":\"Whether to round the amount up, or down\",\"sqrtRatioAX96\":\"A sqrt price\",\"sqrtRatioBX96\":\"Another sqrt price\"},\"returns\":{\"amount1\":\"Amount of token1 required to cover a position of size liquidity between the two passed prices\"}}},\"title\":\"Functions based on Q64.96 sqrt price and liquidity\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAmount0Delta(uint160,uint160,uint128,bool)\":{\"notice\":\"Gets the amount0 delta between two prices\"},\"getAmount1Delta(uint160,uint160,uint128,bool)\":{\"notice\":\"Gets the amount1 delta between two prices\"}},\"notice\":\"Exposes two functions from @uniswap/v3-core SqrtPriceMath that use square root of price as a Q64.96 and liquidity to compute deltas\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libs/SqrtPriceMathPartial.sol\":\"SqrtPriceMathPartial\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe511530871deaef86692cea9adb6076d26d7b47fd4815ce51af52af981026057\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libs/SqrtPriceMathPartial.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Exposes two functions from @uniswap/v3-core SqrtPriceMath\\n/// that use square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMathPartial {\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) external pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n        require(sqrtRatioAX96 > 0);\\n\\n        return\\n            roundUp\\n                ? UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                    sqrtRatioAX96\\n                )\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) external pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            roundUp\\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n}\\n\",\"keccak256\":\"0x34b98f373514d057151a41d35aa42031af3b1a47e910888ed73315f72520e429\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x61037c610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80632c32d4b61461004557806348a0c5bd146100a7575b600080fd5b6100956004803603608081101561005b57600080fd5b506001600160a01b0381358116916020810135909116906fffffffffffffffffffffffffffffffff604082013516906060013515156100f7565b60408051918252519081900360200190f35b610095600480360360808110156100bd57600080fd5b506001600160a01b0381358116916020810135909116906fffffffffffffffffffffffffffffffff604082013516906060013515156101b4565b6000836001600160a01b0316856001600160a01b03161115610117579293925b7bffffffffffffffffffffffffffffffff000000000000000000000000606084901b166001600160a01b03868603811690871661015357600080fd5b8361018357866001600160a01b03166101768383896001600160a01b0316610251565b8161017d57fe5b046101a9565b6101a961019a8383896001600160a01b0316610301565b886001600160a01b031661033b565b979650505050505050565b6000836001600160a01b0316856001600160a01b031611156101d4579293925b816102135761020e836fffffffffffffffffffffffffffffffff168686036001600160a01b03166c01000000000000000000000000610251565b610248565b610248836fffffffffffffffffffffffffffffffff168686036001600160a01b03166c01000000000000000000000000610301565b95945050505050565b6000808060001985870986860292508281109083900303905080610287576000841161027c57600080fd5b5082900490506102fa565b80841161029357600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b600061030e848484610251565b90506000828061031a57fe5b84860911156102fa57600019811061033157600080fd5b6001019392505050565b80820491061515019056fea264697066735822122015b1d5e98e518aedb03f0724756a56b09b753efd09a45ae663413fd3cad16d6d64736f6c63430007060033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80632c32d4b61461004557806348a0c5bd146100a7575b600080fd5b6100956004803603608081101561005b57600080fd5b506001600160a01b0381358116916020810135909116906fffffffffffffffffffffffffffffffff604082013516906060013515156100f7565b60408051918252519081900360200190f35b610095600480360360808110156100bd57600080fd5b506001600160a01b0381358116916020810135909116906fffffffffffffffffffffffffffffffff604082013516906060013515156101b4565b6000836001600160a01b0316856001600160a01b03161115610117579293925b7bffffffffffffffffffffffffffffffff000000000000000000000000606084901b166001600160a01b03868603811690871661015357600080fd5b8361018357866001600160a01b03166101768383896001600160a01b0316610251565b8161017d57fe5b046101a9565b6101a961019a8383896001600160a01b0316610301565b886001600160a01b031661033b565b979650505050505050565b6000836001600160a01b0316856001600160a01b031611156101d4579293925b816102135761020e836fffffffffffffffffffffffffffffffff168686036001600160a01b03166c01000000000000000000000000610251565b610248565b610248836fffffffffffffffffffffffffffffffff168686036001600160a01b03166c01000000000000000000000000610301565b95945050505050565b6000808060001985870986860292508281109083900303905080610287576000841161027c57600080fd5b5082900490506102fa565b80841161029357600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b600061030e848484610251565b90506000828061031a57fe5b84860911156102fa57600019811061033157600080fd5b6001019392505050565b80820491061515019056fea264697066735822122015b1d5e98e518aedb03f0724756a56b09b753efd09a45ae663413fd3cad16d6d64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAmount0Delta(uint160,uint160,uint128,bool)": {
        "details": "Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper), i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))",
        "params": {
          "liquidity": "The amount of usable liquidity",
          "roundUp": "Whether to round the amount up or down",
          "sqrtRatioAX96": "A sqrt price",
          "sqrtRatioBX96": "Another sqrt price"
        },
        "returns": {
          "amount0": "Amount of token0 required to cover a position of size liquidity between the two passed prices"
        }
      },
      "getAmount1Delta(uint160,uint160,uint128,bool)": {
        "details": "Calculates liquidity * (sqrt(upper) - sqrt(lower))",
        "params": {
          "liquidity": "The amount of usable liquidity",
          "roundUp": "Whether to round the amount up, or down",
          "sqrtRatioAX96": "A sqrt price",
          "sqrtRatioBX96": "Another sqrt price"
        },
        "returns": {
          "amount1": "Amount of token1 required to cover a position of size liquidity between the two passed prices"
        }
      }
    },
    "title": "Functions based on Q64.96 sqrt price and liquidity",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAmount0Delta(uint160,uint160,uint128,bool)": {
        "notice": "Gets the amount0 delta between two prices"
      },
      "getAmount1Delta(uint160,uint160,uint128,bool)": {
        "notice": "Gets the amount1 delta between two prices"
      }
    },
    "notice": "Exposes two functions from @uniswap/v3-core SqrtPriceMath that use square root of price as a Q64.96 and liquidity to compute deltas",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}