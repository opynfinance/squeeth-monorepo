{
  "address": "0x46f09e866623a9CD3d316b7392937Ce78Ec834a7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_crab",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "crabAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wSqueethAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "executedPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "DepositOTC",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "crabAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethSent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wSqueethAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "executedPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "WithdrawOTC",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crab",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalEth",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "initiator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isBuying",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CrabOTC.Order",
          "name": "_order",
          "type": "tuple"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "setNonceTrue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wPowerPerp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_crabAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "initiator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isBuying",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CrabOTC.Order",
          "name": "_order",
          "type": "tuple"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x455d96748620ae412d707d8d4f0d2c15f8218dee8d6751828fb4a8c66777546f",
  "receipt": {
    "to": null,
    "from": "0xf60eb02594AbB75b2e0FA4b2aA28b0691D8db775",
    "contractAddress": "0x46f09e866623a9CD3d316b7392937Ce78Ec834a7",
    "transactionIndex": 51,
    "gasUsed": "1543723",
    "logsBloom": "0x00000000000000400000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000200000020000000000000000000000000000000000000000000000000000004000000000000000000004100000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000800000000000000000000000000000000",
    "blockHash": "0x597e5d71b5d9a07803cf1c963604f608f152b710609b85ad19ceaad34b6afad8",
    "transactionHash": "0x455d96748620ae412d707d8d4f0d2c15f8218dee8d6751828fb4a8c66777546f",
    "logs": [
      {
        "transactionIndex": 51,
        "blockNumber": 15678401,
        "transactionHash": "0x455d96748620ae412d707d8d4f0d2c15f8218dee8d6751828fb4a8c66777546f",
        "address": "0xf1B99e3E573A1a9C5E6B2Ce818b617F0E664E86B",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000046f09e866623a9cd3d316b7392937ce78ec834a7",
          "0x0000000000000000000000003b960e47784150f5a63777201ee2b15253d713e8"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 116,
        "blockHash": "0x597e5d71b5d9a07803cf1c963604f608f152b710609b85ad19ceaad34b6afad8"
      }
    ],
    "blockNumber": 15678401,
    "cumulativeGasUsed": "6022092",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3b960e47784150f5a63777201ee2b15253d713e8"
  ],
  "solcInputHash": "7e01b6167043dbf3e74793807f36cbc7",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crab\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"crabAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wSqueethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executedPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"DepositOTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"crabAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wSqueethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executedPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"WithdrawOTC\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crab\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalEth\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBuying\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct CrabOTC.Order\",\"name\":\"_order\",\"type\":\"tuple\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"setNonceTrue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wPowerPerp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_crabAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBuying\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct CrabOTC.Order\",\"name\":\"_order\",\"type\":\"tuple\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(uint256,(address,address,uint256,uint256,bool,uint256,uint256,uint8,bytes32,bytes32))\":{\"details\":\"Deposit into strategy by selling the minted oSqth\",\"params\":{\"_order\":\"A signed order to swap the tokens\",\"_totalEth\":\"Total amount of ETH to deposit value + eth from selling minted oSqth\"}},\"setNonceTrue(uint256)\":{\"params\":{\"_nonce\":\"the number to be set true\"}},\"withdraw(uint256,uint256,(address,address,uint256,uint256,bool,uint256,uint256,uint8,bytes32,bytes32))\":{\"details\":\"Withdraw from strategy by buying osqth\",\"params\":{\"_crabAmount\":\"Amount of crab to withdraw\",\"_order\":\"A signed order to swap the tokens\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setNonceTrue(uint256)\":{\"notice\":\"set nonce to true\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategy/CrabOTC.sol\":\"CrabOTC\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0xc80ce3fcc5e444a2c5bdb902fe4d4f4ecba04e9b416425697d00ae95c1955f82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/drafts/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = _getChainId();\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view virtual returns (bytes32) {\\n        if (_getChainId() == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                typeHash,\\n                name,\\n                version,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4bc5cda2bfee483ff10334881c9ea5cc4df7faa7b18a5a4b8f02fc51cf8adca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\"},\"contracts/interfaces/ICrabStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.7.6;\\n\\npragma abicoder v2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICrabStrategyV2 is IERC20 {\\n    function wPowerPerp() external view returns (address);\\n\\n    function weth() external view returns (address);\\n\\n    function powerTokenController() external view returns (address);\\n\\n    function getVaultDetails()\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function flashDeposit(uint256 _ethToDeposit, uint24 _poolFee) external payable;\\n\\n    function flashWithdraw(\\n        uint256 _crabAmount,\\n        uint256 _maxEthToPay,\\n        uint24 _poolFee\\n    ) external;\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 _crabAmount) external;\\n}\\n\",\"keccak256\":\"0x88d62891cf69343fe5e3f39c2cfc2e66cdacff70e135c186162ebdeb1391be08\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH9 is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x78be70880c9ec22c35cf595377416bb25960936fee1b0fff06e415bda1b5e64b\",\"license\":\"MIT\"},\"contracts/strategy/CrabOTC.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport {ICrabStrategyV2} from \\\"../interfaces/ICrabStrategyV2.sol\\\";\\nimport {IWETH9} from \\\"../interfaces/IWETH9.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {EIP712} from \\\"@openzeppelin/contracts/drafts/EIP712.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\nimport {StrategyMath} from \\\"./base/StrategyMath.sol\\\";\\n\\ncontract CrabOTC is EIP712 {\\n    using StrategyMath for uint256;\\n    using Address for address payable;\\n\\n    address public immutable crab;\\n    address public immutable weth;\\n    address public immutable controller;\\n    address public immutable wPowerPerp;\\n    mapping(address => mapping(uint256 => bool)) public nonces;\\n\\n    struct Order {\\n        address initiator;\\n        address trader;\\n        uint256 quantity;\\n        uint256 price;\\n        bool isBuying;\\n        uint256 expiry;\\n        uint256 nonce;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    event DepositOTC(\\n        address indexed depositor,\\n        uint256 crabAmount,\\n        uint256 wSqueethAmount,\\n        uint256 depositedAmount,\\n        uint256 executedPrice,\\n        address trader\\n    );\\n\\n    event WithdrawOTC(\\n        address indexed depositor,\\n        uint256 crabAmount,\\n        uint256 ethSent,\\n        uint256 wSqueethAmount,\\n        uint256 executedPrice,\\n        address trader\\n    );\\n\\n    bytes32 private constant _CRAB_BALANCE_TYPEHASH =\\n        keccak256(\\n            \\\"Order(address initiator,address trader,uint256 quantity,uint256 price,bool isBuying,uint256 expiry,uint256 nonce)\\\"\\n        );\\n\\n    constructor(address _crab) EIP712(\\\"CrabOTC\\\", \\\"2\\\") {\\n        require(_crab != address(0), \\\"Invalid crab address\\\");\\n\\n        crab = _crab;\\n        weth = ICrabStrategyV2(_crab).weth();\\n        controller = ICrabStrategyV2(_crab).powerTokenController();\\n        wPowerPerp = ICrabStrategyV2(_crab).wPowerPerp();\\n        IERC20(ICrabStrategyV2(_crab).wPowerPerp()).approve(_crab, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice set nonce to true\\n     * @param _nonce the number to be set true\\n     */\\n    function setNonceTrue(uint256 _nonce) external {\\n        nonces[msg.sender][_nonce] = true;\\n    }\\n\\n    /**\\n     * @dev Deposit into strategy by selling the minted oSqth\\n     * @param _totalEth Total amount of ETH to deposit value + eth from selling minted oSqth\\n     * @param _order A signed order to swap the tokens\\n     */\\n    function deposit(uint256 _totalEth, Order memory _order) external payable {\\n        _verifyOrder(_order);\\n        require(_order.isBuying, \\\"Should be a buy order\\\");\\n\\n        uint256 depositedEth = msg.value;\\n\\n        uint256 wSqueethQuantity = _getWSqueethToMint(_totalEth);\\n        require(_order.quantity >= wSqueethQuantity, \\\"Order quantity is less than needed\\\");\\n\\n        uint256 wethAmount = wSqueethQuantity.wmul(_order.price);\\n\\n        IWETH9(weth).transferFrom(_order.trader, address(this), wethAmount);\\n        IWETH9(weth).withdraw(wethAmount);\\n\\n        ICrabStrategyV2(crab).deposit{value: _totalEth}();\\n        uint256 crabAmount = IERC20(crab).balanceOf(address(this));\\n        IERC20(crab).transfer(_order.initiator, crabAmount);\\n        IERC20(wPowerPerp).transfer(_order.trader, wSqueethQuantity);\\n\\n        uint256 excessEth = address(this).balance;\\n\\n        if (excessEth > uint256(0)) {\\n            depositedEth = depositedEth.sub(excessEth);\\n            payable(_order.initiator).sendValue(excessEth);\\n        }\\n\\n        emit DepositOTC(_order.initiator, crabAmount, wSqueethQuantity, depositedEth, _order.price, _order.trader);\\n    }\\n\\n    /**\\n     * @dev Withdraw from strategy by buying osqth\\n     * @param _crabAmount Amount of crab to withdraw\\n     * @param _order A signed order to swap the tokens\\n     */\\n    function withdraw(\\n        uint256 _crabAmount,\\n        uint256 _maxPrice,\\n        Order memory _order\\n    ) external payable {\\n        _verifyOrder(_order);\\n        require(!_order.isBuying, \\\"Should be a sell order\\\");\\n\\n        uint256 quantity = _getDebtFromStrategyAmount(_crabAmount);\\n        require(_order.quantity >= quantity, \\\"Order quantity is less than needed\\\");\\n        require(_order.price <= _maxPrice, \\\"Order price is greater than max Price\\\");\\n\\n        IERC20(crab).transferFrom(_order.initiator, address(this), _crabAmount);\\n        IERC20(wPowerPerp).transferFrom(_order.trader, address(this), quantity);\\n\\n        ICrabStrategyV2(crab).withdraw(_crabAmount);\\n\\n        uint256 ethToPay = quantity.wmul(_order.price);\\n        IWETH9(weth).deposit{value: ethToPay}();\\n        IWETH9(weth).transfer(_order.trader, ethToPay);\\n\\n        uint256 _withdrawAmount = address(this).balance;\\n\\n        if (_withdrawAmount > uint256(0)) {\\n            payable(_order.initiator).sendValue(_withdrawAmount);\\n        }\\n\\n        emit WithdrawOTC(_order.initiator, _crabAmount, _withdrawAmount, quantity, _order.price, _order.trader);\\n    }\\n\\n    /**\\n     * @dev set nonce flag of the trader to true\\n     * @param _trader address of the signer\\n     * @param _nonce number that is to be traded only once\\n     */\\n    function _useNonce(address _trader, uint256 _nonce) internal {\\n        require(!nonces[_trader][_nonce], \\\"Nonce already used\\\");\\n        nonces[_trader][_nonce] = true;\\n    }\\n\\n    /**\\n     * @dev Check if the order is valid or not\\n     * @param _order A signed order to swap the tokens\\n     */\\n    function _verifyOrder(Order memory _order) internal {\\n        require(_order.initiator == msg.sender, \\\"Initiator should be the sender\\\");\\n\\n        _useNonce(_order.trader, _order.nonce);\\n\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                _CRAB_BALANCE_TYPEHASH,\\n                _order.initiator,\\n                _order.trader,\\n                _order.quantity,\\n                _order.price,\\n                _order.isBuying,\\n                _order.expiry,\\n                _order.nonce\\n            )\\n        );\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n        address offerSigner = ECDSA.recover(hash, _order.v, _order.r, _order.s);\\n        require(offerSigner == _order.trader, \\\"Invalid offer signature\\\");\\n        require(_order.expiry >= block.timestamp, \\\"Order has expired\\\");\\n    }\\n\\n    /**\\n     * @dev For the given amount of eth, gives the wsqueeth to mint\\n     * @param _ethToDeposit Amount of ETH to deposit\\n     */\\n    function _getWSqueethToMint(uint256 _ethToDeposit) internal view returns (uint256) {\\n        (, , uint256 collatAmount, uint256 shortAmount) = ICrabStrategyV2(crab).getVaultDetails();\\n\\n        return _ethToDeposit.wmul(shortAmount).wdiv(collatAmount);\\n    }\\n\\n    /**\\n     * @notice get strategy debt amount for a specific strategy token amount\\n     * @param _strategyAmount strategy amount\\n     * @return debt amount\\n     */\\n    function _getDebtFromStrategyAmount(uint256 _strategyAmount) internal view returns (uint256) {\\n        (, , , uint256 strategyDebt) = ICrabStrategyV2(crab).getVaultDetails();\\n        return strategyDebt.wmul(_strategyAmount).wdiv(ICrabStrategyV2(crab).totalSupply());\\n    }\\n\\n    /**\\n     * @notice receive function to allow ETH transfer to this contract\\n     */\\n    receive() external payable {\\n        require(msg.sender == weth || msg.sender == crab, \\\"Cannot receive eth\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3b06213756e6ac677f31cd7be68343c2f9449a6bf225b831f7576f20ab9b3424\",\"license\":\"BUSL-1.1\"},\"contracts/strategy/base/StrategyMath.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-only\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >0.4.13;\\n\\n\\n/**\\n * @notice Copied from https://github.com/dapphub/ds-math/blob/e70a364787804c1ded9801ed6c27b440a86ebd32/src/math.sol\\n * @dev change contract to library, added div() function\\n */\\nlibrary StrategyMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        return x <= y ? x : y;\\n    }\\n    function max(uint x, uint y) internal pure returns (uint z) {\\n        return x >= y ? x : y;\\n    }\\n    function imin(int x, int y) internal pure returns (int z) {\\n        return x <= y ? x : y;\\n    }\\n    function imax(int x, int y) internal pure returns (int z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    uint constant WAD = 10 ** 18;\\n    uint constant RAY = 10 ** 27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n    //rounds to zero if x*y < WAD / 2\\n    function rmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    // Ceil A to a multiple m\\n    function ceil(uint a, uint m) internal pure returns(uint z) {\\n        z = mul(div(sub(add(a, m), 1), m), m);\\n    }\\n\\n    // Floor A to a multiple m\\n    function floor(uint a, uint m) internal pure returns(uint z) {\\n        z = mul(div(a, m), m);\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    function rpow(uint x, uint n) internal pure returns (uint z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xfec6fa07fbbb639f94321d6503f5363286776cf831215017ce28aae67295613b\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6101a06040523480156200001257600080fd5b5060405162001fce38038062001fce833981016040819052620000359162000454565b6040805180820182526007815266437261624f544360c81b6020808301918252835180850190945260018452601960f91b908401528151902060c08190527fad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a560e08190529192917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f620000c7620003ec565b60a052620000d7818484620003f0565b60805261010052505050506001600160a01b038116620001145760405162461bcd60e51b81526004016200010b90620004bf565b60405180910390fd5b806001600160a01b0316610120816001600160a01b031660601b81525050806001600160a01b0316633fc8cef36040518163ffffffff1660e01b815260040160206040518083038186803b1580156200016c57600080fd5b505afa15801562000181573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a7919062000454565b6001600160a01b0316610140816001600160a01b031660601b81525050806001600160a01b0316633dcb0c5d6040518163ffffffff1660e01b815260040160206040518083038186803b158015620001fe57600080fd5b505afa15801562000213573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000239919062000454565b6001600160a01b0316610160816001600160a01b031660601b81525050806001600160a01b0316637f07b1306040518163ffffffff1660e01b815260040160206040518083038186803b1580156200029057600080fd5b505afa158015620002a5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002cb919062000454565b6001600160a01b0316610180816001600160a01b031660601b81525050806001600160a01b0316637f07b1306040518163ffffffff1660e01b815260040160206040518083038186803b1580156200032257600080fd5b505afa15801562000337573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200035d919062000454565b6001600160a01b031663095ea7b3826000196040518363ffffffff1660e01b81526004016200038e929190620004a6565b602060405180830381600087803b158015620003a957600080fd5b505af1158015620003be573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003e4919062000484565b5050620004f6565b4690565b6000838383620003ff620003ec565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b03168152602001955050505050506040516020818303038152906040528051906020012090509392505050565b60006020828403121562000466578081fd5b81516001600160a01b03811681146200047d578182fd5b9392505050565b60006020828403121562000496578081fd5b815180151581146200047d578182fd5b6001600160a01b03929092168252602082015260400190565b60208082526014908201527f496e76616c696420637261622061646472657373000000000000000000000000604082015260600190565b60805160a05160c05160e051610100516101205160601c6101405160601c6101605160601c6101805160601c611a16620005b8600039806103b5528061066c52806109fd525080610b0f525080608f528061021252806104db5280610560528061072252806107c352508060c15280610236528061030e5280610457528061082c52806108b652806109595280610c705280610d095280610edb5250806113685250806113aa52508061138952508061130f52508061133f5250611a166000f3fe60806040526004361061007f5760003560e01c80636b085dab1161004e5780636b085dab1461019c5780637f07b130146101af578063ebd5fcbc146101c4578063f77c4791146101d75761010a565b80633d65fdac1461010f5780633fc8cef31461012f5780634285512d1461015a578063502e1a161461016f5761010a565b3661010a57336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806100e35750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b6101085760405162461bcd60e51b81526004016100ff90611757565b60405180910390fd5b005b600080fd5b34801561011b57600080fd5b5061010861012a366004611590565b6101ec565b34801561013b57600080fd5b50610144610210565b6040516101519190611623565b60405180910390f35b34801561016657600080fd5b50610144610234565b34801561017b57600080fd5b5061018f61018a366004611504565b610258565b6040516101519190611674565b6101086101aa3660046115ed565b610275565b3480156101bb57600080fd5b5061014461066a565b6101086101d23660046115c0565b61068e565b3480156101e357600080fd5b50610144610b0d565b3360009081526020818152604080832093835292905220805460ff19166001179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600060208181529281526040808220909352908152205460ff1681565b61027e81610b31565b8060800151156102a05760405162461bcd60e51b81526004016100ff90611875565b60006102ab84610c6b565b905080826040015110156102d15760405162461bcd60e51b81526004016100ff906117fc565b82826060015111156102f55760405162461bcd60e51b81526004016100ff906116c3565b81516040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd91610346919030908990600401611637565b602060405180830381600087803b15801561036057600080fd5b505af1158015610374573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610398919061156d565b5060208201516040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd916103ed919030908690600401611637565b602060405180830381600087803b15801561040757600080fd5b505af115801561041b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043f919061156d565b50604051632e1a7d4d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d9061048c9087906004016118e3565b600060405180830381600087803b1580156104a657600080fd5b505af11580156104ba573d6000803e3d6000fd5b5050505060006104d7836060015183610db190919063ffffffff16565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561053457600080fd5b505af1158015610548573d6000803e3d6000fd5b50505050602084015160405163a9059cbb60e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063a9059cbb9161059e91859060040161165b565b602060405180830381600087803b1580156105b857600080fd5b505af11580156105cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f0919061156d565b5047801561060d57835161060d906001600160a01b031682610dea565b83600001516001600160a01b03167f5a92f4ef9bab204b0c044b0a8640b372b16c8786c7778ea769010ee2dbb3a2b78783868860600151896020015160405161065a9594939291906118ec565b60405180910390a2505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61069781610b31565b80608001516106b85760405162461bcd60e51b81526004016100ff90611720565b3460006106c484610ed4565b905080836040015110156106ea5760405162461bcd60e51b81526004016100ff906117fc565b6000610703846060015183610db190919063ffffffff16565b60208501516040516323b872dd60e01b81529192506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd916107599130908690600401611637565b602060405180830381600087803b15801561077357600080fd5b505af1158015610787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ab919061156d565b50604051632e1a7d4d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d906107f89084906004016118e3565b600060405180830381600087803b15801561081257600080fd5b505af1158015610826573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0866040518263ffffffff1660e01b81526004016000604051808303818588803b15801561088557600080fd5b505af1158015610899573d6000803e3d6000fd5b50506040516370a0823160e01b8152600093506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692506370a0823191506108ed903090600401611623565b60206040518083038186803b15801561090557600080fd5b505afa158015610919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093d91906115a8565b855160405163a9059cbb60e01b81529192506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a9059cbb9161098e91859060040161165b565b602060405180830381600087803b1580156109a857600080fd5b505af11580156109bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e0919061156d565b50602085015160405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a9059cbb91610a339190879060040161165b565b602060405180830381600087803b158015610a4d57600080fd5b505af1158015610a61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a85919061156d565b50478015610aaf57610a978582610f8f565b8651909550610aaf906001600160a01b031682610dea565b85600001516001600160a01b03167f5adefc5de3a1f616bb6bdef991cbaa3ae6856e70e945470a3fa9a5cd2240a5728386888a606001518b60200151604051610afc9594939291906118ec565b60405180910390a250505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b80516001600160a01b03163314610b5a5760405162461bcd60e51b81526004016100ff906117c5565b610b6c81602001518260c00151610fed565b60007f70fc7ee465545e5b593d2f16015e87fa49a67ad927583bf82cced2fdc327a573826000015183602001518460400151856060015186608001518760a001518860c00151604051602001610bc998979695949392919061167f565b6040516020818303038152906040528051906020012090506000610bec8261105d565b90506000610c0a828560e001518661010001518761012001516110a9565b905083602001516001600160a01b0316816001600160a01b031614610c415760405162461bcd60e51b81526004016100ff906118ac565b428460a001511015610c655760405162461bcd60e51b81526004016100ff9061183e565b50505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663533092ef6040518163ffffffff1660e01b815260040160806040518083038186803b158015610cc757600080fd5b505afa158015610cdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cff919061152f565b9350505050610da87f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d6057600080fd5b505afa158015610d74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9891906115a8565b610da28386610db1565b90611227565b9150505b919050565b6000670de0b6b3a7640000610ddb610dc98585611247565b6002670de0b6b3a76400005b046112b3565b81610de257fe5b049392505050565b80471015610e3f576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114610e8a576040519150601f19603f3d011682016040523d82523d6000602084013e610e8f565b606091505b5050905080610ecf5760405162461bcd60e51b815260040180806020018281038252603a815260200180611963603a913960400191505060405180910390fd5b505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663533092ef6040518163ffffffff1660e01b815260040160806040518083038186803b158015610f3257600080fd5b505afa158015610f46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6a919061152f565b935093505050610f8782610da28387610db190919063ffffffff16565b949350505050565b80820382811115610fe7576040805162461bcd60e51b815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b92915050565b6001600160a01b03821660009081526020818152604080832084845290915290205460ff161561102f5760405162461bcd60e51b81526004016100ff9061178e565b6001600160a01b0390911660009081526020818152604080832093835292905220805460ff19166001179055565b600061106761130b565b82604051602001808061190160f01b81525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561110a5760405162461bcd60e51b815260040180806020018281038252602281526020018061199d6022913960400191505060405180910390fd5b8360ff16601b148061111f57508360ff16601c145b61115a5760405162461bcd60e51b81526004018080602001828103825260228152602001806119bf6022913960400191505060405180910390fd5b600060018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156111b6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661121e576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b95945050505050565b600081610ddb61123f85670de0b6b3a7640000611247565b600285610dd5565b60008115806112625750508082028282828161125f57fe5b04145b610fe7576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b80820182811015610fe7576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006113366113d4565b141561136357507f00000000000000000000000000000000000000000000000000000000000000006113d1565b6113ce7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006113d8565b90505b90565b4690565b60008383836113e56113d4565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b03168152602001955050505050506040516020818303038152906040528051906020012090509392505050565b8035610dac8161193c565b8035610dac81611954565b6000610140808385031215611463578182fd5b61146c81611918565b9150506114788261143a565b81526114866020830161143a565b602082015260408201356040820152606082013560608201526114ab60808301611445565b608082015260a082013560a082015260c082013560c08201526114d060e083016114f3565b60e082015261010080830135818301525061012080830135818301525092915050565b803560ff81168114610dac57600080fd5b60008060408385031215611516578182fd5b82356115218161193c565b946020939093013593505050565b60008060008060808587031215611544578182fd5b845161154f8161193c565b60208601516040870151606090970151919890975090945092505050565b60006020828403121561157e578081fd5b815161158981611954565b9392505050565b6000602082840312156115a1578081fd5b5035919050565b6000602082840312156115b9578081fd5b5051919050565b60008061016083850312156115d3578182fd5b823591506115e48460208501611450565b90509250929050565b60008060006101808486031215611602578283fd5b833592506020840135915061161a8560408601611450565b90509250925092565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b9788526001600160a01b03968716602089015294909516604087015260608601929092526080850152151560a084015260c083019190915260e08201526101000190565b60208082526025908201527f4f726465722070726963652069732067726561746572207468616e206d61782060408201527f5072696365000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526015908201527f53686f756c64206265206120627579206f726465720000000000000000000000604082015260600190565b60208082526012908201527f43616e6e6f742072656365697665206574680000000000000000000000000000604082015260600190565b60208082526012908201527f4e6f6e636520616c726561647920757365640000000000000000000000000000604082015260600190565b6020808252601e908201527f496e69746961746f722073686f756c64206265207468652073656e6465720000604082015260600190565b60208082526022908201527f4f72646572207175616e74697479206973206c657373207468616e206e656564604082015261195960f21b606082015260800190565b60208082526011908201527f4f72646572206861732065787069726564000000000000000000000000000000604082015260600190565b60208082526016908201527f53686f756c6420626520612073656c6c206f7264657200000000000000000000604082015260600190565b60208082526017908201527f496e76616c6964206f66666572207369676e6174757265000000000000000000604082015260600190565b90815260200190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b60405181810167ffffffffffffffff8111828210171561193457fe5b604052919050565b6001600160a01b038116811461195157600080fd5b50565b801515811461195157600080fdfe416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d6179206861766520726576657274656445434453413a20696e76616c6964207369676e6174757265202773272076616c756545434453413a20696e76616c6964207369676e6174757265202776272076616c7565a26469706673582212201d2a18c600658ce3bf498d028acef51b5c2b5f0ba221307c47af45555e71ecb564736f6c63430007060033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80636b085dab1161004e5780636b085dab1461019c5780637f07b130146101af578063ebd5fcbc146101c4578063f77c4791146101d75761010a565b80633d65fdac1461010f5780633fc8cef31461012f5780634285512d1461015a578063502e1a161461016f5761010a565b3661010a57336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806100e35750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b6101085760405162461bcd60e51b81526004016100ff90611757565b60405180910390fd5b005b600080fd5b34801561011b57600080fd5b5061010861012a366004611590565b6101ec565b34801561013b57600080fd5b50610144610210565b6040516101519190611623565b60405180910390f35b34801561016657600080fd5b50610144610234565b34801561017b57600080fd5b5061018f61018a366004611504565b610258565b6040516101519190611674565b6101086101aa3660046115ed565b610275565b3480156101bb57600080fd5b5061014461066a565b6101086101d23660046115c0565b61068e565b3480156101e357600080fd5b50610144610b0d565b3360009081526020818152604080832093835292905220805460ff19166001179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600060208181529281526040808220909352908152205460ff1681565b61027e81610b31565b8060800151156102a05760405162461bcd60e51b81526004016100ff90611875565b60006102ab84610c6b565b905080826040015110156102d15760405162461bcd60e51b81526004016100ff906117fc565b82826060015111156102f55760405162461bcd60e51b81526004016100ff906116c3565b81516040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd91610346919030908990600401611637565b602060405180830381600087803b15801561036057600080fd5b505af1158015610374573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610398919061156d565b5060208201516040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd916103ed919030908690600401611637565b602060405180830381600087803b15801561040757600080fd5b505af115801561041b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043f919061156d565b50604051632e1a7d4d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d9061048c9087906004016118e3565b600060405180830381600087803b1580156104a657600080fd5b505af11580156104ba573d6000803e3d6000fd5b5050505060006104d7836060015183610db190919063ffffffff16565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561053457600080fd5b505af1158015610548573d6000803e3d6000fd5b50505050602084015160405163a9059cbb60e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063a9059cbb9161059e91859060040161165b565b602060405180830381600087803b1580156105b857600080fd5b505af11580156105cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f0919061156d565b5047801561060d57835161060d906001600160a01b031682610dea565b83600001516001600160a01b03167f5a92f4ef9bab204b0c044b0a8640b372b16c8786c7778ea769010ee2dbb3a2b78783868860600151896020015160405161065a9594939291906118ec565b60405180910390a2505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61069781610b31565b80608001516106b85760405162461bcd60e51b81526004016100ff90611720565b3460006106c484610ed4565b905080836040015110156106ea5760405162461bcd60e51b81526004016100ff906117fc565b6000610703846060015183610db190919063ffffffff16565b60208501516040516323b872dd60e01b81529192506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd916107599130908690600401611637565b602060405180830381600087803b15801561077357600080fd5b505af1158015610787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ab919061156d565b50604051632e1a7d4d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d906107f89084906004016118e3565b600060405180830381600087803b15801561081257600080fd5b505af1158015610826573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0866040518263ffffffff1660e01b81526004016000604051808303818588803b15801561088557600080fd5b505af1158015610899573d6000803e3d6000fd5b50506040516370a0823160e01b8152600093506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692506370a0823191506108ed903090600401611623565b60206040518083038186803b15801561090557600080fd5b505afa158015610919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093d91906115a8565b855160405163a9059cbb60e01b81529192506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a9059cbb9161098e91859060040161165b565b602060405180830381600087803b1580156109a857600080fd5b505af11580156109bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e0919061156d565b50602085015160405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a9059cbb91610a339190879060040161165b565b602060405180830381600087803b158015610a4d57600080fd5b505af1158015610a61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a85919061156d565b50478015610aaf57610a978582610f8f565b8651909550610aaf906001600160a01b031682610dea565b85600001516001600160a01b03167f5adefc5de3a1f616bb6bdef991cbaa3ae6856e70e945470a3fa9a5cd2240a5728386888a606001518b60200151604051610afc9594939291906118ec565b60405180910390a250505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b80516001600160a01b03163314610b5a5760405162461bcd60e51b81526004016100ff906117c5565b610b6c81602001518260c00151610fed565b60007f70fc7ee465545e5b593d2f16015e87fa49a67ad927583bf82cced2fdc327a573826000015183602001518460400151856060015186608001518760a001518860c00151604051602001610bc998979695949392919061167f565b6040516020818303038152906040528051906020012090506000610bec8261105d565b90506000610c0a828560e001518661010001518761012001516110a9565b905083602001516001600160a01b0316816001600160a01b031614610c415760405162461bcd60e51b81526004016100ff906118ac565b428460a001511015610c655760405162461bcd60e51b81526004016100ff9061183e565b50505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663533092ef6040518163ffffffff1660e01b815260040160806040518083038186803b158015610cc757600080fd5b505afa158015610cdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cff919061152f565b9350505050610da87f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d6057600080fd5b505afa158015610d74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9891906115a8565b610da28386610db1565b90611227565b9150505b919050565b6000670de0b6b3a7640000610ddb610dc98585611247565b6002670de0b6b3a76400005b046112b3565b81610de257fe5b049392505050565b80471015610e3f576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114610e8a576040519150601f19603f3d011682016040523d82523d6000602084013e610e8f565b606091505b5050905080610ecf5760405162461bcd60e51b815260040180806020018281038252603a815260200180611963603a913960400191505060405180910390fd5b505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663533092ef6040518163ffffffff1660e01b815260040160806040518083038186803b158015610f3257600080fd5b505afa158015610f46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6a919061152f565b935093505050610f8782610da28387610db190919063ffffffff16565b949350505050565b80820382811115610fe7576040805162461bcd60e51b815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b92915050565b6001600160a01b03821660009081526020818152604080832084845290915290205460ff161561102f5760405162461bcd60e51b81526004016100ff9061178e565b6001600160a01b0390911660009081526020818152604080832093835292905220805460ff19166001179055565b600061106761130b565b82604051602001808061190160f01b81525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561110a5760405162461bcd60e51b815260040180806020018281038252602281526020018061199d6022913960400191505060405180910390fd5b8360ff16601b148061111f57508360ff16601c145b61115a5760405162461bcd60e51b81526004018080602001828103825260228152602001806119bf6022913960400191505060405180910390fd5b600060018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156111b6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661121e576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b95945050505050565b600081610ddb61123f85670de0b6b3a7640000611247565b600285610dd5565b60008115806112625750508082028282828161125f57fe5b04145b610fe7576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b80820182811015610fe7576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006113366113d4565b141561136357507f00000000000000000000000000000000000000000000000000000000000000006113d1565b6113ce7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006113d8565b90505b90565b4690565b60008383836113e56113d4565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b03168152602001955050505050506040516020818303038152906040528051906020012090509392505050565b8035610dac8161193c565b8035610dac81611954565b6000610140808385031215611463578182fd5b61146c81611918565b9150506114788261143a565b81526114866020830161143a565b602082015260408201356040820152606082013560608201526114ab60808301611445565b608082015260a082013560a082015260c082013560c08201526114d060e083016114f3565b60e082015261010080830135818301525061012080830135818301525092915050565b803560ff81168114610dac57600080fd5b60008060408385031215611516578182fd5b82356115218161193c565b946020939093013593505050565b60008060008060808587031215611544578182fd5b845161154f8161193c565b60208601516040870151606090970151919890975090945092505050565b60006020828403121561157e578081fd5b815161158981611954565b9392505050565b6000602082840312156115a1578081fd5b5035919050565b6000602082840312156115b9578081fd5b5051919050565b60008061016083850312156115d3578182fd5b823591506115e48460208501611450565b90509250929050565b60008060006101808486031215611602578283fd5b833592506020840135915061161a8560408601611450565b90509250925092565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b9788526001600160a01b03968716602089015294909516604087015260608601929092526080850152151560a084015260c083019190915260e08201526101000190565b60208082526025908201527f4f726465722070726963652069732067726561746572207468616e206d61782060408201527f5072696365000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526015908201527f53686f756c64206265206120627579206f726465720000000000000000000000604082015260600190565b60208082526012908201527f43616e6e6f742072656365697665206574680000000000000000000000000000604082015260600190565b60208082526012908201527f4e6f6e636520616c726561647920757365640000000000000000000000000000604082015260600190565b6020808252601e908201527f496e69746961746f722073686f756c64206265207468652073656e6465720000604082015260600190565b60208082526022908201527f4f72646572207175616e74697479206973206c657373207468616e206e656564604082015261195960f21b606082015260800190565b60208082526011908201527f4f72646572206861732065787069726564000000000000000000000000000000604082015260600190565b60208082526016908201527f53686f756c6420626520612073656c6c206f7264657200000000000000000000604082015260600190565b60208082526017908201527f496e76616c6964206f66666572207369676e6174757265000000000000000000604082015260600190565b90815260200190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b60405181810167ffffffffffffffff8111828210171561193457fe5b604052919050565b6001600160a01b038116811461195157600080fd5b50565b801515811461195157600080fdfe416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d6179206861766520726576657274656445434453413a20696e76616c6964207369676e6174757265202773272076616c756545434453413a20696e76616c6964207369676e6174757265202776272076616c7565a26469706673582212201d2a18c600658ce3bf498d028acef51b5c2b5f0ba221307c47af45555e71ecb564736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(uint256,(address,address,uint256,uint256,bool,uint256,uint256,uint8,bytes32,bytes32))": {
        "details": "Deposit into strategy by selling the minted oSqth",
        "params": {
          "_order": "A signed order to swap the tokens",
          "_totalEth": "Total amount of ETH to deposit value + eth from selling minted oSqth"
        }
      },
      "setNonceTrue(uint256)": {
        "params": {
          "_nonce": "the number to be set true"
        }
      },
      "withdraw(uint256,uint256,(address,address,uint256,uint256,bool,uint256,uint256,uint8,bytes32,bytes32))": {
        "details": "Withdraw from strategy by buying osqth",
        "params": {
          "_crabAmount": "Amount of crab to withdraw",
          "_order": "A signed order to swap the tokens"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setNonceTrue(uint256)": {
        "notice": "set nonce to true"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22751,
        "contract": "contracts/strategy/CrabOTC.sol:CrabOTC",
        "label": "nonces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}